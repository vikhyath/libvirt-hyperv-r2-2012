<?xml version="1.0" encoding="ISO-8859-1"?>
<api name='libvirt'>
  <files>
    <file name='libvirt'>
     <summary>core interfaces for the libvirt library</summary>
     <description>Provides the interfaces of the libvirt library to handle virtualized domains  Copyright (C) 2005-2006, 2010-2014 Red Hat, Inc.  This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.  You should have received a copy of the GNU Lesser General Public License along with this library.  If not, see &lt;http://www.gnu.org/licenses/&gt;. </description>
     <author>Daniel Veillard &lt;veillard@redhat.com&gt; </author>
     <exports symbol='LIBVIR_CHECK_VERSION' type='macro'/>
     <exports symbol='LIBVIR_VERSION_NUMBER' type='macro'/>
     <exports symbol='VIR_COPY_CPUMAP' type='macro'/>
     <exports symbol='VIR_CPU_MAPLEN' type='macro'/>
     <exports symbol='VIR_CPU_USABLE' type='macro'/>
     <exports symbol='VIR_CPU_USED' type='macro'/>
     <exports symbol='VIR_DOMAIN_BANDWIDTH_IN_AVERAGE' type='macro'/>
     <exports symbol='VIR_DOMAIN_BANDWIDTH_IN_BURST' type='macro'/>
     <exports symbol='VIR_DOMAIN_BANDWIDTH_IN_PEAK' type='macro'/>
     <exports symbol='VIR_DOMAIN_BANDWIDTH_OUT_AVERAGE' type='macro'/>
     <exports symbol='VIR_DOMAIN_BANDWIDTH_OUT_BURST' type='macro'/>
     <exports symbol='VIR_DOMAIN_BANDWIDTH_OUT_PEAK' type='macro'/>
     <exports symbol='VIR_DOMAIN_BLKIO_DEVICE_READ_BPS' type='macro'/>
     <exports symbol='VIR_DOMAIN_BLKIO_DEVICE_READ_IOPS' type='macro'/>
     <exports symbol='VIR_DOMAIN_BLKIO_DEVICE_WEIGHT' type='macro'/>
     <exports symbol='VIR_DOMAIN_BLKIO_DEVICE_WRITE_BPS' type='macro'/>
     <exports symbol='VIR_DOMAIN_BLKIO_DEVICE_WRITE_IOPS' type='macro'/>
     <exports symbol='VIR_DOMAIN_BLKIO_FIELD_LENGTH' type='macro'/>
     <exports symbol='VIR_DOMAIN_BLKIO_WEIGHT' type='macro'/>
     <exports symbol='VIR_DOMAIN_BLOCK_IOTUNE_READ_BYTES_SEC' type='macro'/>
     <exports symbol='VIR_DOMAIN_BLOCK_IOTUNE_READ_IOPS_SEC' type='macro'/>
     <exports symbol='VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_BYTES_SEC' type='macro'/>
     <exports symbol='VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_IOPS_SEC' type='macro'/>
     <exports symbol='VIR_DOMAIN_BLOCK_IOTUNE_WRITE_BYTES_SEC' type='macro'/>
     <exports symbol='VIR_DOMAIN_BLOCK_IOTUNE_WRITE_IOPS_SEC' type='macro'/>
     <exports symbol='VIR_DOMAIN_BLOCK_STATS_ERRS' type='macro'/>
     <exports symbol='VIR_DOMAIN_BLOCK_STATS_FIELD_LENGTH' type='macro'/>
     <exports symbol='VIR_DOMAIN_BLOCK_STATS_FLUSH_REQ' type='macro'/>
     <exports symbol='VIR_DOMAIN_BLOCK_STATS_FLUSH_TOTAL_TIMES' type='macro'/>
     <exports symbol='VIR_DOMAIN_BLOCK_STATS_READ_BYTES' type='macro'/>
     <exports symbol='VIR_DOMAIN_BLOCK_STATS_READ_REQ' type='macro'/>
     <exports symbol='VIR_DOMAIN_BLOCK_STATS_READ_TOTAL_TIMES' type='macro'/>
     <exports symbol='VIR_DOMAIN_BLOCK_STATS_WRITE_BYTES' type='macro'/>
     <exports symbol='VIR_DOMAIN_BLOCK_STATS_WRITE_REQ' type='macro'/>
     <exports symbol='VIR_DOMAIN_BLOCK_STATS_WRITE_TOTAL_TIMES' type='macro'/>
     <exports symbol='VIR_DOMAIN_CPU_STATS_CPUTIME' type='macro'/>
     <exports symbol='VIR_DOMAIN_CPU_STATS_SYSTEMTIME' type='macro'/>
     <exports symbol='VIR_DOMAIN_CPU_STATS_USERTIME' type='macro'/>
     <exports symbol='VIR_DOMAIN_CPU_STATS_VCPUTIME' type='macro'/>
     <exports symbol='VIR_DOMAIN_EVENT_CALLBACK' type='macro'/>
     <exports symbol='VIR_DOMAIN_JOB_COMPRESSION_BYTES' type='macro'/>
     <exports symbol='VIR_DOMAIN_JOB_COMPRESSION_CACHE' type='macro'/>
     <exports symbol='VIR_DOMAIN_JOB_COMPRESSION_CACHE_MISSES' type='macro'/>
     <exports symbol='VIR_DOMAIN_JOB_COMPRESSION_OVERFLOW' type='macro'/>
     <exports symbol='VIR_DOMAIN_JOB_COMPRESSION_PAGES' type='macro'/>
     <exports symbol='VIR_DOMAIN_JOB_DATA_PROCESSED' type='macro'/>
     <exports symbol='VIR_DOMAIN_JOB_DATA_REMAINING' type='macro'/>
     <exports symbol='VIR_DOMAIN_JOB_DATA_TOTAL' type='macro'/>
     <exports symbol='VIR_DOMAIN_JOB_DISK_PROCESSED' type='macro'/>
     <exports symbol='VIR_DOMAIN_JOB_DISK_REMAINING' type='macro'/>
     <exports symbol='VIR_DOMAIN_JOB_DISK_TOTAL' type='macro'/>
     <exports symbol='VIR_DOMAIN_JOB_DOWNTIME' type='macro'/>
     <exports symbol='VIR_DOMAIN_JOB_MEMORY_CONSTANT' type='macro'/>
     <exports symbol='VIR_DOMAIN_JOB_MEMORY_NORMAL' type='macro'/>
     <exports symbol='VIR_DOMAIN_JOB_MEMORY_NORMAL_BYTES' type='macro'/>
     <exports symbol='VIR_DOMAIN_JOB_MEMORY_PROCESSED' type='macro'/>
     <exports symbol='VIR_DOMAIN_JOB_MEMORY_REMAINING' type='macro'/>
     <exports symbol='VIR_DOMAIN_JOB_MEMORY_TOTAL' type='macro'/>
     <exports symbol='VIR_DOMAIN_JOB_TIME_ELAPSED' type='macro'/>
     <exports symbol='VIR_DOMAIN_JOB_TIME_REMAINING' type='macro'/>
     <exports symbol='VIR_DOMAIN_MEMORY_FIELD_LENGTH' type='macro'/>
     <exports symbol='VIR_DOMAIN_MEMORY_HARD_LIMIT' type='macro'/>
     <exports symbol='VIR_DOMAIN_MEMORY_MIN_GUARANTEE' type='macro'/>
     <exports symbol='VIR_DOMAIN_MEMORY_PARAM_UNLIMITED' type='macro'/>
     <exports symbol='VIR_DOMAIN_MEMORY_SOFT_LIMIT' type='macro'/>
     <exports symbol='VIR_DOMAIN_MEMORY_SWAP_HARD_LIMIT' type='macro'/>
     <exports symbol='VIR_DOMAIN_NUMA_MODE' type='macro'/>
     <exports symbol='VIR_DOMAIN_NUMA_NODESET' type='macro'/>
     <exports symbol='VIR_DOMAIN_SCHEDULER_CAP' type='macro'/>
     <exports symbol='VIR_DOMAIN_SCHEDULER_CPU_SHARES' type='macro'/>
     <exports symbol='VIR_DOMAIN_SCHEDULER_EMULATOR_PERIOD' type='macro'/>
     <exports symbol='VIR_DOMAIN_SCHEDULER_EMULATOR_QUOTA' type='macro'/>
     <exports symbol='VIR_DOMAIN_SCHEDULER_LIMIT' type='macro'/>
     <exports symbol='VIR_DOMAIN_SCHEDULER_RESERVATION' type='macro'/>
     <exports symbol='VIR_DOMAIN_SCHEDULER_SHARES' type='macro'/>
     <exports symbol='VIR_DOMAIN_SCHEDULER_VCPU_PERIOD' type='macro'/>
     <exports symbol='VIR_DOMAIN_SCHEDULER_VCPU_QUOTA' type='macro'/>
     <exports symbol='VIR_DOMAIN_SCHEDULER_WEIGHT' type='macro'/>
     <exports symbol='VIR_DOMAIN_SCHED_FIELD_LENGTH' type='macro'/>
     <exports symbol='VIR_DOMAIN_SEND_KEY_MAX_KEYS' type='macro'/>
     <exports symbol='VIR_GET_CPUMAP' type='macro'/>
     <exports symbol='VIR_MIGRATE_PARAM_BANDWIDTH' type='macro'/>
     <exports symbol='VIR_MIGRATE_PARAM_DEST_NAME' type='macro'/>
     <exports symbol='VIR_MIGRATE_PARAM_DEST_XML' type='macro'/>
     <exports symbol='VIR_MIGRATE_PARAM_GRAPHICS_URI' type='macro'/>
     <exports symbol='VIR_MIGRATE_PARAM_LISTEN_ADDRESS' type='macro'/>
     <exports symbol='VIR_MIGRATE_PARAM_URI' type='macro'/>
     <exports symbol='VIR_NETWORK_EVENT_CALLBACK' type='macro'/>
     <exports symbol='VIR_NODEINFO_MAXCPUS' type='macro'/>
     <exports symbol='VIR_NODE_CPU_STATS_FIELD_LENGTH' type='macro'/>
     <exports symbol='VIR_NODE_CPU_STATS_IDLE' type='macro'/>
     <exports symbol='VIR_NODE_CPU_STATS_INTR' type='macro'/>
     <exports symbol='VIR_NODE_CPU_STATS_IOWAIT' type='macro'/>
     <exports symbol='VIR_NODE_CPU_STATS_KERNEL' type='macro'/>
     <exports symbol='VIR_NODE_CPU_STATS_USER' type='macro'/>
     <exports symbol='VIR_NODE_CPU_STATS_UTILIZATION' type='macro'/>
     <exports symbol='VIR_NODE_MEMORY_STATS_BUFFERS' type='macro'/>
     <exports symbol='VIR_NODE_MEMORY_STATS_CACHED' type='macro'/>
     <exports symbol='VIR_NODE_MEMORY_STATS_FIELD_LENGTH' type='macro'/>
     <exports symbol='VIR_NODE_MEMORY_STATS_FREE' type='macro'/>
     <exports symbol='VIR_NODE_MEMORY_STATS_TOTAL' type='macro'/>
     <exports symbol='VIR_SECURITY_DOI_BUFLEN' type='macro'/>
     <exports symbol='VIR_SECURITY_LABEL_BUFLEN' type='macro'/>
     <exports symbol='VIR_SECURITY_MODEL_BUFLEN' type='macro'/>
     <exports symbol='VIR_TYPED_PARAM_FIELD_LENGTH' type='macro'/>
     <exports symbol='VIR_UNUSE_CPU' type='macro'/>
     <exports symbol='VIR_USE_CPU' type='macro'/>
     <exports symbol='VIR_UUID_BUFLEN' type='macro'/>
     <exports symbol='VIR_UUID_STRING_BUFLEN' type='macro'/>
     <exports symbol='_virBlkioParameter' type='macro'/>
     <exports symbol='_virMemoryParameter' type='macro'/>
     <exports symbol='_virSchedParameter' type='macro'/>
     <exports symbol='VIR_CONNECT_BASELINE_CPU_EXPAND_FEATURES' type='enum'/>
     <exports symbol='VIR_CONNECT_CLOSE_REASON_CLIENT' type='enum'/>
     <exports symbol='VIR_CONNECT_CLOSE_REASON_EOF' type='enum'/>
     <exports symbol='VIR_CONNECT_CLOSE_REASON_ERROR' type='enum'/>
     <exports symbol='VIR_CONNECT_CLOSE_REASON_KEEPALIVE' type='enum'/>
     <exports symbol='VIR_CONNECT_CLOSE_REASON_LAST' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_DOMAINS_ACTIVE' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_DOMAINS_AUTOSTART' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_DOMAINS_HAS_SNAPSHOT' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_DOMAINS_INACTIVE' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_DOMAINS_MANAGEDSAVE' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_DOMAINS_NO_AUTOSTART' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_DOMAINS_NO_MANAGEDSAVE' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_DOMAINS_NO_SNAPSHOT' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_DOMAINS_OTHER' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_DOMAINS_PAUSED' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_DOMAINS_PERSISTENT' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_DOMAINS_RUNNING' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_DOMAINS_SHUTOFF' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_DOMAINS_TRANSIENT' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_INTERFACES_ACTIVE' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_INTERFACES_INACTIVE' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_NETWORKS_ACTIVE' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_NETWORKS_AUTOSTART' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_NETWORKS_INACTIVE' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_NETWORKS_NO_AUTOSTART' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_NETWORKS_PERSISTENT' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_NETWORKS_TRANSIENT' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_NODE_DEVICES_CAP_FC_HOST' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_NODE_DEVICES_CAP_NET' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_NODE_DEVICES_CAP_PCI_DEV' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI_GENERIC' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI_HOST' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI_TARGET' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_NODE_DEVICES_CAP_STORAGE' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_NODE_DEVICES_CAP_SYSTEM' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_NODE_DEVICES_CAP_USB_DEV' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_NODE_DEVICES_CAP_USB_INTERFACE' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_NODE_DEVICES_CAP_VPORTS' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_SECRETS_EPHEMERAL' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_SECRETS_NO_EPHEMERAL' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_SECRETS_NO_PRIVATE' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_SECRETS_PRIVATE' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_STORAGE_POOLS_ACTIVE' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_STORAGE_POOLS_AUTOSTART' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_STORAGE_POOLS_DIR' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_STORAGE_POOLS_DISK' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_STORAGE_POOLS_FS' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_STORAGE_POOLS_GLUSTER' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_STORAGE_POOLS_INACTIVE' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_STORAGE_POOLS_ISCSI' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_STORAGE_POOLS_LOGICAL' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_STORAGE_POOLS_MPATH' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_STORAGE_POOLS_NETFS' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_STORAGE_POOLS_NO_AUTOSTART' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_STORAGE_POOLS_PERSISTENT' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_STORAGE_POOLS_RBD' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_STORAGE_POOLS_SCSI' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_STORAGE_POOLS_SHEEPDOG' type='enum'/>
     <exports symbol='VIR_CONNECT_LIST_STORAGE_POOLS_TRANSIENT' type='enum'/>
     <exports symbol='VIR_CONNECT_NO_ALIASES' type='enum'/>
     <exports symbol='VIR_CONNECT_RO' type='enum'/>
     <exports symbol='VIR_CPU_COMPARE_ERROR' type='enum'/>
     <exports symbol='VIR_CPU_COMPARE_IDENTICAL' type='enum'/>
     <exports symbol='VIR_CPU_COMPARE_INCOMPATIBLE' type='enum'/>
     <exports symbol='VIR_CPU_COMPARE_LAST' type='enum'/>
     <exports symbol='VIR_CPU_COMPARE_SUPERSET' type='enum'/>
     <exports symbol='VIR_CRED_AUTHNAME' type='enum'/>
     <exports symbol='VIR_CRED_CNONCE' type='enum'/>
     <exports symbol='VIR_CRED_ECHOPROMPT' type='enum'/>
     <exports symbol='VIR_CRED_EXTERNAL' type='enum'/>
     <exports symbol='VIR_CRED_LANGUAGE' type='enum'/>
     <exports symbol='VIR_CRED_LAST' type='enum'/>
     <exports symbol='VIR_CRED_NOECHOPROMPT' type='enum'/>
     <exports symbol='VIR_CRED_PASSPHRASE' type='enum'/>
     <exports symbol='VIR_CRED_REALM' type='enum'/>
     <exports symbol='VIR_CRED_USERNAME' type='enum'/>
     <exports symbol='VIR_DOMAIN_AFFECT_CONFIG' type='enum'/>
     <exports symbol='VIR_DOMAIN_AFFECT_CURRENT' type='enum'/>
     <exports symbol='VIR_DOMAIN_AFFECT_LIVE' type='enum'/>
     <exports symbol='VIR_DOMAIN_BLKIO_PARAM_BOOLEAN' type='enum'/>
     <exports symbol='VIR_DOMAIN_BLKIO_PARAM_DOUBLE' type='enum'/>
     <exports symbol='VIR_DOMAIN_BLKIO_PARAM_INT' type='enum'/>
     <exports symbol='VIR_DOMAIN_BLKIO_PARAM_LLONG' type='enum'/>
     <exports symbol='VIR_DOMAIN_BLKIO_PARAM_UINT' type='enum'/>
     <exports symbol='VIR_DOMAIN_BLKIO_PARAM_ULLONG' type='enum'/>
     <exports symbol='VIR_DOMAIN_BLOCKED' type='enum'/>
     <exports symbol='VIR_DOMAIN_BLOCKED_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_BLOCKED_UNKNOWN' type='enum'/>
     <exports symbol='VIR_DOMAIN_BLOCK_COMMIT_DELETE' type='enum'/>
     <exports symbol='VIR_DOMAIN_BLOCK_COMMIT_SHALLOW' type='enum'/>
     <exports symbol='VIR_DOMAIN_BLOCK_JOB_ABORT_ASYNC' type='enum'/>
     <exports symbol='VIR_DOMAIN_BLOCK_JOB_ABORT_PIVOT' type='enum'/>
     <exports symbol='VIR_DOMAIN_BLOCK_JOB_CANCELED' type='enum'/>
     <exports symbol='VIR_DOMAIN_BLOCK_JOB_COMPLETED' type='enum'/>
     <exports symbol='VIR_DOMAIN_BLOCK_JOB_FAILED' type='enum'/>
     <exports symbol='VIR_DOMAIN_BLOCK_JOB_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_BLOCK_JOB_READY' type='enum'/>
     <exports symbol='VIR_DOMAIN_BLOCK_JOB_TYPE_COMMIT' type='enum'/>
     <exports symbol='VIR_DOMAIN_BLOCK_JOB_TYPE_COPY' type='enum'/>
     <exports symbol='VIR_DOMAIN_BLOCK_JOB_TYPE_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_BLOCK_JOB_TYPE_PULL' type='enum'/>
     <exports symbol='VIR_DOMAIN_BLOCK_JOB_TYPE_UNKNOWN' type='enum'/>
     <exports symbol='VIR_DOMAIN_BLOCK_REBASE_COPY' type='enum'/>
     <exports symbol='VIR_DOMAIN_BLOCK_REBASE_COPY_RAW' type='enum'/>
     <exports symbol='VIR_DOMAIN_BLOCK_REBASE_REUSE_EXT' type='enum'/>
     <exports symbol='VIR_DOMAIN_BLOCK_REBASE_SHALLOW' type='enum'/>
     <exports symbol='VIR_DOMAIN_BLOCK_RESIZE_BYTES' type='enum'/>
     <exports symbol='VIR_DOMAIN_CHANNEL_FORCE' type='enum'/>
     <exports symbol='VIR_DOMAIN_CONSOLE_FORCE' type='enum'/>
     <exports symbol='VIR_DOMAIN_CONSOLE_SAFE' type='enum'/>
     <exports symbol='VIR_DOMAIN_CONTROL_ERROR' type='enum'/>
     <exports symbol='VIR_DOMAIN_CONTROL_JOB' type='enum'/>
     <exports symbol='VIR_DOMAIN_CONTROL_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_CONTROL_OCCUPIED' type='enum'/>
     <exports symbol='VIR_DOMAIN_CONTROL_OK' type='enum'/>
     <exports symbol='VIR_DOMAIN_CORE_DUMP_FORMAT_KDUMP_LZO' type='enum'/>
     <exports symbol='VIR_DOMAIN_CORE_DUMP_FORMAT_KDUMP_SNAPPY' type='enum'/>
     <exports symbol='VIR_DOMAIN_CORE_DUMP_FORMAT_KDUMP_ZLIB' type='enum'/>
     <exports symbol='VIR_DOMAIN_CORE_DUMP_FORMAT_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_CORE_DUMP_FORMAT_RAW' type='enum'/>
     <exports symbol='VIR_DOMAIN_CRASHED' type='enum'/>
     <exports symbol='VIR_DOMAIN_CRASHED_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_CRASHED_PANICKED' type='enum'/>
     <exports symbol='VIR_DOMAIN_CRASHED_UNKNOWN' type='enum'/>
     <exports symbol='VIR_DOMAIN_DESTROY_DEFAULT' type='enum'/>
     <exports symbol='VIR_DOMAIN_DESTROY_GRACEFUL' type='enum'/>
     <exports symbol='VIR_DOMAIN_DEVICE_MODIFY_CONFIG' type='enum'/>
     <exports symbol='VIR_DOMAIN_DEVICE_MODIFY_CURRENT' type='enum'/>
     <exports symbol='VIR_DOMAIN_DEVICE_MODIFY_FORCE' type='enum'/>
     <exports symbol='VIR_DOMAIN_DEVICE_MODIFY_LIVE' type='enum'/>
     <exports symbol='VIR_DOMAIN_DISK_ERROR_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_DISK_ERROR_NONE' type='enum'/>
     <exports symbol='VIR_DOMAIN_DISK_ERROR_NO_SPACE' type='enum'/>
     <exports symbol='VIR_DOMAIN_DISK_ERROR_UNSPEC' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_CRASHED' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_CRASHED_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_CRASHED_PANICKED' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_DEFINED' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_DEFINED_ADDED' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_DEFINED_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_DEFINED_UPDATED' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_DISK_CHANGE_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_DISK_CHANGE_MISSING_ON_START' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_DISK_DROP_MISSING_ON_START' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_GRAPHICS_ADDRESS_IPV4' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_GRAPHICS_ADDRESS_IPV6' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_GRAPHICS_ADDRESS_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_GRAPHICS_ADDRESS_UNIX' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_GRAPHICS_CONNECT' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_GRAPHICS_DISCONNECT' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_GRAPHICS_INITIALIZE' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_GRAPHICS_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_ID_BALLOON_CHANGE' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_ID_BLOCK_JOB' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_ID_CONTROL_ERROR' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_ID_DEVICE_REMOVED' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_ID_DISK_CHANGE' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_ID_GRAPHICS' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_ID_IO_ERROR' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_ID_IO_ERROR_REASON' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_ID_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_ID_LIFECYCLE' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_ID_PMSUSPEND' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_ID_PMSUSPEND_DISK' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_ID_PMWAKEUP' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_ID_REBOOT' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_ID_RTC_CHANGE' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_ID_TRAY_CHANGE' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_ID_WATCHDOG' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_IO_ERROR_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_IO_ERROR_NONE' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_IO_ERROR_PAUSE' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_IO_ERROR_REPORT' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_PMSUSPENDED' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_PMSUSPENDED_DISK' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_PMSUSPENDED_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_PMSUSPENDED_MEMORY' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_RESUMED' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_RESUMED_FROM_SNAPSHOT' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_RESUMED_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_RESUMED_MIGRATED' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_RESUMED_UNPAUSED' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_SHUTDOWN' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_SHUTDOWN_FINISHED' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_SHUTDOWN_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_STARTED' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_STARTED_BOOTED' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_STARTED_FROM_SNAPSHOT' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_STARTED_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_STARTED_MIGRATED' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_STARTED_RESTORED' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_STARTED_WAKEUP' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_STOPPED' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_STOPPED_CRASHED' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_STOPPED_DESTROYED' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_STOPPED_FAILED' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_STOPPED_FROM_SNAPSHOT' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_STOPPED_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_STOPPED_MIGRATED' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_STOPPED_SAVED' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_STOPPED_SHUTDOWN' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_SUSPENDED' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_SUSPENDED_API_ERROR' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_SUSPENDED_FROM_SNAPSHOT' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_SUSPENDED_IOERROR' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_SUSPENDED_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_SUSPENDED_MIGRATED' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_SUSPENDED_PAUSED' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_SUSPENDED_RESTORED' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_SUSPENDED_WATCHDOG' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_TRAY_CHANGE_CLOSE' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_TRAY_CHANGE_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_TRAY_CHANGE_OPEN' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_UNDEFINED' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_UNDEFINED_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_UNDEFINED_REMOVED' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_WATCHDOG_DEBUG' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_WATCHDOG_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_WATCHDOG_NONE' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_WATCHDOG_PAUSE' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_WATCHDOG_POWEROFF' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_WATCHDOG_RESET' type='enum'/>
     <exports symbol='VIR_DOMAIN_EVENT_WATCHDOG_SHUTDOWN' type='enum'/>
     <exports symbol='VIR_DOMAIN_JOB_BOUNDED' type='enum'/>
     <exports symbol='VIR_DOMAIN_JOB_CANCELLED' type='enum'/>
     <exports symbol='VIR_DOMAIN_JOB_COMPLETED' type='enum'/>
     <exports symbol='VIR_DOMAIN_JOB_FAILED' type='enum'/>
     <exports symbol='VIR_DOMAIN_JOB_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_JOB_NONE' type='enum'/>
     <exports symbol='VIR_DOMAIN_JOB_UNBOUNDED' type='enum'/>
     <exports symbol='VIR_DOMAIN_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_MEMORY_PARAM_BOOLEAN' type='enum'/>
     <exports symbol='VIR_DOMAIN_MEMORY_PARAM_DOUBLE' type='enum'/>
     <exports symbol='VIR_DOMAIN_MEMORY_PARAM_INT' type='enum'/>
     <exports symbol='VIR_DOMAIN_MEMORY_PARAM_LLONG' type='enum'/>
     <exports symbol='VIR_DOMAIN_MEMORY_PARAM_UINT' type='enum'/>
     <exports symbol='VIR_DOMAIN_MEMORY_PARAM_ULLONG' type='enum'/>
     <exports symbol='VIR_DOMAIN_MEMORY_STAT_ACTUAL_BALLOON' type='enum'/>
     <exports symbol='VIR_DOMAIN_MEMORY_STAT_AVAILABLE' type='enum'/>
     <exports symbol='VIR_DOMAIN_MEMORY_STAT_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_MEMORY_STAT_MAJOR_FAULT' type='enum'/>
     <exports symbol='VIR_DOMAIN_MEMORY_STAT_MINOR_FAULT' type='enum'/>
     <exports symbol='VIR_DOMAIN_MEMORY_STAT_NR' type='enum'/>
     <exports symbol='VIR_DOMAIN_MEMORY_STAT_RSS' type='enum'/>
     <exports symbol='VIR_DOMAIN_MEMORY_STAT_SWAP_IN' type='enum'/>
     <exports symbol='VIR_DOMAIN_MEMORY_STAT_SWAP_OUT' type='enum'/>
     <exports symbol='VIR_DOMAIN_MEMORY_STAT_UNUSED' type='enum'/>
     <exports symbol='VIR_DOMAIN_MEM_CONFIG' type='enum'/>
     <exports symbol='VIR_DOMAIN_MEM_CURRENT' type='enum'/>
     <exports symbol='VIR_DOMAIN_MEM_LIVE' type='enum'/>
     <exports symbol='VIR_DOMAIN_MEM_MAXIMUM' type='enum'/>
     <exports symbol='VIR_DOMAIN_METADATA_DESCRIPTION' type='enum'/>
     <exports symbol='VIR_DOMAIN_METADATA_ELEMENT' type='enum'/>
     <exports symbol='VIR_DOMAIN_METADATA_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_METADATA_TITLE' type='enum'/>
     <exports symbol='VIR_DOMAIN_NONE' type='enum'/>
     <exports symbol='VIR_DOMAIN_NOSTATE' type='enum'/>
     <exports symbol='VIR_DOMAIN_NOSTATE_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_NOSTATE_UNKNOWN' type='enum'/>
     <exports symbol='VIR_DOMAIN_NUMATUNE_MEM_INTERLEAVE' type='enum'/>
     <exports symbol='VIR_DOMAIN_NUMATUNE_MEM_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_NUMATUNE_MEM_PREFERRED' type='enum'/>
     <exports symbol='VIR_DOMAIN_NUMATUNE_MEM_STRICT' type='enum'/>
     <exports symbol='VIR_DOMAIN_OPEN_GRAPHICS_SKIPAUTH' type='enum'/>
     <exports symbol='VIR_DOMAIN_PAUSED' type='enum'/>
     <exports symbol='VIR_DOMAIN_PAUSED_CRASHED' type='enum'/>
     <exports symbol='VIR_DOMAIN_PAUSED_DUMP' type='enum'/>
     <exports symbol='VIR_DOMAIN_PAUSED_FROM_SNAPSHOT' type='enum'/>
     <exports symbol='VIR_DOMAIN_PAUSED_IOERROR' type='enum'/>
     <exports symbol='VIR_DOMAIN_PAUSED_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_PAUSED_MIGRATION' type='enum'/>
     <exports symbol='VIR_DOMAIN_PAUSED_SAVE' type='enum'/>
     <exports symbol='VIR_DOMAIN_PAUSED_SHUTTING_DOWN' type='enum'/>
     <exports symbol='VIR_DOMAIN_PAUSED_SNAPSHOT' type='enum'/>
     <exports symbol='VIR_DOMAIN_PAUSED_UNKNOWN' type='enum'/>
     <exports symbol='VIR_DOMAIN_PAUSED_USER' type='enum'/>
     <exports symbol='VIR_DOMAIN_PAUSED_WATCHDOG' type='enum'/>
     <exports symbol='VIR_DOMAIN_PMSUSPENDED' type='enum'/>
     <exports symbol='VIR_DOMAIN_PMSUSPENDED_DISK_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_PMSUSPENDED_DISK_UNKNOWN' type='enum'/>
     <exports symbol='VIR_DOMAIN_PMSUSPENDED_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_PMSUSPENDED_UNKNOWN' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_ABRT' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_ALRM' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_BUS' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_CHLD' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_CONT' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_FPE' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_HUP' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_ILL' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_INT' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_KILL' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_NOP' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_PIPE' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_POLL' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_PROF' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_PWR' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_QUIT' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_RT0' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_RT1' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_RT10' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_RT11' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_RT12' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_RT13' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_RT14' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_RT15' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_RT16' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_RT17' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_RT18' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_RT19' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_RT2' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_RT20' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_RT21' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_RT22' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_RT23' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_RT24' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_RT25' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_RT26' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_RT27' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_RT28' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_RT29' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_RT3' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_RT30' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_RT31' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_RT32' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_RT4' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_RT5' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_RT6' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_RT7' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_RT8' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_RT9' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_SEGV' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_STKFLT' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_STOP' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_SYS' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_TERM' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_TRAP' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_TSTP' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_TTIN' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_TTOU' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_URG' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_USR1' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_USR2' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_VTALRM' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_WINCH' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_XCPU' type='enum'/>
     <exports symbol='VIR_DOMAIN_PROCESS_SIGNAL_XFSZ' type='enum'/>
     <exports symbol='VIR_DOMAIN_REBOOT_ACPI_POWER_BTN' type='enum'/>
     <exports symbol='VIR_DOMAIN_REBOOT_DEFAULT' type='enum'/>
     <exports symbol='VIR_DOMAIN_REBOOT_GUEST_AGENT' type='enum'/>
     <exports symbol='VIR_DOMAIN_REBOOT_INITCTL' type='enum'/>
     <exports symbol='VIR_DOMAIN_REBOOT_SIGNAL' type='enum'/>
     <exports symbol='VIR_DOMAIN_RUNNING' type='enum'/>
     <exports symbol='VIR_DOMAIN_RUNNING_BOOTED' type='enum'/>
     <exports symbol='VIR_DOMAIN_RUNNING_CRASHED' type='enum'/>
     <exports symbol='VIR_DOMAIN_RUNNING_FROM_SNAPSHOT' type='enum'/>
     <exports symbol='VIR_DOMAIN_RUNNING_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_RUNNING_MIGRATED' type='enum'/>
     <exports symbol='VIR_DOMAIN_RUNNING_MIGRATION_CANCELED' type='enum'/>
     <exports symbol='VIR_DOMAIN_RUNNING_RESTORED' type='enum'/>
     <exports symbol='VIR_DOMAIN_RUNNING_SAVE_CANCELED' type='enum'/>
     <exports symbol='VIR_DOMAIN_RUNNING_UNKNOWN' type='enum'/>
     <exports symbol='VIR_DOMAIN_RUNNING_UNPAUSED' type='enum'/>
     <exports symbol='VIR_DOMAIN_RUNNING_WAKEUP' type='enum'/>
     <exports symbol='VIR_DOMAIN_SAVE_BYPASS_CACHE' type='enum'/>
     <exports symbol='VIR_DOMAIN_SAVE_PAUSED' type='enum'/>
     <exports symbol='VIR_DOMAIN_SAVE_RUNNING' type='enum'/>
     <exports symbol='VIR_DOMAIN_SCHED_FIELD_BOOLEAN' type='enum'/>
     <exports symbol='VIR_DOMAIN_SCHED_FIELD_DOUBLE' type='enum'/>
     <exports symbol='VIR_DOMAIN_SCHED_FIELD_INT' type='enum'/>
     <exports symbol='VIR_DOMAIN_SCHED_FIELD_LLONG' type='enum'/>
     <exports symbol='VIR_DOMAIN_SCHED_FIELD_UINT' type='enum'/>
     <exports symbol='VIR_DOMAIN_SCHED_FIELD_ULLONG' type='enum'/>
     <exports symbol='VIR_DOMAIN_SHUTDOWN' type='enum'/>
     <exports symbol='VIR_DOMAIN_SHUTDOWN_ACPI_POWER_BTN' type='enum'/>
     <exports symbol='VIR_DOMAIN_SHUTDOWN_DEFAULT' type='enum'/>
     <exports symbol='VIR_DOMAIN_SHUTDOWN_GUEST_AGENT' type='enum'/>
     <exports symbol='VIR_DOMAIN_SHUTDOWN_INITCTL' type='enum'/>
     <exports symbol='VIR_DOMAIN_SHUTDOWN_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_SHUTDOWN_SIGNAL' type='enum'/>
     <exports symbol='VIR_DOMAIN_SHUTDOWN_UNKNOWN' type='enum'/>
     <exports symbol='VIR_DOMAIN_SHUTDOWN_USER' type='enum'/>
     <exports symbol='VIR_DOMAIN_SHUTOFF' type='enum'/>
     <exports symbol='VIR_DOMAIN_SHUTOFF_CRASHED' type='enum'/>
     <exports symbol='VIR_DOMAIN_SHUTOFF_DESTROYED' type='enum'/>
     <exports symbol='VIR_DOMAIN_SHUTOFF_FAILED' type='enum'/>
     <exports symbol='VIR_DOMAIN_SHUTOFF_FROM_SNAPSHOT' type='enum'/>
     <exports symbol='VIR_DOMAIN_SHUTOFF_LAST' type='enum'/>
     <exports symbol='VIR_DOMAIN_SHUTOFF_MIGRATED' type='enum'/>
     <exports symbol='VIR_DOMAIN_SHUTOFF_SAVED' type='enum'/>
     <exports symbol='VIR_DOMAIN_SHUTOFF_SHUTDOWN' type='enum'/>
     <exports symbol='VIR_DOMAIN_SHUTOFF_UNKNOWN' type='enum'/>
     <exports symbol='VIR_DOMAIN_SNAPSHOT_CREATE_ATOMIC' type='enum'/>
     <exports symbol='VIR_DOMAIN_SNAPSHOT_CREATE_CURRENT' type='enum'/>
     <exports symbol='VIR_DOMAIN_SNAPSHOT_CREATE_DISK_ONLY' type='enum'/>
     <exports symbol='VIR_DOMAIN_SNAPSHOT_CREATE_HALT' type='enum'/>
     <exports symbol='VIR_DOMAIN_SNAPSHOT_CREATE_LIVE' type='enum'/>
     <exports symbol='VIR_DOMAIN_SNAPSHOT_CREATE_NO_METADATA' type='enum'/>
     <exports symbol='VIR_DOMAIN_SNAPSHOT_CREATE_QUIESCE' type='enum'/>
     <exports symbol='VIR_DOMAIN_SNAPSHOT_CREATE_REDEFINE' type='enum'/>
     <exports symbol='VIR_DOMAIN_SNAPSHOT_CREATE_REUSE_EXT' type='enum'/>
     <exports symbol='VIR_DOMAIN_SNAPSHOT_DELETE_CHILDREN' type='enum'/>
     <exports symbol='VIR_DOMAIN_SNAPSHOT_DELETE_CHILDREN_ONLY' type='enum'/>
     <exports symbol='VIR_DOMAIN_SNAPSHOT_DELETE_METADATA_ONLY' type='enum'/>
     <exports symbol='VIR_DOMAIN_SNAPSHOT_LIST_ACTIVE' type='enum'/>
     <exports symbol='VIR_DOMAIN_SNAPSHOT_LIST_DESCENDANTS' type='enum'/>
     <exports symbol='VIR_DOMAIN_SNAPSHOT_LIST_DISK_ONLY' type='enum'/>
     <exports symbol='VIR_DOMAIN_SNAPSHOT_LIST_EXTERNAL' type='enum'/>
     <exports symbol='VIR_DOMAIN_SNAPSHOT_LIST_INACTIVE' type='enum'/>
     <exports symbol='VIR_DOMAIN_SNAPSHOT_LIST_INTERNAL' type='enum'/>
     <exports symbol='VIR_DOMAIN_SNAPSHOT_LIST_LEAVES' type='enum'/>
     <exports symbol='VIR_DOMAIN_SNAPSHOT_LIST_METADATA' type='enum'/>
     <exports symbol='VIR_DOMAIN_SNAPSHOT_LIST_NO_LEAVES' type='enum'/>
     <exports symbol='VIR_DOMAIN_SNAPSHOT_LIST_NO_METADATA' type='enum'/>
     <exports symbol='VIR_DOMAIN_SNAPSHOT_LIST_ROOTS' type='enum'/>
     <exports symbol='VIR_DOMAIN_SNAPSHOT_REVERT_FORCE' type='enum'/>
     <exports symbol='VIR_DOMAIN_SNAPSHOT_REVERT_PAUSED' type='enum'/>
     <exports symbol='VIR_DOMAIN_SNAPSHOT_REVERT_RUNNING' type='enum'/>
     <exports symbol='VIR_DOMAIN_START_AUTODESTROY' type='enum'/>
     <exports symbol='VIR_DOMAIN_START_BYPASS_CACHE' type='enum'/>
     <exports symbol='VIR_DOMAIN_START_FORCE_BOOT' type='enum'/>
     <exports symbol='VIR_DOMAIN_START_PAUSED' type='enum'/>
     <exports symbol='VIR_DOMAIN_UNDEFINE_MANAGED_SAVE' type='enum'/>
     <exports symbol='VIR_DOMAIN_UNDEFINE_SNAPSHOTS_METADATA' type='enum'/>
     <exports symbol='VIR_DOMAIN_VCPU_CONFIG' type='enum'/>
     <exports symbol='VIR_DOMAIN_VCPU_CURRENT' type='enum'/>
     <exports symbol='VIR_DOMAIN_VCPU_GUEST' type='enum'/>
     <exports symbol='VIR_DOMAIN_VCPU_LIVE' type='enum'/>
     <exports symbol='VIR_DOMAIN_VCPU_MAXIMUM' type='enum'/>
     <exports symbol='VIR_DOMAIN_XML_INACTIVE' type='enum'/>
     <exports symbol='VIR_DOMAIN_XML_MIGRATABLE' type='enum'/>
     <exports symbol='VIR_DOMAIN_XML_SECURE' type='enum'/>
     <exports symbol='VIR_DOMAIN_XML_UPDATE_CPU' type='enum'/>
     <exports symbol='VIR_DUMP_BYPASS_CACHE' type='enum'/>
     <exports symbol='VIR_DUMP_CRASH' type='enum'/>
     <exports symbol='VIR_DUMP_LIVE' type='enum'/>
     <exports symbol='VIR_DUMP_MEMORY_ONLY' type='enum'/>
     <exports symbol='VIR_DUMP_RESET' type='enum'/>
     <exports symbol='VIR_EVENT_HANDLE_ERROR' type='enum'/>
     <exports symbol='VIR_EVENT_HANDLE_HANGUP' type='enum'/>
     <exports symbol='VIR_EVENT_HANDLE_READABLE' type='enum'/>
     <exports symbol='VIR_EVENT_HANDLE_WRITABLE' type='enum'/>
     <exports symbol='VIR_INTERFACE_XML_INACTIVE' type='enum'/>
     <exports symbol='VIR_KEYCODE_SET_ATSET1' type='enum'/>
     <exports symbol='VIR_KEYCODE_SET_ATSET2' type='enum'/>
     <exports symbol='VIR_KEYCODE_SET_ATSET3' type='enum'/>
     <exports symbol='VIR_KEYCODE_SET_LAST' type='enum'/>
     <exports symbol='VIR_KEYCODE_SET_LINUX' type='enum'/>
     <exports symbol='VIR_KEYCODE_SET_OSX' type='enum'/>
     <exports symbol='VIR_KEYCODE_SET_RFB' type='enum'/>
     <exports symbol='VIR_KEYCODE_SET_USB' type='enum'/>
     <exports symbol='VIR_KEYCODE_SET_WIN32' type='enum'/>
     <exports symbol='VIR_KEYCODE_SET_XT' type='enum'/>
     <exports symbol='VIR_KEYCODE_SET_XT_KBD' type='enum'/>
     <exports symbol='VIR_MEMORY_PHYSICAL' type='enum'/>
     <exports symbol='VIR_MEMORY_VIRTUAL' type='enum'/>
     <exports symbol='VIR_MIGRATE_ABORT_ON_ERROR' type='enum'/>
     <exports symbol='VIR_MIGRATE_AUTO_CONVERGE' type='enum'/>
     <exports symbol='VIR_MIGRATE_CHANGE_PROTECTION' type='enum'/>
     <exports symbol='VIR_MIGRATE_COMPRESSED' type='enum'/>
     <exports symbol='VIR_MIGRATE_LIVE' type='enum'/>
     <exports symbol='VIR_MIGRATE_NON_SHARED_DISK' type='enum'/>
     <exports symbol='VIR_MIGRATE_NON_SHARED_INC' type='enum'/>
     <exports symbol='VIR_MIGRATE_OFFLINE' type='enum'/>
     <exports symbol='VIR_MIGRATE_PAUSED' type='enum'/>
     <exports symbol='VIR_MIGRATE_PEER2PEER' type='enum'/>
     <exports symbol='VIR_MIGRATE_PERSIST_DEST' type='enum'/>
     <exports symbol='VIR_MIGRATE_TUNNELLED' type='enum'/>
     <exports symbol='VIR_MIGRATE_UNDEFINE_SOURCE' type='enum'/>
     <exports symbol='VIR_MIGRATE_UNSAFE' type='enum'/>
     <exports symbol='VIR_NETWORK_EVENT_DEFINED' type='enum'/>
     <exports symbol='VIR_NETWORK_EVENT_ID_LAST' type='enum'/>
     <exports symbol='VIR_NETWORK_EVENT_ID_LIFECYCLE' type='enum'/>
     <exports symbol='VIR_NETWORK_EVENT_LAST' type='enum'/>
     <exports symbol='VIR_NETWORK_EVENT_STARTED' type='enum'/>
     <exports symbol='VIR_NETWORK_EVENT_STOPPED' type='enum'/>
     <exports symbol='VIR_NETWORK_EVENT_UNDEFINED' type='enum'/>
     <exports symbol='VIR_NETWORK_SECTION_BRIDGE' type='enum'/>
     <exports symbol='VIR_NETWORK_SECTION_DNS_HOST' type='enum'/>
     <exports symbol='VIR_NETWORK_SECTION_DNS_SRV' type='enum'/>
     <exports symbol='VIR_NETWORK_SECTION_DNS_TXT' type='enum'/>
     <exports symbol='VIR_NETWORK_SECTION_DOMAIN' type='enum'/>
     <exports symbol='VIR_NETWORK_SECTION_FORWARD' type='enum'/>
     <exports symbol='VIR_NETWORK_SECTION_FORWARD_INTERFACE' type='enum'/>
     <exports symbol='VIR_NETWORK_SECTION_FORWARD_PF' type='enum'/>
     <exports symbol='VIR_NETWORK_SECTION_IP' type='enum'/>
     <exports symbol='VIR_NETWORK_SECTION_IP_DHCP_HOST' type='enum'/>
     <exports symbol='VIR_NETWORK_SECTION_IP_DHCP_RANGE' type='enum'/>
     <exports symbol='VIR_NETWORK_SECTION_LAST' type='enum'/>
     <exports symbol='VIR_NETWORK_SECTION_NONE' type='enum'/>
     <exports symbol='VIR_NETWORK_SECTION_PORTGROUP' type='enum'/>
     <exports symbol='VIR_NETWORK_UPDATE_AFFECT_CONFIG' type='enum'/>
     <exports symbol='VIR_NETWORK_UPDATE_AFFECT_CURRENT' type='enum'/>
     <exports symbol='VIR_NETWORK_UPDATE_AFFECT_LIVE' type='enum'/>
     <exports symbol='VIR_NETWORK_UPDATE_COMMAND_ADD_FIRST' type='enum'/>
     <exports symbol='VIR_NETWORK_UPDATE_COMMAND_ADD_LAST' type='enum'/>
     <exports symbol='VIR_NETWORK_UPDATE_COMMAND_DELETE' type='enum'/>
     <exports symbol='VIR_NETWORK_UPDATE_COMMAND_LAST' type='enum'/>
     <exports symbol='VIR_NETWORK_UPDATE_COMMAND_MODIFY' type='enum'/>
     <exports symbol='VIR_NETWORK_UPDATE_COMMAND_NONE' type='enum'/>
     <exports symbol='VIR_NETWORK_XML_INACTIVE' type='enum'/>
     <exports symbol='VIR_NODE_CPU_STATS_ALL_CPUS' type='enum'/>
     <exports symbol='VIR_NODE_MEMORY_STATS_ALL_CELLS' type='enum'/>
     <exports symbol='VIR_NODE_SUSPEND_TARGET_DISK' type='enum'/>
     <exports symbol='VIR_NODE_SUSPEND_TARGET_HYBRID' type='enum'/>
     <exports symbol='VIR_NODE_SUSPEND_TARGET_LAST' type='enum'/>
     <exports symbol='VIR_NODE_SUSPEND_TARGET_MEM' type='enum'/>
     <exports symbol='VIR_SECRET_USAGE_TYPE_CEPH' type='enum'/>
     <exports symbol='VIR_SECRET_USAGE_TYPE_ISCSI' type='enum'/>
     <exports symbol='VIR_SECRET_USAGE_TYPE_LAST' type='enum'/>
     <exports symbol='VIR_SECRET_USAGE_TYPE_NONE' type='enum'/>
     <exports symbol='VIR_SECRET_USAGE_TYPE_VOLUME' type='enum'/>
     <exports symbol='VIR_STORAGE_POOL_BUILDING' type='enum'/>
     <exports symbol='VIR_STORAGE_POOL_BUILD_NEW' type='enum'/>
     <exports symbol='VIR_STORAGE_POOL_BUILD_NO_OVERWRITE' type='enum'/>
     <exports symbol='VIR_STORAGE_POOL_BUILD_OVERWRITE' type='enum'/>
     <exports symbol='VIR_STORAGE_POOL_BUILD_REPAIR' type='enum'/>
     <exports symbol='VIR_STORAGE_POOL_BUILD_RESIZE' type='enum'/>
     <exports symbol='VIR_STORAGE_POOL_DEGRADED' type='enum'/>
     <exports symbol='VIR_STORAGE_POOL_DELETE_NORMAL' type='enum'/>
     <exports symbol='VIR_STORAGE_POOL_DELETE_ZEROED' type='enum'/>
     <exports symbol='VIR_STORAGE_POOL_INACCESSIBLE' type='enum'/>
     <exports symbol='VIR_STORAGE_POOL_INACTIVE' type='enum'/>
     <exports symbol='VIR_STORAGE_POOL_RUNNING' type='enum'/>
     <exports symbol='VIR_STORAGE_POOL_STATE_LAST' type='enum'/>
     <exports symbol='VIR_STORAGE_VOL_BLOCK' type='enum'/>
     <exports symbol='VIR_STORAGE_VOL_CREATE_PREALLOC_METADATA' type='enum'/>
     <exports symbol='VIR_STORAGE_VOL_DELETE_NORMAL' type='enum'/>
     <exports symbol='VIR_STORAGE_VOL_DELETE_ZEROED' type='enum'/>
     <exports symbol='VIR_STORAGE_VOL_DIR' type='enum'/>
     <exports symbol='VIR_STORAGE_VOL_FILE' type='enum'/>
     <exports symbol='VIR_STORAGE_VOL_LAST' type='enum'/>
     <exports symbol='VIR_STORAGE_VOL_NETDIR' type='enum'/>
     <exports symbol='VIR_STORAGE_VOL_NETWORK' type='enum'/>
     <exports symbol='VIR_STORAGE_VOL_RESIZE_ALLOCATE' type='enum'/>
     <exports symbol='VIR_STORAGE_VOL_RESIZE_DELTA' type='enum'/>
     <exports symbol='VIR_STORAGE_VOL_RESIZE_SHRINK' type='enum'/>
     <exports symbol='VIR_STORAGE_VOL_WIPE_ALG_BSI' type='enum'/>
     <exports symbol='VIR_STORAGE_VOL_WIPE_ALG_DOD' type='enum'/>
     <exports symbol='VIR_STORAGE_VOL_WIPE_ALG_GUTMANN' type='enum'/>
     <exports symbol='VIR_STORAGE_VOL_WIPE_ALG_LAST' type='enum'/>
     <exports symbol='VIR_STORAGE_VOL_WIPE_ALG_NNSA' type='enum'/>
     <exports symbol='VIR_STORAGE_VOL_WIPE_ALG_PFITZNER33' type='enum'/>
     <exports symbol='VIR_STORAGE_VOL_WIPE_ALG_PFITZNER7' type='enum'/>
     <exports symbol='VIR_STORAGE_VOL_WIPE_ALG_RANDOM' type='enum'/>
     <exports symbol='VIR_STORAGE_VOL_WIPE_ALG_SCHNEIER' type='enum'/>
     <exports symbol='VIR_STORAGE_VOL_WIPE_ALG_ZERO' type='enum'/>
     <exports symbol='VIR_STORAGE_XML_INACTIVE' type='enum'/>
     <exports symbol='VIR_STREAM_EVENT_ERROR' type='enum'/>
     <exports symbol='VIR_STREAM_EVENT_HANGUP' type='enum'/>
     <exports symbol='VIR_STREAM_EVENT_READABLE' type='enum'/>
     <exports symbol='VIR_STREAM_EVENT_WRITABLE' type='enum'/>
     <exports symbol='VIR_STREAM_NONBLOCK' type='enum'/>
     <exports symbol='VIR_TYPED_PARAM_BOOLEAN' type='enum'/>
     <exports symbol='VIR_TYPED_PARAM_DOUBLE' type='enum'/>
     <exports symbol='VIR_TYPED_PARAM_INT' type='enum'/>
     <exports symbol='VIR_TYPED_PARAM_LAST' type='enum'/>
     <exports symbol='VIR_TYPED_PARAM_LLONG' type='enum'/>
     <exports symbol='VIR_TYPED_PARAM_STRING' type='enum'/>
     <exports symbol='VIR_TYPED_PARAM_STRING_OKAY' type='enum'/>
     <exports symbol='VIR_TYPED_PARAM_UINT' type='enum'/>
     <exports symbol='VIR_TYPED_PARAM_ULLONG' type='enum'/>
     <exports symbol='VIR_VCPU_BLOCKED' type='enum'/>
     <exports symbol='VIR_VCPU_LAST' type='enum'/>
     <exports symbol='VIR_VCPU_OFFLINE' type='enum'/>
     <exports symbol='VIR_VCPU_RUNNING' type='enum'/>
     <exports symbol='virBlkioParameter' type='typedef'/>
     <exports symbol='virBlkioParameterPtr' type='typedef'/>
     <exports symbol='virBlkioParameterType' type='typedef'/>
     <exports symbol='virCPUCompareResult' type='typedef'/>
     <exports symbol='virConnect' type='typedef'/>
     <exports symbol='virConnectAuth' type='typedef'/>
     <exports symbol='virConnectAuthPtr' type='typedef'/>
     <exports symbol='virConnectBaselineCPUFlags' type='typedef'/>
     <exports symbol='virConnectCloseReason' type='typedef'/>
     <exports symbol='virConnectCredential' type='typedef'/>
     <exports symbol='virConnectCredentialPtr' type='typedef'/>
     <exports symbol='virConnectCredentialType' type='typedef'/>
     <exports symbol='virConnectDomainEventBlockJobStatus' type='typedef'/>
     <exports symbol='virConnectDomainEventDiskChangeReason' type='typedef'/>
     <exports symbol='virConnectFlags' type='typedef'/>
     <exports symbol='virConnectListAllDomainsFlags' type='typedef'/>
     <exports symbol='virConnectListAllInterfacesFlags' type='typedef'/>
     <exports symbol='virConnectListAllNetworksFlags' type='typedef'/>
     <exports symbol='virConnectListAllNodeDeviceFlags' type='typedef'/>
     <exports symbol='virConnectListAllSecretsFlags' type='typedef'/>
     <exports symbol='virConnectListAllStoragePoolsFlags' type='typedef'/>
     <exports symbol='virConnectPtr' type='typedef'/>
     <exports symbol='virDomain' type='typedef'/>
     <exports symbol='virDomainBlockCommitFlags' type='typedef'/>
     <exports symbol='virDomainBlockInfo' type='typedef'/>
     <exports symbol='virDomainBlockInfoPtr' type='typedef'/>
     <exports symbol='virDomainBlockJobAbortFlags' type='typedef'/>
     <exports symbol='virDomainBlockJobCursor' type='typedef'/>
     <exports symbol='virDomainBlockJobInfo' type='typedef'/>
     <exports symbol='virDomainBlockJobInfoPtr' type='typedef'/>
     <exports symbol='virDomainBlockJobType' type='typedef'/>
     <exports symbol='virDomainBlockRebaseFlags' type='typedef'/>
     <exports symbol='virDomainBlockResizeFlags' type='typedef'/>
     <exports symbol='virDomainBlockStatsPtr' type='typedef'/>
     <exports symbol='virDomainBlockStatsStruct' type='typedef'/>
     <exports symbol='virDomainBlockedReason' type='typedef'/>
     <exports symbol='virDomainChannelFlags' type='typedef'/>
     <exports symbol='virDomainConsoleFlags' type='typedef'/>
     <exports symbol='virDomainControlInfo' type='typedef'/>
     <exports symbol='virDomainControlInfoPtr' type='typedef'/>
     <exports symbol='virDomainControlState' type='typedef'/>
     <exports symbol='virDomainCoreDumpFlags' type='typedef'/>
     <exports symbol='virDomainCoreDumpFormat' type='typedef'/>
     <exports symbol='virDomainCrashedReason' type='typedef'/>
     <exports symbol='virDomainCreateFlags' type='typedef'/>
     <exports symbol='virDomainDestroyFlagsValues' type='typedef'/>
     <exports symbol='virDomainDeviceModifyFlags' type='typedef'/>
     <exports symbol='virDomainDiskError' type='typedef'/>
     <exports symbol='virDomainDiskErrorCode' type='typedef'/>
     <exports symbol='virDomainDiskErrorPtr' type='typedef'/>
     <exports symbol='virDomainEventCrashedDetailType' type='typedef'/>
     <exports symbol='virDomainEventDefinedDetailType' type='typedef'/>
     <exports symbol='virDomainEventGraphicsAddress' type='typedef'/>
     <exports symbol='virDomainEventGraphicsAddressPtr' type='typedef'/>
     <exports symbol='virDomainEventGraphicsAddressType' type='typedef'/>
     <exports symbol='virDomainEventGraphicsPhase' type='typedef'/>
     <exports symbol='virDomainEventGraphicsSubject' type='typedef'/>
     <exports symbol='virDomainEventGraphicsSubjectIdentity' type='typedef'/>
     <exports symbol='virDomainEventGraphicsSubjectIdentityPtr' type='typedef'/>
     <exports symbol='virDomainEventGraphicsSubjectPtr' type='typedef'/>
     <exports symbol='virDomainEventID' type='typedef'/>
     <exports symbol='virDomainEventIOErrorAction' type='typedef'/>
     <exports symbol='virDomainEventPMSuspendedDetailType' type='typedef'/>
     <exports symbol='virDomainEventResumedDetailType' type='typedef'/>
     <exports symbol='virDomainEventShutdownDetailType' type='typedef'/>
     <exports symbol='virDomainEventStartedDetailType' type='typedef'/>
     <exports symbol='virDomainEventStoppedDetailType' type='typedef'/>
     <exports symbol='virDomainEventSuspendedDetailType' type='typedef'/>
     <exports symbol='virDomainEventTrayChangeReason' type='typedef'/>
     <exports symbol='virDomainEventType' type='typedef'/>
     <exports symbol='virDomainEventUndefinedDetailType' type='typedef'/>
     <exports symbol='virDomainEventWatchdogAction' type='typedef'/>
     <exports symbol='virDomainInfo' type='typedef'/>
     <exports symbol='virDomainInfoPtr' type='typedef'/>
     <exports symbol='virDomainInterfaceStatsPtr' type='typedef'/>
     <exports symbol='virDomainInterfaceStatsStruct' type='typedef'/>
     <exports symbol='virDomainJobInfo' type='typedef'/>
     <exports symbol='virDomainJobInfoPtr' type='typedef'/>
     <exports symbol='virDomainJobType' type='typedef'/>
     <exports symbol='virDomainMemoryFlags' type='typedef'/>
     <exports symbol='virDomainMemoryModFlags' type='typedef'/>
     <exports symbol='virDomainMemoryStatPtr' type='typedef'/>
     <exports symbol='virDomainMemoryStatStruct' type='typedef'/>
     <exports symbol='virDomainMemoryStatTags' type='typedef'/>
     <exports symbol='virDomainMetadataType' type='typedef'/>
     <exports symbol='virDomainMigrateFlags' type='typedef'/>
     <exports symbol='virDomainModificationImpact' type='typedef'/>
     <exports symbol='virDomainNostateReason' type='typedef'/>
     <exports symbol='virDomainNumatuneMemMode' type='typedef'/>
     <exports symbol='virDomainOpenGraphicsFlags' type='typedef'/>
     <exports symbol='virDomainPMSuspendedDiskReason' type='typedef'/>
     <exports symbol='virDomainPMSuspendedReason' type='typedef'/>
     <exports symbol='virDomainPausedReason' type='typedef'/>
     <exports symbol='virDomainProcessSignal' type='typedef'/>
     <exports symbol='virDomainPtr' type='typedef'/>
     <exports symbol='virDomainRebootFlagValues' type='typedef'/>
     <exports symbol='virDomainRunningReason' type='typedef'/>
     <exports symbol='virDomainSaveRestoreFlags' type='typedef'/>
     <exports symbol='virDomainShutdownFlagValues' type='typedef'/>
     <exports symbol='virDomainShutdownReason' type='typedef'/>
     <exports symbol='virDomainShutoffReason' type='typedef'/>
     <exports symbol='virDomainSnapshot' type='typedef'/>
     <exports symbol='virDomainSnapshotCreateFlags' type='typedef'/>
     <exports symbol='virDomainSnapshotDeleteFlags' type='typedef'/>
     <exports symbol='virDomainSnapshotListFlags' type='typedef'/>
     <exports symbol='virDomainSnapshotPtr' type='typedef'/>
     <exports symbol='virDomainSnapshotRevertFlags' type='typedef'/>
     <exports symbol='virDomainState' type='typedef'/>
     <exports symbol='virDomainUndefineFlagsValues' type='typedef'/>
     <exports symbol='virDomainVcpuFlags' type='typedef'/>
     <exports symbol='virDomainXMLFlags' type='typedef'/>
     <exports symbol='virEventHandleType' type='typedef'/>
     <exports symbol='virInterface' type='typedef'/>
     <exports symbol='virInterfacePtr' type='typedef'/>
     <exports symbol='virInterfaceXMLFlags' type='typedef'/>
     <exports symbol='virKeycodeSet' type='typedef'/>
     <exports symbol='virMemoryParameter' type='typedef'/>
     <exports symbol='virMemoryParameterPtr' type='typedef'/>
     <exports symbol='virMemoryParameterType' type='typedef'/>
     <exports symbol='virNWFilter' type='typedef'/>
     <exports symbol='virNWFilterPtr' type='typedef'/>
     <exports symbol='virNetwork' type='typedef'/>
     <exports symbol='virNetworkEventID' type='typedef'/>
     <exports symbol='virNetworkEventLifecycleType' type='typedef'/>
     <exports symbol='virNetworkPtr' type='typedef'/>
     <exports symbol='virNetworkUpdateCommand' type='typedef'/>
     <exports symbol='virNetworkUpdateFlags' type='typedef'/>
     <exports symbol='virNetworkUpdateSection' type='typedef'/>
     <exports symbol='virNetworkXMLFlags' type='typedef'/>
     <exports symbol='virNodeCPUStats' type='typedef'/>
     <exports symbol='virNodeCPUStatsPtr' type='typedef'/>
     <exports symbol='virNodeDevice' type='typedef'/>
     <exports symbol='virNodeDevicePtr' type='typedef'/>
     <exports symbol='virNodeGetCPUStatsAllCPUs' type='typedef'/>
     <exports symbol='virNodeGetMemoryStatsAllCells' type='typedef'/>
     <exports symbol='virNodeInfo' type='typedef'/>
     <exports symbol='virNodeInfoPtr' type='typedef'/>
     <exports symbol='virNodeMemoryStats' type='typedef'/>
     <exports symbol='virNodeMemoryStatsPtr' type='typedef'/>
     <exports symbol='virNodeSuspendTarget' type='typedef'/>
     <exports symbol='virSchedParameter' type='typedef'/>
     <exports symbol='virSchedParameterPtr' type='typedef'/>
     <exports symbol='virSchedParameterType' type='typedef'/>
     <exports symbol='virSecret' type='typedef'/>
     <exports symbol='virSecretPtr' type='typedef'/>
     <exports symbol='virSecretUsageType' type='typedef'/>
     <exports symbol='virSecurityLabel' type='typedef'/>
     <exports symbol='virSecurityLabelPtr' type='typedef'/>
     <exports symbol='virSecurityModel' type='typedef'/>
     <exports symbol='virSecurityModelPtr' type='typedef'/>
     <exports symbol='virStoragePool' type='typedef'/>
     <exports symbol='virStoragePoolBuildFlags' type='typedef'/>
     <exports symbol='virStoragePoolDeleteFlags' type='typedef'/>
     <exports symbol='virStoragePoolInfo' type='typedef'/>
     <exports symbol='virStoragePoolInfoPtr' type='typedef'/>
     <exports symbol='virStoragePoolPtr' type='typedef'/>
     <exports symbol='virStoragePoolState' type='typedef'/>
     <exports symbol='virStorageVol' type='typedef'/>
     <exports symbol='virStorageVolCreateFlags' type='typedef'/>
     <exports symbol='virStorageVolDeleteFlags' type='typedef'/>
     <exports symbol='virStorageVolInfo' type='typedef'/>
     <exports symbol='virStorageVolInfoPtr' type='typedef'/>
     <exports symbol='virStorageVolPtr' type='typedef'/>
     <exports symbol='virStorageVolResizeFlags' type='typedef'/>
     <exports symbol='virStorageVolType' type='typedef'/>
     <exports symbol='virStorageVolWipeAlgorithm' type='typedef'/>
     <exports symbol='virStorageXMLFlags' type='typedef'/>
     <exports symbol='virStream' type='typedef'/>
     <exports symbol='virStreamEventType' type='typedef'/>
     <exports symbol='virStreamFlags' type='typedef'/>
     <exports symbol='virStreamPtr' type='typedef'/>
     <exports symbol='virTypedParameter' type='typedef'/>
     <exports symbol='virTypedParameterFlags' type='typedef'/>
     <exports symbol='virTypedParameterPtr' type='typedef'/>
     <exports symbol='virTypedParameterType' type='typedef'/>
     <exports symbol='virVcpuInfo' type='typedef'/>
     <exports symbol='virVcpuInfoPtr' type='typedef'/>
     <exports symbol='virVcpuState' type='typedef'/>
     <exports symbol='_virConnectAuth' type='struct'/>
     <exports symbol='_virConnectCredential' type='struct'/>
     <exports symbol='_virDomainBlockInfo' type='struct'/>
     <exports symbol='_virDomainBlockJobInfo' type='struct'/>
     <exports symbol='_virDomainBlockStats' type='struct'/>
     <exports symbol='_virDomainControlInfo' type='struct'/>
     <exports symbol='_virDomainDiskError' type='struct'/>
     <exports symbol='_virDomainEventGraphicsAddress' type='struct'/>
     <exports symbol='_virDomainEventGraphicsSubject' type='struct'/>
     <exports symbol='_virDomainEventGraphicsSubjectIdentity' type='struct'/>
     <exports symbol='_virDomainInfo' type='struct'/>
     <exports symbol='_virDomainInterfaceStats' type='struct'/>
     <exports symbol='_virDomainJobInfo' type='struct'/>
     <exports symbol='_virDomainMemoryStat' type='struct'/>
     <exports symbol='_virNodeCPUStats' type='struct'/>
     <exports symbol='_virNodeInfo' type='struct'/>
     <exports symbol='_virNodeMemoryStats' type='struct'/>
     <exports symbol='_virSecurityLabel' type='struct'/>
     <exports symbol='_virSecurityModel' type='struct'/>
     <exports symbol='_virStoragePoolInfo' type='struct'/>
     <exports symbol='_virStorageVolInfo' type='struct'/>
     <exports symbol='_virTypedParameter' type='struct'/>
     <exports symbol='_virVcpuInfo' type='struct'/>
     <exports symbol='virConnectAuthPtrDefault' type='variable'/>
     <exports symbol='virConnectAuthCallbackPtr' type='function'/>
     <exports symbol='virConnectBaselineCPU' type='function'/>
     <exports symbol='virConnectClose' type='function'/>
     <exports symbol='virConnectCloseFunc' type='function'/>
     <exports symbol='virConnectCompareCPU' type='function'/>
     <exports symbol='virConnectDomainEventBalloonChangeCallback' type='function'/>
     <exports symbol='virConnectDomainEventBlockJobCallback' type='function'/>
     <exports symbol='virConnectDomainEventCallback' type='function'/>
     <exports symbol='virConnectDomainEventDeregister' type='function'/>
     <exports symbol='virConnectDomainEventDeregisterAny' type='function'/>
     <exports symbol='virConnectDomainEventDeviceRemovedCallback' type='function'/>
     <exports symbol='virConnectDomainEventDiskChangeCallback' type='function'/>
     <exports symbol='virConnectDomainEventGenericCallback' type='function'/>
     <exports symbol='virConnectDomainEventGraphicsCallback' type='function'/>
     <exports symbol='virConnectDomainEventIOErrorCallback' type='function'/>
     <exports symbol='virConnectDomainEventIOErrorReasonCallback' type='function'/>
     <exports symbol='virConnectDomainEventPMSuspendCallback' type='function'/>
     <exports symbol='virConnectDomainEventPMSuspendDiskCallback' type='function'/>
     <exports symbol='virConnectDomainEventPMWakeupCallback' type='function'/>
     <exports symbol='virConnectDomainEventRTCChangeCallback' type='function'/>
     <exports symbol='virConnectDomainEventRegister' type='function'/>
     <exports symbol='virConnectDomainEventRegisterAny' type='function'/>
     <exports symbol='virConnectDomainEventTrayChangeCallback' type='function'/>
     <exports symbol='virConnectDomainEventWatchdogCallback' type='function'/>
     <exports symbol='virConnectDomainXMLFromNative' type='function'/>
     <exports symbol='virConnectDomainXMLToNative' type='function'/>
     <exports symbol='virConnectFindStoragePoolSources' type='function'/>
     <exports symbol='virConnectGetCPUModelNames' type='function'/>
     <exports symbol='virConnectGetCapabilities' type='function'/>
     <exports symbol='virConnectGetHostname' type='function'/>
     <exports symbol='virConnectGetLibVersion' type='function'/>
     <exports symbol='virConnectGetMaxVcpus' type='function'/>
     <exports symbol='virConnectGetSysinfo' type='function'/>
     <exports symbol='virConnectGetType' type='function'/>
     <exports symbol='virConnectGetURI' type='function'/>
     <exports symbol='virConnectGetVersion' type='function'/>
     <exports symbol='virConnectIsAlive' type='function'/>
     <exports symbol='virConnectIsEncrypted' type='function'/>
     <exports symbol='virConnectIsSecure' type='function'/>
     <exports symbol='virConnectListAllDomains' type='function'/>
     <exports symbol='virConnectListAllInterfaces' type='function'/>
     <exports symbol='virConnectListAllNWFilters' type='function'/>
     <exports symbol='virConnectListAllNetworks' type='function'/>
     <exports symbol='virConnectListAllNodeDevices' type='function'/>
     <exports symbol='virConnectListAllSecrets' type='function'/>
     <exports symbol='virConnectListAllStoragePools' type='function'/>
     <exports symbol='virConnectListDefinedDomains' type='function'/>
     <exports symbol='virConnectListDefinedInterfaces' type='function'/>
     <exports symbol='virConnectListDefinedNetworks' type='function'/>
     <exports symbol='virConnectListDefinedStoragePools' type='function'/>
     <exports symbol='virConnectListDomains' type='function'/>
     <exports symbol='virConnectListInterfaces' type='function'/>
     <exports symbol='virConnectListNWFilters' type='function'/>
     <exports symbol='virConnectListNetworks' type='function'/>
     <exports symbol='virConnectListSecrets' type='function'/>
     <exports symbol='virConnectListStoragePools' type='function'/>
     <exports symbol='virConnectNetworkEventDeregisterAny' type='function'/>
     <exports symbol='virConnectNetworkEventGenericCallback' type='function'/>
     <exports symbol='virConnectNetworkEventLifecycleCallback' type='function'/>
     <exports symbol='virConnectNetworkEventRegisterAny' type='function'/>
     <exports symbol='virConnectNumOfDefinedDomains' type='function'/>
     <exports symbol='virConnectNumOfDefinedInterfaces' type='function'/>
     <exports symbol='virConnectNumOfDefinedNetworks' type='function'/>
     <exports symbol='virConnectNumOfDefinedStoragePools' type='function'/>
     <exports symbol='virConnectNumOfDomains' type='function'/>
     <exports symbol='virConnectNumOfInterfaces' type='function'/>
     <exports symbol='virConnectNumOfNWFilters' type='function'/>
     <exports symbol='virConnectNumOfNetworks' type='function'/>
     <exports symbol='virConnectNumOfSecrets' type='function'/>
     <exports symbol='virConnectNumOfStoragePools' type='function'/>
     <exports symbol='virConnectOpen' type='function'/>
     <exports symbol='virConnectOpenAuth' type='function'/>
     <exports symbol='virConnectOpenReadOnly' type='function'/>
     <exports symbol='virConnectRef' type='function'/>
     <exports symbol='virConnectRegisterCloseCallback' type='function'/>
     <exports symbol='virConnectSetKeepAlive' type='function'/>
     <exports symbol='virConnectUnregisterCloseCallback' type='function'/>
     <exports symbol='virDomainAbortJob' type='function'/>
     <exports symbol='virDomainAttachDevice' type='function'/>
     <exports symbol='virDomainAttachDeviceFlags' type='function'/>
     <exports symbol='virDomainBlockCommit' type='function'/>
     <exports symbol='virDomainBlockJobAbort' type='function'/>
     <exports symbol='virDomainBlockJobSetSpeed' type='function'/>
     <exports symbol='virDomainBlockPeek' type='function'/>
     <exports symbol='virDomainBlockPull' type='function'/>
     <exports symbol='virDomainBlockRebase' type='function'/>
     <exports symbol='virDomainBlockResize' type='function'/>
     <exports symbol='virDomainBlockStats' type='function'/>
     <exports symbol='virDomainBlockStatsFlags' type='function'/>
     <exports symbol='virDomainCoreDump' type='function'/>
     <exports symbol='virDomainCoreDumpWithFormat' type='function'/>
     <exports symbol='virDomainCreate' type='function'/>
     <exports symbol='virDomainCreateLinux' type='function'/>
     <exports symbol='virDomainCreateWithFiles' type='function'/>
     <exports symbol='virDomainCreateWithFlags' type='function'/>
     <exports symbol='virDomainCreateXML' type='function'/>
     <exports symbol='virDomainCreateXMLWithFiles' type='function'/>
     <exports symbol='virDomainDefineXML' type='function'/>
     <exports symbol='virDomainDestroy' type='function'/>
     <exports symbol='virDomainDestroyFlags' type='function'/>
     <exports symbol='virDomainDetachDevice' type='function'/>
     <exports symbol='virDomainDetachDeviceFlags' type='function'/>
     <exports symbol='virDomainFSTrim' type='function'/>
     <exports symbol='virDomainFree' type='function'/>
     <exports symbol='virDomainGetAutostart' type='function'/>
     <exports symbol='virDomainGetBlkioParameters' type='function'/>
     <exports symbol='virDomainGetBlockInfo' type='function'/>
     <exports symbol='virDomainGetBlockIoTune' type='function'/>
     <exports symbol='virDomainGetBlockJobInfo' type='function'/>
     <exports symbol='virDomainGetCPUStats' type='function'/>
     <exports symbol='virDomainGetConnect' type='function'/>
     <exports symbol='virDomainGetControlInfo' type='function'/>
     <exports symbol='virDomainGetDiskErrors' type='function'/>
     <exports symbol='virDomainGetEmulatorPinInfo' type='function'/>
     <exports symbol='virDomainGetHostname' type='function'/>
     <exports symbol='virDomainGetID' type='function'/>
     <exports symbol='virDomainGetInfo' type='function'/>
     <exports symbol='virDomainGetInterfaceParameters' type='function'/>
     <exports symbol='virDomainGetJobInfo' type='function'/>
     <exports symbol='virDomainGetJobStats' type='function'/>
     <exports symbol='virDomainGetMaxMemory' type='function'/>
     <exports symbol='virDomainGetMaxVcpus' type='function'/>
     <exports symbol='virDomainGetMemoryParameters' type='function'/>
     <exports symbol='virDomainGetMetadata' type='function'/>
     <exports symbol='virDomainGetName' type='function'/>
     <exports symbol='virDomainGetNumaParameters' type='function'/>
     <exports symbol='virDomainGetOSType' type='function'/>
     <exports symbol='virDomainGetSchedulerParameters' type='function'/>
     <exports symbol='virDomainGetSchedulerParametersFlags' type='function'/>
     <exports symbol='virDomainGetSchedulerType' type='function'/>
     <exports symbol='virDomainGetSecurityLabel' type='function'/>
     <exports symbol='virDomainGetSecurityLabelList' type='function'/>
     <exports symbol='virDomainGetState' type='function'/>
     <exports symbol='virDomainGetUUID' type='function'/>
     <exports symbol='virDomainGetUUIDString' type='function'/>
     <exports symbol='virDomainGetVcpuPinInfo' type='function'/>
     <exports symbol='virDomainGetVcpus' type='function'/>
     <exports symbol='virDomainGetVcpusFlags' type='function'/>
     <exports symbol='virDomainGetXMLDesc' type='function'/>
     <exports symbol='virDomainHasCurrentSnapshot' type='function'/>
     <exports symbol='virDomainHasManagedSaveImage' type='function'/>
     <exports symbol='virDomainInjectNMI' type='function'/>
     <exports symbol='virDomainInterfaceStats' type='function'/>
     <exports symbol='virDomainIsActive' type='function'/>
     <exports symbol='virDomainIsPersistent' type='function'/>
     <exports symbol='virDomainIsUpdated' type='function'/>
     <exports symbol='virDomainListAllSnapshots' type='function'/>
     <exports symbol='virDomainLookupByID' type='function'/>
     <exports symbol='virDomainLookupByName' type='function'/>
     <exports symbol='virDomainLookupByUUID' type='function'/>
     <exports symbol='virDomainLookupByUUIDString' type='function'/>
     <exports symbol='virDomainManagedSave' type='function'/>
     <exports symbol='virDomainManagedSaveRemove' type='function'/>
     <exports symbol='virDomainMemoryPeek' type='function'/>
     <exports symbol='virDomainMemoryStats' type='function'/>
     <exports symbol='virDomainMigrate' type='function'/>
     <exports symbol='virDomainMigrate2' type='function'/>
     <exports symbol='virDomainMigrate3' type='function'/>
     <exports symbol='virDomainMigrateGetCompressionCache' type='function'/>
     <exports symbol='virDomainMigrateGetMaxSpeed' type='function'/>
     <exports symbol='virDomainMigrateSetCompressionCache' type='function'/>
     <exports symbol='virDomainMigrateSetMaxDowntime' type='function'/>
     <exports symbol='virDomainMigrateSetMaxSpeed' type='function'/>
     <exports symbol='virDomainMigrateToURI' type='function'/>
     <exports symbol='virDomainMigrateToURI2' type='function'/>
     <exports symbol='virDomainMigrateToURI3' type='function'/>
     <exports symbol='virDomainOpenChannel' type='function'/>
     <exports symbol='virDomainOpenConsole' type='function'/>
     <exports symbol='virDomainOpenGraphics' type='function'/>
     <exports symbol='virDomainPMSuspendForDuration' type='function'/>
     <exports symbol='virDomainPMWakeup' type='function'/>
     <exports symbol='virDomainPinEmulator' type='function'/>
     <exports symbol='virDomainPinVcpu' type='function'/>
     <exports symbol='virDomainPinVcpuFlags' type='function'/>
     <exports symbol='virDomainReboot' type='function'/>
     <exports symbol='virDomainRef' type='function'/>
     <exports symbol='virDomainReset' type='function'/>
     <exports symbol='virDomainRestore' type='function'/>
     <exports symbol='virDomainRestoreFlags' type='function'/>
     <exports symbol='virDomainResume' type='function'/>
     <exports symbol='virDomainRevertToSnapshot' type='function'/>
     <exports symbol='virDomainSave' type='function'/>
     <exports symbol='virDomainSaveFlags' type='function'/>
     <exports symbol='virDomainSaveImageDefineXML' type='function'/>
     <exports symbol='virDomainSaveImageGetXMLDesc' type='function'/>
     <exports symbol='virDomainScreenshot' type='function'/>
     <exports symbol='virDomainSendKey' type='function'/>
     <exports symbol='virDomainSendProcessSignal' type='function'/>
     <exports symbol='virDomainSetAutostart' type='function'/>
     <exports symbol='virDomainSetBlkioParameters' type='function'/>
     <exports symbol='virDomainSetBlockIoTune' type='function'/>
     <exports symbol='virDomainSetInterfaceParameters' type='function'/>
     <exports symbol='virDomainSetMaxMemory' type='function'/>
     <exports symbol='virDomainSetMemory' type='function'/>
     <exports symbol='virDomainSetMemoryFlags' type='function'/>
     <exports symbol='virDomainSetMemoryParameters' type='function'/>
     <exports symbol='virDomainSetMemoryStatsPeriod' type='function'/>
     <exports symbol='virDomainSetMetadata' type='function'/>
     <exports symbol='virDomainSetNumaParameters' type='function'/>
     <exports symbol='virDomainSetSchedulerParameters' type='function'/>
     <exports symbol='virDomainSetSchedulerParametersFlags' type='function'/>
     <exports symbol='virDomainSetVcpus' type='function'/>
     <exports symbol='virDomainSetVcpusFlags' type='function'/>
     <exports symbol='virDomainShutdown' type='function'/>
     <exports symbol='virDomainShutdownFlags' type='function'/>
     <exports symbol='virDomainSnapshotCreateXML' type='function'/>
     <exports symbol='virDomainSnapshotCurrent' type='function'/>
     <exports symbol='virDomainSnapshotDelete' type='function'/>
     <exports symbol='virDomainSnapshotFree' type='function'/>
     <exports symbol='virDomainSnapshotGetConnect' type='function'/>
     <exports symbol='virDomainSnapshotGetDomain' type='function'/>
     <exports symbol='virDomainSnapshotGetName' type='function'/>
     <exports symbol='virDomainSnapshotGetParent' type='function'/>
     <exports symbol='virDomainSnapshotGetXMLDesc' type='function'/>
     <exports symbol='virDomainSnapshotHasMetadata' type='function'/>
     <exports symbol='virDomainSnapshotIsCurrent' type='function'/>
     <exports symbol='virDomainSnapshotListAllChildren' type='function'/>
     <exports symbol='virDomainSnapshotListChildrenNames' type='function'/>
     <exports symbol='virDomainSnapshotListNames' type='function'/>
     <exports symbol='virDomainSnapshotLookupByName' type='function'/>
     <exports symbol='virDomainSnapshotNum' type='function'/>
     <exports symbol='virDomainSnapshotNumChildren' type='function'/>
     <exports symbol='virDomainSnapshotRef' type='function'/>
     <exports symbol='virDomainSuspend' type='function'/>
     <exports symbol='virDomainUndefine' type='function'/>
     <exports symbol='virDomainUndefineFlags' type='function'/>
     <exports symbol='virDomainUpdateDeviceFlags' type='function'/>
     <exports symbol='virEventAddHandle' type='function'/>
     <exports symbol='virEventAddHandleFunc' type='function'/>
     <exports symbol='virEventAddTimeout' type='function'/>
     <exports symbol='virEventAddTimeoutFunc' type='function'/>
     <exports symbol='virEventHandleCallback' type='function'/>
     <exports symbol='virEventRegisterDefaultImpl' type='function'/>
     <exports symbol='virEventRegisterImpl' type='function'/>
     <exports symbol='virEventRemoveHandle' type='function'/>
     <exports symbol='virEventRemoveHandleFunc' type='function'/>
     <exports symbol='virEventRemoveTimeout' type='function'/>
     <exports symbol='virEventRemoveTimeoutFunc' type='function'/>
     <exports symbol='virEventRunDefaultImpl' type='function'/>
     <exports symbol='virEventTimeoutCallback' type='function'/>
     <exports symbol='virEventUpdateHandle' type='function'/>
     <exports symbol='virEventUpdateHandleFunc' type='function'/>
     <exports symbol='virEventUpdateTimeout' type='function'/>
     <exports symbol='virEventUpdateTimeoutFunc' type='function'/>
     <exports symbol='virFreeCallback' type='function'/>
     <exports symbol='virGetVersion' type='function'/>
     <exports symbol='virInitialize' type='function'/>
     <exports symbol='virInterfaceChangeBegin' type='function'/>
     <exports symbol='virInterfaceChangeCommit' type='function'/>
     <exports symbol='virInterfaceChangeRollback' type='function'/>
     <exports symbol='virInterfaceCreate' type='function'/>
     <exports symbol='virInterfaceDefineXML' type='function'/>
     <exports symbol='virInterfaceDestroy' type='function'/>
     <exports symbol='virInterfaceFree' type='function'/>
     <exports symbol='virInterfaceGetConnect' type='function'/>
     <exports symbol='virInterfaceGetMACString' type='function'/>
     <exports symbol='virInterfaceGetName' type='function'/>
     <exports symbol='virInterfaceGetXMLDesc' type='function'/>
     <exports symbol='virInterfaceIsActive' type='function'/>
     <exports symbol='virInterfaceLookupByMACString' type='function'/>
     <exports symbol='virInterfaceLookupByName' type='function'/>
     <exports symbol='virInterfaceRef' type='function'/>
     <exports symbol='virInterfaceUndefine' type='function'/>
     <exports symbol='virNWFilterDefineXML' type='function'/>
     <exports symbol='virNWFilterFree' type='function'/>
     <exports symbol='virNWFilterGetName' type='function'/>
     <exports symbol='virNWFilterGetUUID' type='function'/>
     <exports symbol='virNWFilterGetUUIDString' type='function'/>
     <exports symbol='virNWFilterGetXMLDesc' type='function'/>
     <exports symbol='virNWFilterLookupByName' type='function'/>
     <exports symbol='virNWFilterLookupByUUID' type='function'/>
     <exports symbol='virNWFilterLookupByUUIDString' type='function'/>
     <exports symbol='virNWFilterRef' type='function'/>
     <exports symbol='virNWFilterUndefine' type='function'/>
     <exports symbol='virNetworkCreate' type='function'/>
     <exports symbol='virNetworkCreateXML' type='function'/>
     <exports symbol='virNetworkDefineXML' type='function'/>
     <exports symbol='virNetworkDestroy' type='function'/>
     <exports symbol='virNetworkFree' type='function'/>
     <exports symbol='virNetworkGetAutostart' type='function'/>
     <exports symbol='virNetworkGetBridgeName' type='function'/>
     <exports symbol='virNetworkGetConnect' type='function'/>
     <exports symbol='virNetworkGetName' type='function'/>
     <exports symbol='virNetworkGetUUID' type='function'/>
     <exports symbol='virNetworkGetUUIDString' type='function'/>
     <exports symbol='virNetworkGetXMLDesc' type='function'/>
     <exports symbol='virNetworkIsActive' type='function'/>
     <exports symbol='virNetworkIsPersistent' type='function'/>
     <exports symbol='virNetworkLookupByName' type='function'/>
     <exports symbol='virNetworkLookupByUUID' type='function'/>
     <exports symbol='virNetworkLookupByUUIDString' type='function'/>
     <exports symbol='virNetworkRef' type='function'/>
     <exports symbol='virNetworkSetAutostart' type='function'/>
     <exports symbol='virNetworkUndefine' type='function'/>
     <exports symbol='virNetworkUpdate' type='function'/>
     <exports symbol='virNodeDeviceCreateXML' type='function'/>
     <exports symbol='virNodeDeviceDestroy' type='function'/>
     <exports symbol='virNodeDeviceDetachFlags' type='function'/>
     <exports symbol='virNodeDeviceDettach' type='function'/>
     <exports symbol='virNodeDeviceFree' type='function'/>
     <exports symbol='virNodeDeviceGetName' type='function'/>
     <exports symbol='virNodeDeviceGetParent' type='function'/>
     <exports symbol='virNodeDeviceGetXMLDesc' type='function'/>
     <exports symbol='virNodeDeviceListCaps' type='function'/>
     <exports symbol='virNodeDeviceLookupByName' type='function'/>
     <exports symbol='virNodeDeviceLookupSCSIHostByWWN' type='function'/>
     <exports symbol='virNodeDeviceNumOfCaps' type='function'/>
     <exports symbol='virNodeDeviceReAttach' type='function'/>
     <exports symbol='virNodeDeviceRef' type='function'/>
     <exports symbol='virNodeDeviceReset' type='function'/>
     <exports symbol='virNodeGetCPUMap' type='function'/>
     <exports symbol='virNodeGetCPUStats' type='function'/>
     <exports symbol='virNodeGetCellsFreeMemory' type='function'/>
     <exports symbol='virNodeGetFreeMemory' type='function'/>
     <exports symbol='virNodeGetInfo' type='function'/>
     <exports symbol='virNodeGetMemoryParameters' type='function'/>
     <exports symbol='virNodeGetMemoryStats' type='function'/>
     <exports symbol='virNodeGetSecurityModel' type='function'/>
     <exports symbol='virNodeListDevices' type='function'/>
     <exports symbol='virNodeNumOfDevices' type='function'/>
     <exports symbol='virNodeSetMemoryParameters' type='function'/>
     <exports symbol='virNodeSuspendForDuration' type='function'/>
     <exports symbol='virSecretDefineXML' type='function'/>
     <exports symbol='virSecretFree' type='function'/>
     <exports symbol='virSecretGetConnect' type='function'/>
     <exports symbol='virSecretGetUUID' type='function'/>
     <exports symbol='virSecretGetUUIDString' type='function'/>
     <exports symbol='virSecretGetUsageID' type='function'/>
     <exports symbol='virSecretGetUsageType' type='function'/>
     <exports symbol='virSecretGetValue' type='function'/>
     <exports symbol='virSecretGetXMLDesc' type='function'/>
     <exports symbol='virSecretLookupByUUID' type='function'/>
     <exports symbol='virSecretLookupByUUIDString' type='function'/>
     <exports symbol='virSecretLookupByUsage' type='function'/>
     <exports symbol='virSecretRef' type='function'/>
     <exports symbol='virSecretSetValue' type='function'/>
     <exports symbol='virSecretUndefine' type='function'/>
     <exports symbol='virStoragePoolBuild' type='function'/>
     <exports symbol='virStoragePoolCreate' type='function'/>
     <exports symbol='virStoragePoolCreateXML' type='function'/>
     <exports symbol='virStoragePoolDefineXML' type='function'/>
     <exports symbol='virStoragePoolDelete' type='function'/>
     <exports symbol='virStoragePoolDestroy' type='function'/>
     <exports symbol='virStoragePoolFree' type='function'/>
     <exports symbol='virStoragePoolGetAutostart' type='function'/>
     <exports symbol='virStoragePoolGetConnect' type='function'/>
     <exports symbol='virStoragePoolGetInfo' type='function'/>
     <exports symbol='virStoragePoolGetName' type='function'/>
     <exports symbol='virStoragePoolGetUUID' type='function'/>
     <exports symbol='virStoragePoolGetUUIDString' type='function'/>
     <exports symbol='virStoragePoolGetXMLDesc' type='function'/>
     <exports symbol='virStoragePoolIsActive' type='function'/>
     <exports symbol='virStoragePoolIsPersistent' type='function'/>
     <exports symbol='virStoragePoolListAllVolumes' type='function'/>
     <exports symbol='virStoragePoolListVolumes' type='function'/>
     <exports symbol='virStoragePoolLookupByName' type='function'/>
     <exports symbol='virStoragePoolLookupByUUID' type='function'/>
     <exports symbol='virStoragePoolLookupByUUIDString' type='function'/>
     <exports symbol='virStoragePoolLookupByVolume' type='function'/>
     <exports symbol='virStoragePoolNumOfVolumes' type='function'/>
     <exports symbol='virStoragePoolRef' type='function'/>
     <exports symbol='virStoragePoolRefresh' type='function'/>
     <exports symbol='virStoragePoolSetAutostart' type='function'/>
     <exports symbol='virStoragePoolUndefine' type='function'/>
     <exports symbol='virStorageVolCreateXML' type='function'/>
     <exports symbol='virStorageVolCreateXMLFrom' type='function'/>
     <exports symbol='virStorageVolDelete' type='function'/>
     <exports symbol='virStorageVolDownload' type='function'/>
     <exports symbol='virStorageVolFree' type='function'/>
     <exports symbol='virStorageVolGetConnect' type='function'/>
     <exports symbol='virStorageVolGetInfo' type='function'/>
     <exports symbol='virStorageVolGetKey' type='function'/>
     <exports symbol='virStorageVolGetName' type='function'/>
     <exports symbol='virStorageVolGetPath' type='function'/>
     <exports symbol='virStorageVolGetXMLDesc' type='function'/>
     <exports symbol='virStorageVolLookupByKey' type='function'/>
     <exports symbol='virStorageVolLookupByName' type='function'/>
     <exports symbol='virStorageVolLookupByPath' type='function'/>
     <exports symbol='virStorageVolRef' type='function'/>
     <exports symbol='virStorageVolResize' type='function'/>
     <exports symbol='virStorageVolUpload' type='function'/>
     <exports symbol='virStorageVolWipe' type='function'/>
     <exports symbol='virStorageVolWipePattern' type='function'/>
     <exports symbol='virStreamAbort' type='function'/>
     <exports symbol='virStreamEventAddCallback' type='function'/>
     <exports symbol='virStreamEventCallback' type='function'/>
     <exports symbol='virStreamEventRemoveCallback' type='function'/>
     <exports symbol='virStreamEventUpdateCallback' type='function'/>
     <exports symbol='virStreamFinish' type='function'/>
     <exports symbol='virStreamFree' type='function'/>
     <exports symbol='virStreamNew' type='function'/>
     <exports symbol='virStreamRecv' type='function'/>
     <exports symbol='virStreamRecvAll' type='function'/>
     <exports symbol='virStreamRef' type='function'/>
     <exports symbol='virStreamSend' type='function'/>
     <exports symbol='virStreamSendAll' type='function'/>
     <exports symbol='virStreamSinkFunc' type='function'/>
     <exports symbol='virStreamSourceFunc' type='function'/>
     <exports symbol='virTypedParamsAddBoolean' type='function'/>
     <exports symbol='virTypedParamsAddDouble' type='function'/>
     <exports symbol='virTypedParamsAddFromString' type='function'/>
     <exports symbol='virTypedParamsAddInt' type='function'/>
     <exports symbol='virTypedParamsAddLLong' type='function'/>
     <exports symbol='virTypedParamsAddString' type='function'/>
     <exports symbol='virTypedParamsAddUInt' type='function'/>
     <exports symbol='virTypedParamsAddULLong' type='function'/>
     <exports symbol='virTypedParamsClear' type='function'/>
     <exports symbol='virTypedParamsFree' type='function'/>
     <exports symbol='virTypedParamsGet' type='function'/>
     <exports symbol='virTypedParamsGetBoolean' type='function'/>
     <exports symbol='virTypedParamsGetDouble' type='function'/>
     <exports symbol='virTypedParamsGetInt' type='function'/>
     <exports symbol='virTypedParamsGetLLong' type='function'/>
     <exports symbol='virTypedParamsGetString' type='function'/>
     <exports symbol='virTypedParamsGetUInt' type='function'/>
     <exports symbol='virTypedParamsGetULLong' type='function'/>
    </file>
    <file name='virterror'>
     <summary>error handling interfaces for the libvirt library</summary>
     <description>Provides the interfaces of the libvirt library to handle errors raised while using the library.  Copyright (C) 2006, 2010-2012 Red Hat, Inc.  This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.  You should have received a copy of the GNU Lesser General Public License along with this library.  If not, see &lt;http://www.gnu.org/licenses/&gt;. </description>
     <author>Daniel Veillard &lt;veillard@redhat.com&gt; </author>
     <exports symbol='VIR_ERR_ACCESS_DENIED' type='enum'/>
     <exports symbol='VIR_ERR_AGENT_UNRESPONSIVE' type='enum'/>
     <exports symbol='VIR_ERR_ARGUMENT_UNSUPPORTED' type='enum'/>
     <exports symbol='VIR_ERR_AUTH_CANCELLED' type='enum'/>
     <exports symbol='VIR_ERR_AUTH_FAILED' type='enum'/>
     <exports symbol='VIR_ERR_BLOCK_COPY_ACTIVE' type='enum'/>
     <exports symbol='VIR_ERR_BUILD_FIREWALL' type='enum'/>
     <exports symbol='VIR_ERR_CALL_FAILED' type='enum'/>
     <exports symbol='VIR_ERR_CONFIG_UNSUPPORTED' type='enum'/>
     <exports symbol='VIR_ERR_CONF_SYNTAX' type='enum'/>
     <exports symbol='VIR_ERR_DBUS_SERVICE' type='enum'/>
     <exports symbol='VIR_ERR_DOMAIN_LAST' type='enum'/>
     <exports symbol='VIR_ERR_DOM_EXIST' type='enum'/>
     <exports symbol='VIR_ERR_DRIVER_FULL' type='enum'/>
     <exports symbol='VIR_ERR_ERROR' type='enum'/>
     <exports symbol='VIR_ERR_GET_FAILED' type='enum'/>
     <exports symbol='VIR_ERR_GNUTLS_ERROR' type='enum'/>
     <exports symbol='VIR_ERR_HOOK_SCRIPT_FAILED' type='enum'/>
     <exports symbol='VIR_ERR_HTTP_ERROR' type='enum'/>
     <exports symbol='VIR_ERR_INTERNAL_ERROR' type='enum'/>
     <exports symbol='VIR_ERR_INVALID_ARG' type='enum'/>
     <exports symbol='VIR_ERR_INVALID_CONN' type='enum'/>
     <exports symbol='VIR_ERR_INVALID_DOMAIN' type='enum'/>
     <exports symbol='VIR_ERR_INVALID_DOMAIN_SNAPSHOT' type='enum'/>
     <exports symbol='VIR_ERR_INVALID_INTERFACE' type='enum'/>
     <exports symbol='VIR_ERR_INVALID_MAC' type='enum'/>
     <exports symbol='VIR_ERR_INVALID_NETWORK' type='enum'/>
     <exports symbol='VIR_ERR_INVALID_NODE_DEVICE' type='enum'/>
     <exports symbol='VIR_ERR_INVALID_NWFILTER' type='enum'/>
     <exports symbol='VIR_ERR_INVALID_SECRET' type='enum'/>
     <exports symbol='VIR_ERR_INVALID_STORAGE_POOL' type='enum'/>
     <exports symbol='VIR_ERR_INVALID_STORAGE_VOL' type='enum'/>
     <exports symbol='VIR_ERR_INVALID_STREAM' type='enum'/>
     <exports symbol='VIR_ERR_MIGRATE_PERSIST_FAILED' type='enum'/>
     <exports symbol='VIR_ERR_MIGRATE_UNSAFE' type='enum'/>
     <exports symbol='VIR_ERR_MULTIPLE_INTERFACES' type='enum'/>
     <exports symbol='VIR_ERR_NETWORK_EXIST' type='enum'/>
     <exports symbol='VIR_ERR_NONE' type='enum'/>
     <exports symbol='VIR_ERR_NO_CONNECT' type='enum'/>
     <exports symbol='VIR_ERR_NO_DEVICE' type='enum'/>
     <exports symbol='VIR_ERR_NO_DOMAIN' type='enum'/>
     <exports symbol='VIR_ERR_NO_DOMAIN_METADATA' type='enum'/>
     <exports symbol='VIR_ERR_NO_DOMAIN_SNAPSHOT' type='enum'/>
     <exports symbol='VIR_ERR_NO_INTERFACE' type='enum'/>
     <exports symbol='VIR_ERR_NO_KERNEL' type='enum'/>
     <exports symbol='VIR_ERR_NO_MEMORY' type='enum'/>
     <exports symbol='VIR_ERR_NO_NAME' type='enum'/>
     <exports symbol='VIR_ERR_NO_NETWORK' type='enum'/>
     <exports symbol='VIR_ERR_NO_NODE_DEVICE' type='enum'/>
     <exports symbol='VIR_ERR_NO_NWFILTER' type='enum'/>
     <exports symbol='VIR_ERR_NO_OS' type='enum'/>
     <exports symbol='VIR_ERR_NO_ROOT' type='enum'/>
     <exports symbol='VIR_ERR_NO_SECRET' type='enum'/>
     <exports symbol='VIR_ERR_NO_SECURITY_MODEL' type='enum'/>
     <exports symbol='VIR_ERR_NO_SOURCE' type='enum'/>
     <exports symbol='VIR_ERR_NO_STORAGE_POOL' type='enum'/>
     <exports symbol='VIR_ERR_NO_STORAGE_VOL' type='enum'/>
     <exports symbol='VIR_ERR_NO_SUPPORT' type='enum'/>
     <exports symbol='VIR_ERR_NO_TARGET' type='enum'/>
     <exports symbol='VIR_ERR_NO_XEN' type='enum'/>
     <exports symbol='VIR_ERR_NO_XENSTORE' type='enum'/>
     <exports symbol='VIR_ERR_OK' type='enum'/>
     <exports symbol='VIR_ERR_OPEN_FAILED' type='enum'/>
     <exports symbol='VIR_ERR_OPERATION_ABORTED' type='enum'/>
     <exports symbol='VIR_ERR_OPERATION_DENIED' type='enum'/>
     <exports symbol='VIR_ERR_OPERATION_FAILED' type='enum'/>
     <exports symbol='VIR_ERR_OPERATION_INVALID' type='enum'/>
     <exports symbol='VIR_ERR_OPERATION_TIMEOUT' type='enum'/>
     <exports symbol='VIR_ERR_OPERATION_UNSUPPORTED' type='enum'/>
     <exports symbol='VIR_ERR_OS_TYPE' type='enum'/>
     <exports symbol='VIR_ERR_OVERFLOW' type='enum'/>
     <exports symbol='VIR_ERR_PARSE_FAILED' type='enum'/>
     <exports symbol='VIR_ERR_POST_FAILED' type='enum'/>
     <exports symbol='VIR_ERR_READ_FAILED' type='enum'/>
     <exports symbol='VIR_ERR_RESOURCE_BUSY' type='enum'/>
     <exports symbol='VIR_ERR_RPC' type='enum'/>
     <exports symbol='VIR_ERR_SEXPR_SERIAL' type='enum'/>
     <exports symbol='VIR_ERR_SNAPSHOT_REVERT_RISKY' type='enum'/>
     <exports symbol='VIR_ERR_SSH' type='enum'/>
     <exports symbol='VIR_ERR_STORAGE_POOL_BUILT' type='enum'/>
     <exports symbol='VIR_ERR_STORAGE_PROBE_FAILED' type='enum'/>
     <exports symbol='VIR_ERR_STORAGE_VOL_EXIST' type='enum'/>
     <exports symbol='VIR_ERR_SYSTEM_ERROR' type='enum'/>
     <exports symbol='VIR_ERR_UNKNOWN_HOST' type='enum'/>
     <exports symbol='VIR_ERR_WARNING' type='enum'/>
     <exports symbol='VIR_ERR_WRITE_FAILED' type='enum'/>
     <exports symbol='VIR_ERR_XEN_CALL' type='enum'/>
     <exports symbol='VIR_ERR_XML_DETAIL' type='enum'/>
     <exports symbol='VIR_ERR_XML_ERROR' type='enum'/>
     <exports symbol='VIR_FROM_ACCESS' type='enum'/>
     <exports symbol='VIR_FROM_AUDIT' type='enum'/>
     <exports symbol='VIR_FROM_AUTH' type='enum'/>
     <exports symbol='VIR_FROM_BHYVE' type='enum'/>
     <exports symbol='VIR_FROM_CAPABILITIES' type='enum'/>
     <exports symbol='VIR_FROM_CGROUP' type='enum'/>
     <exports symbol='VIR_FROM_CONF' type='enum'/>
     <exports symbol='VIR_FROM_CPU' type='enum'/>
     <exports symbol='VIR_FROM_CRYPTO' type='enum'/>
     <exports symbol='VIR_FROM_DBUS' type='enum'/>
     <exports symbol='VIR_FROM_DEVICE' type='enum'/>
     <exports symbol='VIR_FROM_DOM' type='enum'/>
     <exports symbol='VIR_FROM_DOMAIN' type='enum'/>
     <exports symbol='VIR_FROM_DOMAIN_SNAPSHOT' type='enum'/>
     <exports symbol='VIR_FROM_ESX' type='enum'/>
     <exports symbol='VIR_FROM_EVENT' type='enum'/>
     <exports symbol='VIR_FROM_HOOK' type='enum'/>
     <exports symbol='VIR_FROM_HYPERV' type='enum'/>
     <exports symbol='VIR_FROM_IDENTITY' type='enum'/>
     <exports symbol='VIR_FROM_INITCTL' type='enum'/>
     <exports symbol='VIR_FROM_INTERFACE' type='enum'/>
     <exports symbol='VIR_FROM_LIBXL' type='enum'/>
     <exports symbol='VIR_FROM_LOCKING' type='enum'/>
     <exports symbol='VIR_FROM_LOCKSPACE' type='enum'/>
     <exports symbol='VIR_FROM_LXC' type='enum'/>
     <exports symbol='VIR_FROM_NET' type='enum'/>
     <exports symbol='VIR_FROM_NETWORK' type='enum'/>
     <exports symbol='VIR_FROM_NODEDEV' type='enum'/>
     <exports symbol='VIR_FROM_NONE' type='enum'/>
     <exports symbol='VIR_FROM_NWFILTER' type='enum'/>
     <exports symbol='VIR_FROM_ONE' type='enum'/>
     <exports symbol='VIR_FROM_OPENVZ' type='enum'/>
     <exports symbol='VIR_FROM_PARALLELS' type='enum'/>
     <exports symbol='VIR_FROM_PHYP' type='enum'/>
     <exports symbol='VIR_FROM_PROXY' type='enum'/>
     <exports symbol='VIR_FROM_QEMU' type='enum'/>
     <exports symbol='VIR_FROM_REMOTE' type='enum'/>
     <exports symbol='VIR_FROM_RPC' type='enum'/>
     <exports symbol='VIR_FROM_SECRET' type='enum'/>
     <exports symbol='VIR_FROM_SECURITY' type='enum'/>
     <exports symbol='VIR_FROM_SEXPR' type='enum'/>
     <exports symbol='VIR_FROM_SSH' type='enum'/>
     <exports symbol='VIR_FROM_STATS_LINUX' type='enum'/>
     <exports symbol='VIR_FROM_STORAGE' type='enum'/>
     <exports symbol='VIR_FROM_STREAMS' type='enum'/>
     <exports symbol='VIR_FROM_SYSINFO' type='enum'/>
     <exports symbol='VIR_FROM_SYSTEMD' type='enum'/>
     <exports symbol='VIR_FROM_TEST' type='enum'/>
     <exports symbol='VIR_FROM_UML' type='enum'/>
     <exports symbol='VIR_FROM_URI' type='enum'/>
     <exports symbol='VIR_FROM_VBOX' type='enum'/>
     <exports symbol='VIR_FROM_VMWARE' type='enum'/>
     <exports symbol='VIR_FROM_XEN' type='enum'/>
     <exports symbol='VIR_FROM_XENAPI' type='enum'/>
     <exports symbol='VIR_FROM_XEND' type='enum'/>
     <exports symbol='VIR_FROM_XENSTORE' type='enum'/>
     <exports symbol='VIR_FROM_XENXM' type='enum'/>
     <exports symbol='VIR_FROM_XEN_INOTIFY' type='enum'/>
     <exports symbol='VIR_FROM_XML' type='enum'/>
     <exports symbol='VIR_WAR_NO_INTERFACE' type='enum'/>
     <exports symbol='VIR_WAR_NO_NETWORK' type='enum'/>
     <exports symbol='VIR_WAR_NO_NODE' type='enum'/>
     <exports symbol='VIR_WAR_NO_NWFILTER' type='enum'/>
     <exports symbol='VIR_WAR_NO_SECRET' type='enum'/>
     <exports symbol='VIR_WAR_NO_STORAGE' type='enum'/>
     <exports symbol='virError' type='typedef'/>
     <exports symbol='virErrorDomain' type='typedef'/>
     <exports symbol='virErrorLevel' type='typedef'/>
     <exports symbol='virErrorNumber' type='typedef'/>
     <exports symbol='virErrorPtr' type='typedef'/>
     <exports symbol='_virError' type='struct'/>
     <exports symbol='virConnCopyLastError' type='function'/>
     <exports symbol='virConnGetLastError' type='function'/>
     <exports symbol='virConnResetLastError' type='function'/>
     <exports symbol='virConnSetErrorFunc' type='function'/>
     <exports symbol='virCopyLastError' type='function'/>
     <exports symbol='virDefaultErrorFunc' type='function'/>
     <exports symbol='virErrorFunc' type='function'/>
     <exports symbol='virFreeError' type='function'/>
     <exports symbol='virGetLastError' type='function'/>
     <exports symbol='virGetLastErrorMessage' type='function'/>
     <exports symbol='virResetError' type='function'/>
     <exports symbol='virResetLastError' type='function'/>
     <exports symbol='virSaveLastError' type='function'/>
     <exports symbol='virSetErrorFunc' type='function'/>
    </file>
  </files>
  <symbols>
    <macro name='LIBVIR_CHECK_VERSION' file='libvirt'>
      <info><![CDATA[Macro for developers to easily check what version of the library their code is compiling against. e.g. #if LIBVIR_CHECK_VERSION(1,1,3) // some code that only works in 1.1.3 and newer #endif]]></info>
      <arg name='major' info='major component of the version number'/>
      <arg name='minor' info='minor component of the version number'/>
      <arg name='micro' info='micro component of the version number'/>
    </macro>
    <macro name='LIBVIR_VERSION_NUMBER' file='libvirt'>
      <info><![CDATA[Macro providing the version of the library as version * 1,000,000 + minor * 1000 + micro]]></info>
    </macro>
    <macro name='VIR_COPY_CPUMAP' file='libvirt'>
      <info><![CDATA[This macro is to be used in conjunction with virDomainGetVcpus() and virDomainPinVcpu() APIs. VIR_COPY_CPUMAP macro extracts the cpumap of the specified vcpu from cpumaps array and copies it into cpumap to be used later by virDomainPinVcpu() API.]]></info>
      <arg name='cpumaps' info='pointer to an array of cpumap (in 8-bit bytes) (IN)'/>
      <arg name='maplen' info='the length (in bytes) of one cpumap'/>
      <arg name='vcpu' info='the virtual CPU number'/>
      <arg name='cpumap' info='pointer to a cpumap (in 8-bit bytes) (OUT) This cpumap must be previously allocated by the caller (ie: malloc(maplen))'/>
    </macro>
    <macro name='VIR_CPU_MAPLEN' file='libvirt'>
      <info><![CDATA[This macro is to be used in conjunction with virDomainPinVcpu() API. It returns the length (in bytes) required to store the complete CPU map between a single virtual & all physical CPUs of a domain.]]></info>
      <arg name='cpu' info='number of physical CPUs'/>
    </macro>
    <macro name='VIR_CPU_USABLE' file='libvirt'>
      <info><![CDATA[This macro is to be used in conjunction with virDomainGetVcpus() API. VIR_CPU_USABLE macro returns a non-zero value (true) if the cpu is usable by the vcpu, and 0 otherwise.]]></info>
      <arg name='cpumaps' info='pointer to an array of cpumap (in 8-bit bytes) (IN)'/>
      <arg name='maplen' info='the length (in bytes) of one cpumap'/>
      <arg name='vcpu' info='the virtual CPU number'/>
      <arg name='cpu' info='the physical CPU number'/>
    </macro>
    <macro name='VIR_CPU_USED' file='libvirt'>
      <info><![CDATA[This macro can be used in conjunction with virNodeGetCPUMap() API. It returns non-zero if the bit of the related CPU is set.]]></info>
      <arg name='cpumap' info='pointer to a bit map of real CPUs (in 8-bit bytes) (IN)'/>
      <arg name='cpu' info='the physical CPU number'/>
    </macro>
    <macro name='VIR_DOMAIN_BANDWIDTH_IN_AVERAGE' file='libvirt'>
      <info><![CDATA[Macro represents the inbound average of NIC bandwidth, as a uint.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_BANDWIDTH_IN_BURST' file='libvirt'>
      <info><![CDATA[Macro represents the inbound burst of NIC bandwidth, as a uint.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_BANDWIDTH_IN_PEAK' file='libvirt'>
      <info><![CDATA[Macro represents the inbound peak of NIC bandwidth, as a uint.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_BANDWIDTH_OUT_AVERAGE' file='libvirt'>
      <info><![CDATA[Macro represents the outbound average of NIC bandwidth, as a uint.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_BANDWIDTH_OUT_BURST' file='libvirt'>
      <info><![CDATA[Macro represents the outbound burst of NIC bandwidth, as a uint.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_BANDWIDTH_OUT_PEAK' file='libvirt'>
      <info><![CDATA[Macro represents the outbound peak of NIC bandwidth, as a uint.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_BLKIO_DEVICE_READ_BPS' file='libvirt'>
      <info><![CDATA[Macro for the blkio tunable throttle.read_iops_device: it represents the bytes of reading the block device per second, as a string. The string is parsed as a series of /path/to/device, read_bps elements, separated by ','.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_BLKIO_DEVICE_READ_IOPS' file='libvirt'>
      <info><![CDATA[Macro for the blkio tunable throttle.read_iops_device: it represents the number of reading the block device per second, as a string. The string is parsed as a series of /path/to/device, read_iops elements, separated by ','.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_BLKIO_DEVICE_WEIGHT' file='libvirt'>
      <info><![CDATA[Macro for the blkio tunable weight_device: it represents the per-device weight, as a string.  The string is parsed as a series of /path/to/device,weight elements, separated by ','.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_BLKIO_DEVICE_WRITE_BPS' file='libvirt'>
      <info><![CDATA[Macro for the blkio tunable throttle.read_iops_device: it represents the number of reading the block device per second, as a string. The string is parsed as a series of /path/to/device, write_bps elements, separated by ','.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_BLKIO_DEVICE_WRITE_IOPS' file='libvirt'>
      <info><![CDATA[Macro for the blkio tunable throttle.write_iops_device: it represents the number of writing the block device per second, as a string. The string is parsed as a series of /path/to/device, write_iops elements, separated by ','.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_BLKIO_FIELD_LENGTH' file='libvirt'>
      <info><![CDATA[Macro providing the field length of virBlkioParameter.  Provided for backwards compatibility; VIR_TYPED_PARAM_FIELD_LENGTH is the preferred value since 0.9.2.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_BLKIO_WEIGHT' file='libvirt'>
      <info><![CDATA[Macro for the Blkio tunable weight: it represents the io weight the guest can use, as a uint.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_BLOCK_IOTUNE_READ_BYTES_SEC' file='libvirt'>
      <info><![CDATA[Macro for the BlockIoTune tunable weight: it represents the read bytes per second permitted through a block device, as a ullong.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_BLOCK_IOTUNE_READ_IOPS_SEC' file='libvirt'>
      <info><![CDATA[Macro for the BlockIoTune tunable weight: it represents the read I/O operations per second permitted through a block device, as a ullong.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_BYTES_SEC' file='libvirt'>
      <info><![CDATA[Macro for the BlockIoTune tunable weight: it represents the total bytes per second permitted through a block device, as a ullong.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_IOPS_SEC' file='libvirt'>
      <info><![CDATA[Macro for the BlockIoTune tunable weight: it represents the total I/O operations per second permitted through a block device, as a ullong.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_BLOCK_IOTUNE_WRITE_BYTES_SEC' file='libvirt'>
      <info><![CDATA[Macro for the BlockIoTune tunable weight: it represents the write bytes per second permitted through a block device, as a ullong.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_BLOCK_IOTUNE_WRITE_IOPS_SEC' file='libvirt'>
      <info><![CDATA[Macro for the BlockIoTune tunable weight: it represents the write I/O operations per second permitted through a block device, as a ullong.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_BLOCK_STATS_ERRS' file='libvirt'>
      <info><![CDATA[In Xen this returns the mysterious 'oo_req', as an llong.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_BLOCK_STATS_FIELD_LENGTH' file='libvirt'>
      <info><![CDATA[Macro providing the field length of parameter names when using virDomainBlockStatsFlags().]]></info>
    </macro>
    <macro name='VIR_DOMAIN_BLOCK_STATS_FLUSH_REQ' file='libvirt'>
      <info><![CDATA[Macro represents the total flush requests of the block device, as an llong.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_BLOCK_STATS_FLUSH_TOTAL_TIMES' file='libvirt'>
      <info><![CDATA[Macro represents the total time spend on cache flushing in nano-seconds of the block device, as an llong.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_BLOCK_STATS_READ_BYTES' file='libvirt'>
      <info><![CDATA[Macro represents the total number of read bytes of the block device, as an llong.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_BLOCK_STATS_READ_REQ' file='libvirt'>
      <info><![CDATA[Macro represents the total read requests of the block device, as an llong.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_BLOCK_STATS_READ_TOTAL_TIMES' file='libvirt'>
      <info><![CDATA[Macro represents the total time spend on cache reads in nano-seconds of the block device, as an llong.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_BLOCK_STATS_WRITE_BYTES' file='libvirt'>
      <info><![CDATA[Macro represents the total number of write bytes of the block device, as an llong.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_BLOCK_STATS_WRITE_REQ' file='libvirt'>
      <info><![CDATA[Macro represents the total write requests of the block device, as an llong.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_BLOCK_STATS_WRITE_TOTAL_TIMES' file='libvirt'>
      <info><![CDATA[Macro represents the total time spend on cache writes in nano-seconds of the block device, as an llong.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_CPU_STATS_CPUTIME' file='libvirt'>
      <info><![CDATA[cpu usage (sum of both vcpu and hypervisor usage) in nanoseconds, as a ullong]]></info>
    </macro>
    <macro name='VIR_DOMAIN_CPU_STATS_SYSTEMTIME' file='libvirt'>
      <info><![CDATA[cpu time charged to system instructions in nanoseconds, as a ullong]]></info>
    </macro>
    <macro name='VIR_DOMAIN_CPU_STATS_USERTIME' file='libvirt'>
      <info><![CDATA[cpu time charged to user instructions in nanoseconds, as a ullong]]></info>
    </macro>
    <macro name='VIR_DOMAIN_CPU_STATS_VCPUTIME' file='libvirt'>
      <info><![CDATA[vcpu usage in nanoseconds (cpu_time excluding hypervisor time), as a ullong]]></info>
    </macro>
    <macro name='VIR_DOMAIN_EVENT_CALLBACK' file='libvirt'>
      <info><![CDATA[Used to cast the event specific callback into the generic one for use for virConnectDomainEventRegisterAny()]]></info>
    </macro>
    <macro name='VIR_DOMAIN_JOB_COMPRESSION_BYTES' file='libvirt'>
      <info><![CDATA[virDomainGetJobStats field: number of compressed bytes transferred since the beginning of migration, as VIR_TYPED_PARAM_ULLONG.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_JOB_COMPRESSION_CACHE' file='libvirt'>
      <info><![CDATA[virDomainGetJobStats field: size of the cache (in bytes) used for compressing repeatedly transferred memory pages during live migration, as VIR_TYPED_PARAM_ULLONG.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_JOB_COMPRESSION_CACHE_MISSES' file='libvirt'>
      <info><![CDATA[virDomainGetJobStats field: number of repeatedly changing pages that were not found in compression cache and thus could not be compressed, as VIR_TYPED_PARAM_ULLONG.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_JOB_COMPRESSION_OVERFLOW' file='libvirt'>
      <info><![CDATA[virDomainGetJobStats field: number of repeatedly changing pages that were found in compression cache but were sent uncompressed because the result of compression was larger than the original page as a whole, as VIR_TYPED_PARAM_ULLONG.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_JOB_COMPRESSION_PAGES' file='libvirt'>
      <info><![CDATA[virDomainGetJobStats field: number of compressed pages transferred since the beginning of migration, as VIR_TYPED_PARAM_ULLONG.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_JOB_DATA_PROCESSED' file='libvirt'>
      <info><![CDATA[virDomainGetJobStats field: number of bytes transferred from the beginning of the job, as VIR_TYPED_PARAM_ULLONG.  This field corresponds to dataProcessed field in virDomainJobInfo.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_JOB_DATA_REMAINING' file='libvirt'>
      <info><![CDATA[virDomainGetJobStats field: number of bytes that still need to be transferred, as VIR_TYPED_PARAM_ULLONG.  This field corresponds to dataRemaining field in virDomainJobInfo.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_JOB_DATA_TOTAL' file='libvirt'>
      <info><![CDATA[virDomainGetJobStats field: total number of bytes supposed to be transferred, as VIR_TYPED_PARAM_ULLONG. For VIR_DOMAIN_JOB_UNBOUNDED jobs, this may be less than the sum of VIR_DOMAIN_JOB_DATA_PROCESSED and VIR_DOMAIN_JOB_DATA_REMAINING in the event that the hypervisor has to repeat some data, e.g., due to dirtied pages during migration. For VIR_DOMAIN_JOB_BOUNDED jobs, VIR_DOMAIN_JOB_DATA_TOTAL shall always equal VIR_DOMAIN_JOB_DATA_PROCESSED + VIR_DOMAIN_JOB_DATA_REMAINING.  This field corresponds to dataTotal field in virDomainJobInfo.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_JOB_DISK_PROCESSED' file='libvirt'>
      <info><![CDATA[virDomainGetJobStats field: as VIR_DOMAIN_JOB_DATA_PROCESSED but only tracking guest disk progress, as VIR_TYPED_PARAM_ULLONG.  This field corresponds to fileProcessed field in virDomainJobInfo.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_JOB_DISK_REMAINING' file='libvirt'>
      <info><![CDATA[virDomainGetJobStats field: as VIR_DOMAIN_JOB_DATA_REMAINING but only tracking guest disk progress, as VIR_TYPED_PARAM_ULLONG.  This field corresponds to fileRemaining field in virDomainJobInfo.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_JOB_DISK_TOTAL' file='libvirt'>
      <info><![CDATA[virDomainGetJobStats field: as VIR_DOMAIN_JOB_DATA_TOTAL but only tracking guest disk progress, as VIR_TYPED_PARAM_ULLONG.  This field corresponds to fileTotal field in virDomainJobInfo.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_JOB_DOWNTIME' file='libvirt'>
      <info><![CDATA[virDomainGetJobStats field: downtime (ms) that is expected to happen during migration, as VIR_TYPED_PARAM_ULLONG.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_JOB_MEMORY_CONSTANT' file='libvirt'>
      <info><![CDATA[virDomainGetJobStats field: number of pages filled with a constant byte (all bytes in a single page are identical) transferred since the beginning of the migration job, as VIR_TYPED_PARAM_ULLONG.  The most common example of such pages are zero pages, i.e., pages filled with zero bytes.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_JOB_MEMORY_NORMAL' file='libvirt'>
      <info><![CDATA[virDomainGetJobStats field: number of pages that were transferred without any kind of compression (i.e., pages which were not filled with a constant byte and which could not be compressed) transferred since the beginning of the migration job, as VIR_TYPED_PARAM_ULLONG.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_JOB_MEMORY_NORMAL_BYTES' file='libvirt'>
      <info><![CDATA[virDomainGetJobStats field: number of bytes transferred as normal pages, as VIR_TYPED_PARAM_ULLONG.  See VIR_DOMAIN_JOB_MEMORY_NORMAL for more details.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_JOB_MEMORY_PROCESSED' file='libvirt'>
      <info><![CDATA[virDomainGetJobStats field: as VIR_DOMAIN_JOB_DATA_PROCESSED but only tracking guest memory progress, as VIR_TYPED_PARAM_ULLONG.  This field corresponds to memProcessed field in virDomainJobInfo.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_JOB_MEMORY_REMAINING' file='libvirt'>
      <info><![CDATA[virDomainGetJobStats field: as VIR_DOMAIN_JOB_DATA_REMAINING but only tracking guest memory progress, as VIR_TYPED_PARAM_ULLONG.  This field corresponds to memRemaining field in virDomainJobInfo.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_JOB_MEMORY_TOTAL' file='libvirt'>
      <info><![CDATA[virDomainGetJobStats field: as VIR_DOMAIN_JOB_DATA_TOTAL but only tracking guest memory progress, as VIR_TYPED_PARAM_ULLONG.  This field corresponds to memTotal field in virDomainJobInfo.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_JOB_TIME_ELAPSED' file='libvirt'>
      <info><![CDATA[virDomainGetJobStats field: time (ms) since the beginning of the job, as VIR_TYPED_PARAM_ULLONG.  This field corresponds to timeElapsed field in virDomainJobInfo.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_JOB_TIME_REMAINING' file='libvirt'>
      <info><![CDATA[virDomainGetJobStats field: remaining time (ms) for VIR_DOMAIN_JOB_BOUNDED jobs, as VIR_TYPED_PARAM_ULLONG.  This field corresponds to timeRemaining field in virDomainJobInfo.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_MEMORY_FIELD_LENGTH' file='libvirt'>
      <info><![CDATA[Macro providing the field length of virMemoryParameter.  Provided for backwards compatibility; VIR_TYPED_PARAM_FIELD_LENGTH is the preferred value since 0.9.2.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_MEMORY_HARD_LIMIT' file='libvirt'>
      <info><![CDATA[Macro for the memory tunable hard_limit: it represents the maximum memory the guest can use, as a ullong.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_MEMORY_MIN_GUARANTEE' file='libvirt'>
      <info><![CDATA[Macro for the memory tunable min_guarantee: it represents the minimum memory guaranteed to be reserved for the guest, as a ullong.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_MEMORY_PARAM_UNLIMITED' file='libvirt'>
      <info><![CDATA[Macro providing the virMemoryParameter value that indicates "unlimited"]]></info>
    </macro>
    <macro name='VIR_DOMAIN_MEMORY_SOFT_LIMIT' file='libvirt'>
      <info><![CDATA[Macro for the memory tunable soft_limit: it represents the memory upper limit enforced during memory contention, as a ullong.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_MEMORY_SWAP_HARD_LIMIT' file='libvirt'>
      <info><![CDATA[Macro for the swap tunable swap_hard_limit: it represents the maximum swap plus memory the guest can use, as a ullong. This limit has to be more than VIR_DOMAIN_MEMORY_HARD_LIMIT.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_NUMA_MODE' file='libvirt'>
      <info><![CDATA[Macro for typed parameter name that lists the numa mode of a domain, as an int containing a virDomainNumatuneMemMode value.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_NUMA_NODESET' file='libvirt'>
      <info><![CDATA[Macro for typed parameter name that lists the numa nodeset of a domain, as a string.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_SCHEDULER_CAP' file='libvirt'>
      <info><![CDATA[Macro represents the maximum scheduler cap, when using the credit scheduler, as a uint.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_SCHEDULER_CPU_SHARES' file='libvirt'>
      <info><![CDATA[Macro represents proportional weight of the scheduler used on the host cpu, when using the posix scheduler, as a ullong.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_SCHEDULER_EMULATOR_PERIOD' file='libvirt'>
      <info><![CDATA[Macro represents the enforcement period for a quota in microseconds, when using the posix scheduler, for all emulator activity not tied to vcpus, as a ullong.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_SCHEDULER_EMULATOR_QUOTA' file='libvirt'>
      <info><![CDATA[Macro represents the maximum bandwidth to be used within a period for all emulator activity not tied to vcpus, when using the posix scheduler, as an llong.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_SCHEDULER_LIMIT' file='libvirt'>
      <info><![CDATA[Macro represents the scheduler limit value, when using the allocation scheduler, as an llong.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_SCHEDULER_RESERVATION' file='libvirt'>
      <info><![CDATA[Macro represents the scheduler reservation value, when using the allocation scheduler, as an llong.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_SCHEDULER_SHARES' file='libvirt'>
      <info><![CDATA[Macro represents the scheduler shares value, when using the allocation scheduler, as an int.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_SCHEDULER_VCPU_PERIOD' file='libvirt'>
      <info><![CDATA[Macro represents the enforcement period for a quota, in microseconds, for vcpus only, when using the posix scheduler, as a ullong.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_SCHEDULER_VCPU_QUOTA' file='libvirt'>
      <info><![CDATA[Macro represents the maximum bandwidth to be used within a period for vcpus only, when using the posix scheduler, as an llong.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_SCHEDULER_WEIGHT' file='libvirt'>
      <info><![CDATA[Macro represents the relative weight,  when using the credit scheduler, as a uint.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_SCHED_FIELD_LENGTH' file='libvirt'>
      <info><![CDATA[Macro providing the field length of virSchedParameter.  Provided for backwards compatibility; VIR_TYPED_PARAM_FIELD_LENGTH is the preferred value since 0.9.2.]]></info>
    </macro>
    <macro name='VIR_DOMAIN_SEND_KEY_MAX_KEYS' file='libvirt'>
      <info><![CDATA[Maximum number of keycodes that can be sent in one virDomainSendKey() call.]]></info>
    </macro>
    <macro name='VIR_GET_CPUMAP' file='libvirt'>
      <info><![CDATA[This macro is to be used in conjunction with virDomainGetVcpus() and virDomainPinVcpu() APIs. VIR_GET_CPUMAP macro returns a pointer to the cpumap of the specified vcpu from cpumaps array.]]></info>
      <arg name='cpumaps' info='pointer to an array of cpumap (in 8-bit bytes) (IN)'/>
      <arg name='maplen' info='the length (in bytes) of one cpumap'/>
      <arg name='vcpu' info='the virtual CPU number'/>
    </macro>
    <macro name='VIR_MIGRATE_PARAM_BANDWIDTH' file='libvirt'>
      <info><![CDATA[virDomainMigrate* params field: the maximum bandwidth (in MiB/s) that will be used for migration as VIR_TYPED_PARAM_ULLONG. If set to 0 or omitted, libvirt will choose a suitable default. Some hypervisors do not support this feature and will return an error if this field is used and is not 0.]]></info>
    </macro>
    <macro name='VIR_MIGRATE_PARAM_DEST_NAME' file='libvirt'>
      <info><![CDATA[virDomainMigrate* params field: the name to be used for the domain on the destination host as VIR_TYPED_PARAM_STRING. Omitting this parameter keeps the domain name the same. This field is only allowed to be used with hypervisors that support domain renaming during migration.]]></info>
    </macro>
    <macro name='VIR_MIGRATE_PARAM_DEST_XML' file='libvirt'>
      <info><![CDATA[virDomainMigrate* params field: the new configuration to be used for the domain on the destination host as VIR_TYPED_PARAM_STRING. The configuration must include an identical set of virtual devices, to ensure a stable guest ABI across migration. Only parameters related to host side configuration can be changed in the XML. Hypervisors which support this field will forbid migration if the provided XML would cause a change in the guest ABI. This field cannot be used to rename the domain during migration (use VIR_MIGRATE_PARAM_DEST_NAME field for that purpose). Domain name in the destination XML must match the original domain name.  Omitting this parameter keeps the original domain configuration. Using this field with hypervisors that do not support changing domain configuration during migration will result in a failure.]]></info>
    </macro>
    <macro name='VIR_MIGRATE_PARAM_GRAPHICS_URI' file='libvirt'>
      <info><![CDATA[virDomainMigrate* params field: URI to use for migrating client's connection to domain's graphical console as VIR_TYPED_PARAM_STRING. If specified, the client will be asked to automatically reconnect using these parameters instead of the automatically computed ones. This can be useful if, e.g., the client does not have a direct access to the network virtualization hosts are connected to and needs to connect through a proxy. The URI is formed as follows:  protocol://hostname[:port]/[?parameters]  where protocol is either "spice" or "vnc" and parameters is a list of protocol specific parameters separated by '&'. Currently recognized parameters are "tlsPort" and "tlsSubject". For example,  spice://target.host.com:1234/?tlsPort=4567]]></info>
    </macro>
    <macro name='VIR_MIGRATE_PARAM_LISTEN_ADDRESS' file='libvirt'>
      <info><![CDATA[virDomainMigrate* params field: The listen address that hypervisor on the destination side should bind to for incoming migration. Both IPv4 and IPv6 addresses are accepted as well as hostnames (the resolving is done on destination). Some hypervisors do not support this feature and will return an error if this field is used.]]></info>
    </macro>
    <macro name='VIR_MIGRATE_PARAM_URI' file='libvirt'>
      <info><![CDATA[virDomainMigrate* params field: URI to use for initiating domain migration as VIR_TYPED_PARAM_STRING. It takes a hypervisor specific format. The uri_transports element of the hypervisor capabilities XML includes details of the supported URI schemes. When omitted libvirt will auto-generate suitable default URI. It is typically only necessary to specify this URI if the destination host has multiple interfaces and a specific interface is required to transmit migration data.  This filed may not be used when VIR_MIGRATE_TUNNELLED flag is set.]]></info>
    </macro>
    <macro name='VIR_NETWORK_EVENT_CALLBACK' file='libvirt'>
      <info><![CDATA[Used to cast the event specific callback into the generic one for use for virConnectNetworkEventRegisterAny()]]></info>
    </macro>
    <macro name='VIR_NODEINFO_MAXCPUS' file='libvirt'>
      <info><![CDATA[This macro is to calculate the total number of CPUs supported but not necessary active in the host.]]></info>
      <arg name='nodeinfo' info='virNodeInfo instance'/>
    </macro>
    <macro name='VIR_NODE_CPU_STATS_FIELD_LENGTH' file='libvirt'>
      <info><![CDATA[Macro providing the field length of virNodeCPUStats]]></info>
    </macro>
    <macro name='VIR_NODE_CPU_STATS_IDLE' file='libvirt'>
      <info><![CDATA[The cumulative idle CPU time, since the node booting up (in nanoseconds).]]></info>
    </macro>
    <macro name='VIR_NODE_CPU_STATS_INTR' file='libvirt'>
      <info><![CDATA[The cumulative interrupt CPU time, since the node booting up (in nanoseconds).]]></info>
    </macro>
    <macro name='VIR_NODE_CPU_STATS_IOWAIT' file='libvirt'>
      <info><![CDATA[The cumulative I/O wait CPU time, since the node booting up (in nanoseconds).]]></info>
    </macro>
    <macro name='VIR_NODE_CPU_STATS_KERNEL' file='libvirt'>
      <info><![CDATA[Macro for the cumulative CPU time which was spent by the kernel, since the node booting up (in nanoseconds).]]></info>
    </macro>
    <macro name='VIR_NODE_CPU_STATS_USER' file='libvirt'>
      <info><![CDATA[The cumulative CPU time which was spent by user processes, since the node booting up (in nanoseconds).]]></info>
    </macro>
    <macro name='VIR_NODE_CPU_STATS_UTILIZATION' file='libvirt'>
      <info><![CDATA[The CPU utilization of a node. The usage value is in percent and 100% represents all CPUs of the node.]]></info>
    </macro>
    <macro name='VIR_NODE_MEMORY_STATS_BUFFERS' file='libvirt'>
      <info><![CDATA[Macro for the buffer memory: On Linux, it is only returned in case of VIR_NODE_MEMORY_STATS_ALL_CELLS.]]></info>
    </macro>
    <macro name='VIR_NODE_MEMORY_STATS_CACHED' file='libvirt'>
      <info><![CDATA[Macro for the cached memory: On Linux, it is only returned in case of VIR_NODE_MEMORY_STATS_ALL_CELLS.]]></info>
    </macro>
    <macro name='VIR_NODE_MEMORY_STATS_FIELD_LENGTH' file='libvirt'>
      <info><![CDATA[Macro providing the field length of virNodeMemoryStats]]></info>
    </macro>
    <macro name='VIR_NODE_MEMORY_STATS_FREE' file='libvirt'>
      <info><![CDATA[Macro for the free memory of specified cell: On Linux, it includes buffer and cached memory, in case of VIR_NODE_MEMORY_STATS_ALL_CELLS.]]></info>
    </macro>
    <macro name='VIR_NODE_MEMORY_STATS_TOTAL' file='libvirt'>
      <info><![CDATA[Macro for the total memory of specified cell: it represents the maximum memory.]]></info>
    </macro>
    <macro name='VIR_SECURITY_DOI_BUFLEN' file='libvirt'>
      <info><![CDATA[Macro providing the maximum length of the virSecurityModel doi string.]]></info>
    </macro>
    <macro name='VIR_SECURITY_LABEL_BUFLEN' file='libvirt'>
      <info><![CDATA[Macro providing the maximum length of the virSecurityLabel label string. Note that this value is based on that used by Labeled NFS.]]></info>
    </macro>
    <macro name='VIR_SECURITY_MODEL_BUFLEN' file='libvirt'>
      <info><![CDATA[Macro providing the maximum length of the virSecurityModel model string.]]></info>
    </macro>
    <macro name='VIR_TYPED_PARAM_FIELD_LENGTH' file='libvirt'>
      <info><![CDATA[Macro providing the field length of virTypedParameter name]]></info>
    </macro>
    <macro name='VIR_UNUSE_CPU' file='libvirt'>
      <info><![CDATA[This macro is to be used in conjunction with virDomainPinVcpu() API. It resets the bit (CPU not usable) of the related cpu in cpumap.]]></info>
      <arg name='cpumap' info='pointer to a bit map of real CPUs (in 8-bit bytes) (IN/OUT)'/>
      <arg name='cpu' info='the physical CPU number'/>
    </macro>
    <macro name='VIR_USE_CPU' file='libvirt'>
      <info><![CDATA[This macro is to be used in conjunction with virDomainPinVcpu() API. It sets the bit (CPU usable) of the related cpu in cpumap.]]></info>
      <arg name='cpumap' info='pointer to a bit map of real CPUs (in 8-bit bytes) (IN/OUT)'/>
      <arg name='cpu' info='the physical CPU number'/>
    </macro>
    <macro name='VIR_UUID_BUFLEN' file='libvirt'>
      <info><![CDATA[This macro provides the length of the buffer required for virDomainGetUUID()]]></info>
    </macro>
    <macro name='VIR_UUID_STRING_BUFLEN' file='libvirt'>
      <info><![CDATA[This macro provides the length of the buffer required for virDomainGetUUIDString()]]></info>
    </macro>
    <macro name='_virBlkioParameter' file='libvirt'>
    </macro>
    <macro name='_virMemoryParameter' file='libvirt'>
    </macro>
    <macro name='_virSchedParameter' file='libvirt'>
    </macro>
    <enum name='VIR_CONNECT_BASELINE_CPU_EXPAND_FEATURES' file='libvirt' value='1' type='virConnectBaselineCPUFlags' info='show all features'/>
    <enum name='VIR_CONNECT_CLOSE_REASON_CLIENT' file='libvirt' value='3' type='virConnectCloseReason' info='Client requested it'/>
    <enum name='VIR_CONNECT_CLOSE_REASON_EOF' file='libvirt' value='1' type='virConnectCloseReason' info='End-of-file from server'/>
    <enum name='VIR_CONNECT_CLOSE_REASON_ERROR' file='libvirt' value='0' type='virConnectCloseReason' info='Misc I/O error'/>
    <enum name='VIR_CONNECT_CLOSE_REASON_KEEPALIVE' file='libvirt' value='2' type='virConnectCloseReason' info='Keepalive timer triggered'/>
    <enum name='VIR_CONNECT_CLOSE_REASON_LAST' file='libvirt' value='4' type='virConnectCloseReason'/>
    <enum name='VIR_CONNECT_LIST_DOMAINS_ACTIVE' file='libvirt' value='1' type='virConnectListAllDomainsFlags'/>
    <enum name='VIR_CONNECT_LIST_DOMAINS_AUTOSTART' file='libvirt' value='1024' type='virConnectListAllDomainsFlags'/>
    <enum name='VIR_CONNECT_LIST_DOMAINS_HAS_SNAPSHOT' file='libvirt' value='4096' type='virConnectListAllDomainsFlags'/>
    <enum name='VIR_CONNECT_LIST_DOMAINS_INACTIVE' file='libvirt' value='2' type='virConnectListAllDomainsFlags'/>
    <enum name='VIR_CONNECT_LIST_DOMAINS_MANAGEDSAVE' file='libvirt' value='256' type='virConnectListAllDomainsFlags'/>
    <enum name='VIR_CONNECT_LIST_DOMAINS_NO_AUTOSTART' file='libvirt' value='2048' type='virConnectListAllDomainsFlags'/>
    <enum name='VIR_CONNECT_LIST_DOMAINS_NO_MANAGEDSAVE' file='libvirt' value='512' type='virConnectListAllDomainsFlags'/>
    <enum name='VIR_CONNECT_LIST_DOMAINS_NO_SNAPSHOT' file='libvirt' value='8192' type='virConnectListAllDomainsFlags'/>
    <enum name='VIR_CONNECT_LIST_DOMAINS_OTHER' file='libvirt' value='128' type='virConnectListAllDomainsFlags'/>
    <enum name='VIR_CONNECT_LIST_DOMAINS_PAUSED' file='libvirt' value='32' type='virConnectListAllDomainsFlags'/>
    <enum name='VIR_CONNECT_LIST_DOMAINS_PERSISTENT' file='libvirt' value='4' type='virConnectListAllDomainsFlags'/>
    <enum name='VIR_CONNECT_LIST_DOMAINS_RUNNING' file='libvirt' value='16' type='virConnectListAllDomainsFlags'/>
    <enum name='VIR_CONNECT_LIST_DOMAINS_SHUTOFF' file='libvirt' value='64' type='virConnectListAllDomainsFlags'/>
    <enum name='VIR_CONNECT_LIST_DOMAINS_TRANSIENT' file='libvirt' value='8' type='virConnectListAllDomainsFlags'/>
    <enum name='VIR_CONNECT_LIST_INTERFACES_ACTIVE' file='libvirt' value='2' type='virConnectListAllInterfacesFlags'/>
    <enum name='VIR_CONNECT_LIST_INTERFACES_INACTIVE' file='libvirt' value='1' type='virConnectListAllInterfacesFlags'/>
    <enum name='VIR_CONNECT_LIST_NETWORKS_ACTIVE' file='libvirt' value='2' type='virConnectListAllNetworksFlags'/>
    <enum name='VIR_CONNECT_LIST_NETWORKS_AUTOSTART' file='libvirt' value='16' type='virConnectListAllNetworksFlags'/>
    <enum name='VIR_CONNECT_LIST_NETWORKS_INACTIVE' file='libvirt' value='1' type='virConnectListAllNetworksFlags'/>
    <enum name='VIR_CONNECT_LIST_NETWORKS_NO_AUTOSTART' file='libvirt' value='32' type='virConnectListAllNetworksFlags'/>
    <enum name='VIR_CONNECT_LIST_NETWORKS_PERSISTENT' file='libvirt' value='4' type='virConnectListAllNetworksFlags'/>
    <enum name='VIR_CONNECT_LIST_NETWORKS_TRANSIENT' file='libvirt' value='8' type='virConnectListAllNetworksFlags'/>
    <enum name='VIR_CONNECT_LIST_NODE_DEVICES_CAP_FC_HOST' file='libvirt' value='512' type='virConnectListAllNodeDeviceFlags' info='FC Host Bus Adapter'/>
    <enum name='VIR_CONNECT_LIST_NODE_DEVICES_CAP_NET' file='libvirt' value='16' type='virConnectListAllNodeDeviceFlags' info='Network device'/>
    <enum name='VIR_CONNECT_LIST_NODE_DEVICES_CAP_PCI_DEV' file='libvirt' value='2' type='virConnectListAllNodeDeviceFlags' info='PCI device'/>
    <enum name='VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI' file='libvirt' value='128' type='virConnectListAllNodeDeviceFlags' info='SCSI device'/>
    <enum name='VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI_GENERIC' file='libvirt' value='2048' type='virConnectListAllNodeDeviceFlags' info='Capable of scsi_generic'/>
    <enum name='VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI_HOST' file='libvirt' value='32' type='virConnectListAllNodeDeviceFlags' info='SCSI Host Bus Adapter'/>
    <enum name='VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI_TARGET' file='libvirt' value='64' type='virConnectListAllNodeDeviceFlags' info='SCSI Target'/>
    <enum name='VIR_CONNECT_LIST_NODE_DEVICES_CAP_STORAGE' file='libvirt' value='256' type='virConnectListAllNodeDeviceFlags' info='Storage device'/>
    <enum name='VIR_CONNECT_LIST_NODE_DEVICES_CAP_SYSTEM' file='libvirt' value='1' type='virConnectListAllNodeDeviceFlags' info='System capability'/>
    <enum name='VIR_CONNECT_LIST_NODE_DEVICES_CAP_USB_DEV' file='libvirt' value='4' type='virConnectListAllNodeDeviceFlags' info='USB device'/>
    <enum name='VIR_CONNECT_LIST_NODE_DEVICES_CAP_USB_INTERFACE' file='libvirt' value='8' type='virConnectListAllNodeDeviceFlags' info='USB interface'/>
    <enum name='VIR_CONNECT_LIST_NODE_DEVICES_CAP_VPORTS' file='libvirt' value='1024' type='virConnectListAllNodeDeviceFlags' info='Capable of vport'/>
    <enum name='VIR_CONNECT_LIST_SECRETS_EPHEMERAL' file='libvirt' value='1' type='virConnectListAllSecretsFlags' info='kept in memory, never
stored persistently'/>
    <enum name='VIR_CONNECT_LIST_SECRETS_NO_EPHEMERAL' file='libvirt' value='2' type='virConnectListAllSecretsFlags'/>
    <enum name='VIR_CONNECT_LIST_SECRETS_NO_PRIVATE' file='libvirt' value='8' type='virConnectListAllSecretsFlags'/>
    <enum name='VIR_CONNECT_LIST_SECRETS_PRIVATE' file='libvirt' value='4' type='virConnectListAllSecretsFlags' info='not revealed to any caller
of libvirt, nor to any other
node'/>
    <enum name='VIR_CONNECT_LIST_STORAGE_POOLS_ACTIVE' file='libvirt' value='2' type='virConnectListAllStoragePoolsFlags'/>
    <enum name='VIR_CONNECT_LIST_STORAGE_POOLS_AUTOSTART' file='libvirt' value='16' type='virConnectListAllStoragePoolsFlags'/>
    <enum name='VIR_CONNECT_LIST_STORAGE_POOLS_DIR' file='libvirt' value='64' type='virConnectListAllStoragePoolsFlags'/>
    <enum name='VIR_CONNECT_LIST_STORAGE_POOLS_DISK' file='libvirt' value='1024' type='virConnectListAllStoragePoolsFlags'/>
    <enum name='VIR_CONNECT_LIST_STORAGE_POOLS_FS' file='libvirt' value='128' type='virConnectListAllStoragePoolsFlags'/>
    <enum name='VIR_CONNECT_LIST_STORAGE_POOLS_GLUSTER' file='libvirt' value='65536' type='virConnectListAllStoragePoolsFlags'/>
    <enum name='VIR_CONNECT_LIST_STORAGE_POOLS_INACTIVE' file='libvirt' value='1' type='virConnectListAllStoragePoolsFlags'/>
    <enum name='VIR_CONNECT_LIST_STORAGE_POOLS_ISCSI' file='libvirt' value='2048' type='virConnectListAllStoragePoolsFlags'/>
    <enum name='VIR_CONNECT_LIST_STORAGE_POOLS_LOGICAL' file='libvirt' value='512' type='virConnectListAllStoragePoolsFlags'/>
    <enum name='VIR_CONNECT_LIST_STORAGE_POOLS_MPATH' file='libvirt' value='8192' type='virConnectListAllStoragePoolsFlags'/>
    <enum name='VIR_CONNECT_LIST_STORAGE_POOLS_NETFS' file='libvirt' value='256' type='virConnectListAllStoragePoolsFlags'/>
    <enum name='VIR_CONNECT_LIST_STORAGE_POOLS_NO_AUTOSTART' file='libvirt' value='32' type='virConnectListAllStoragePoolsFlags' info='List pools by type'/>
    <enum name='VIR_CONNECT_LIST_STORAGE_POOLS_PERSISTENT' file='libvirt' value='4' type='virConnectListAllStoragePoolsFlags'/>
    <enum name='VIR_CONNECT_LIST_STORAGE_POOLS_RBD' file='libvirt' value='16384' type='virConnectListAllStoragePoolsFlags'/>
    <enum name='VIR_CONNECT_LIST_STORAGE_POOLS_SCSI' file='libvirt' value='4096' type='virConnectListAllStoragePoolsFlags'/>
    <enum name='VIR_CONNECT_LIST_STORAGE_POOLS_SHEEPDOG' file='libvirt' value='32768' type='virConnectListAllStoragePoolsFlags'/>
    <enum name='VIR_CONNECT_LIST_STORAGE_POOLS_TRANSIENT' file='libvirt' value='8' type='virConnectListAllStoragePoolsFlags'/>
    <enum name='VIR_CONNECT_NO_ALIASES' file='libvirt' value='2' type='virConnectFlags' info='Don&apos;t try to resolve URI aliases'/>
    <enum name='VIR_CONNECT_RO' file='libvirt' value='1' type='virConnectFlags' info='A readonly connection'/>
    <enum name='VIR_CPU_COMPARE_ERROR' file='libvirt' value='-1' type='virCPUCompareResult'/>
    <enum name='VIR_CPU_COMPARE_IDENTICAL' file='libvirt' value='1' type='virCPUCompareResult'/>
    <enum name='VIR_CPU_COMPARE_INCOMPATIBLE' file='libvirt' value='0' type='virCPUCompareResult'/>
    <enum name='VIR_CPU_COMPARE_LAST' file='libvirt' value='3' type='virCPUCompareResult'/>
    <enum name='VIR_CPU_COMPARE_SUPERSET' file='libvirt' value='2' type='virCPUCompareResult'/>
    <enum name='VIR_CRED_AUTHNAME' file='libvirt' value='2' type='virConnectCredentialType' info='Identify to authorize as'/>
    <enum name='VIR_CRED_CNONCE' file='libvirt' value='4' type='virConnectCredentialType' info='client supplies a nonce'/>
    <enum name='VIR_CRED_ECHOPROMPT' file='libvirt' value='6' type='virConnectCredentialType' info='Challenge response'/>
    <enum name='VIR_CRED_EXTERNAL' file='libvirt' value='9' type='virConnectCredentialType' info='Externally managed credential'/>
    <enum name='VIR_CRED_LANGUAGE' file='libvirt' value='3' type='virConnectCredentialType' info='RFC 1766 languages, comma separated'/>
    <enum name='VIR_CRED_LAST' file='libvirt' value='10' type='virConnectCredentialType' info='More may be added - expect the unexpected'/>
    <enum name='VIR_CRED_NOECHOPROMPT' file='libvirt' value='7' type='virConnectCredentialType' info='Challenge response'/>
    <enum name='VIR_CRED_PASSPHRASE' file='libvirt' value='5' type='virConnectCredentialType' info='Passphrase secret'/>
    <enum name='VIR_CRED_REALM' file='libvirt' value='8' type='virConnectCredentialType' info='Authentication realm'/>
    <enum name='VIR_CRED_USERNAME' file='libvirt' value='1' type='virConnectCredentialType' info='Identity to act as'/>
    <enum name='VIR_DOMAIN_AFFECT_CONFIG' file='libvirt' value='2' type='virDomainModificationImpact' info='Affect persistent domain state.  1 &lt;&lt; 2 is reserved for virTypedParameterFlags'/>
    <enum name='VIR_DOMAIN_AFFECT_CURRENT' file='libvirt' value='0' type='virDomainModificationImpact' info='Affect current domain state.'/>
    <enum name='VIR_DOMAIN_AFFECT_LIVE' file='libvirt' value='1' type='virDomainModificationImpact' info='Affect running domain state.'/>
    <enum name='VIR_DOMAIN_BLKIO_PARAM_BOOLEAN' file='libvirt' value='VIR_TYPED_PARAM_BOOLEAN' type='virBlkioParameterType'/>
    <enum name='VIR_DOMAIN_BLKIO_PARAM_DOUBLE' file='libvirt' value='VIR_TYPED_PARAM_DOUBLE' type='virBlkioParameterType'/>
    <enum name='VIR_DOMAIN_BLKIO_PARAM_INT' file='libvirt' value='VIR_TYPED_PARAM_INT' type='virBlkioParameterType'/>
    <enum name='VIR_DOMAIN_BLKIO_PARAM_LLONG' file='libvirt' value='VIR_TYPED_PARAM_LLONG' type='virBlkioParameterType'/>
    <enum name='VIR_DOMAIN_BLKIO_PARAM_UINT' file='libvirt' value='VIR_TYPED_PARAM_UINT' type='virBlkioParameterType'/>
    <enum name='VIR_DOMAIN_BLKIO_PARAM_ULLONG' file='libvirt' value='VIR_TYPED_PARAM_ULLONG' type='virBlkioParameterType'/>
    <enum name='VIR_DOMAIN_BLOCKED' file='libvirt' value='2' type='virDomainState' info='the domain is blocked on resource'/>
    <enum name='VIR_DOMAIN_BLOCKED_LAST' file='libvirt' value='1' type='virDomainBlockedReason'/>
    <enum name='VIR_DOMAIN_BLOCKED_UNKNOWN' file='libvirt' value='0' type='virDomainBlockedReason' info='the reason is unknown'/>
    <enum name='VIR_DOMAIN_BLOCK_COMMIT_DELETE' file='libvirt' value='2' type='virDomainBlockCommitFlags' info='Delete any files that are now
invalid after their contents
have been committed'/>
    <enum name='VIR_DOMAIN_BLOCK_COMMIT_SHALLOW' file='libvirt' value='1' type='virDomainBlockCommitFlags' info='NULL base means next backing
file, not whole chain'/>
    <enum name='VIR_DOMAIN_BLOCK_JOB_ABORT_ASYNC' file='libvirt' value='1' type='virDomainBlockJobAbortFlags'/>
    <enum name='VIR_DOMAIN_BLOCK_JOB_ABORT_PIVOT' file='libvirt' value='2' type='virDomainBlockJobAbortFlags'/>
    <enum name='VIR_DOMAIN_BLOCK_JOB_CANCELED' file='libvirt' value='2' type='virConnectDomainEventBlockJobStatus'/>
    <enum name='VIR_DOMAIN_BLOCK_JOB_COMPLETED' file='libvirt' value='0' type='virConnectDomainEventBlockJobStatus'/>
    <enum name='VIR_DOMAIN_BLOCK_JOB_FAILED' file='libvirt' value='1' type='virConnectDomainEventBlockJobStatus'/>
    <enum name='VIR_DOMAIN_BLOCK_JOB_LAST' file='libvirt' value='4' type='virConnectDomainEventBlockJobStatus'/>
    <enum name='VIR_DOMAIN_BLOCK_JOB_READY' file='libvirt' value='3' type='virConnectDomainEventBlockJobStatus'/>
    <enum name='VIR_DOMAIN_BLOCK_JOB_TYPE_COMMIT' file='libvirt' value='3' type='virDomainBlockJobType'/>
    <enum name='VIR_DOMAIN_BLOCK_JOB_TYPE_COPY' file='libvirt' value='2' type='virDomainBlockJobType'/>
    <enum name='VIR_DOMAIN_BLOCK_JOB_TYPE_LAST' file='libvirt' value='4' type='virDomainBlockJobType'/>
    <enum name='VIR_DOMAIN_BLOCK_JOB_TYPE_PULL' file='libvirt' value='1' type='virDomainBlockJobType'/>
    <enum name='VIR_DOMAIN_BLOCK_JOB_TYPE_UNKNOWN' file='libvirt' value='0' type='virDomainBlockJobType'/>
    <enum name='VIR_DOMAIN_BLOCK_REBASE_COPY' file='libvirt' value='8' type='virDomainBlockRebaseFlags' info='Start a copy job'/>
    <enum name='VIR_DOMAIN_BLOCK_REBASE_COPY_RAW' file='libvirt' value='4' type='virDomainBlockRebaseFlags' info='Make destination file raw'/>
    <enum name='VIR_DOMAIN_BLOCK_REBASE_REUSE_EXT' file='libvirt' value='2' type='virDomainBlockRebaseFlags' info='Reuse existing external
file for a copy'/>
    <enum name='VIR_DOMAIN_BLOCK_REBASE_SHALLOW' file='libvirt' value='1' type='virDomainBlockRebaseFlags' info='Limit copy to top of source
backing chain'/>
    <enum name='VIR_DOMAIN_BLOCK_RESIZE_BYTES' file='libvirt' value='1' type='virDomainBlockResizeFlags' info='size in bytes instead of KiB'/>
    <enum name='VIR_DOMAIN_CHANNEL_FORCE' file='libvirt' value='1' type='virDomainChannelFlags' info='abort a (possibly) active channel
connection to force a new
connection'/>
    <enum name='VIR_DOMAIN_CONSOLE_FORCE' file='libvirt' value='1' type='virDomainConsoleFlags' info='abort a (possibly) active console
connection to force a new
connection'/>
    <enum name='VIR_DOMAIN_CONSOLE_SAFE' file='libvirt' value='2' type='virDomainConsoleFlags' info='check if the console driver supports
safe console operations'/>
    <enum name='VIR_DOMAIN_CONTROL_ERROR' file='libvirt' value='3' type='virDomainControlState' info='unusable, domain cannot be fully operated'/>
    <enum name='VIR_DOMAIN_CONTROL_JOB' file='libvirt' value='1' type='virDomainControlState' info='background job is running (can be
monitored by virDomainGetJobInfo); only
limited set of commands may be allowed'/>
    <enum name='VIR_DOMAIN_CONTROL_LAST' file='libvirt' value='4' type='virDomainControlState'/>
    <enum name='VIR_DOMAIN_CONTROL_OCCUPIED' file='libvirt' value='2' type='virDomainControlState' info='occupied by a running command'/>
    <enum name='VIR_DOMAIN_CONTROL_OK' file='libvirt' value='0' type='virDomainControlState' info='operational, ready to accept commands'/>
    <enum name='VIR_DOMAIN_CORE_DUMP_FORMAT_KDUMP_LZO' file='libvirt' value='3' type='virDomainCoreDumpFormat' info='kdump-compressed format, with
 lzo compression'/>
    <enum name='VIR_DOMAIN_CORE_DUMP_FORMAT_KDUMP_SNAPPY' file='libvirt' value='4' type='virDomainCoreDumpFormat' info='kdump-compressed format, with
 snappy compression'/>
    <enum name='VIR_DOMAIN_CORE_DUMP_FORMAT_KDUMP_ZLIB' file='libvirt' value='2' type='virDomainCoreDumpFormat' info='kdump-compressed format, with
 zlib compression'/>
    <enum name='VIR_DOMAIN_CORE_DUMP_FORMAT_LAST' file='libvirt' value='5' type='virDomainCoreDumpFormat' info='NB: this enum value will increase over time as new events are
 added to the libvirt API. It reflects the last state supported
 by this version of the libvirt API.'/>
    <enum name='VIR_DOMAIN_CORE_DUMP_FORMAT_RAW' file='libvirt' value='1' type='virDomainCoreDumpFormat' info='dump guest memory in raw format'/>
    <enum name='VIR_DOMAIN_CRASHED' file='libvirt' value='6' type='virDomainState' info='the domain is crashed'/>
    <enum name='VIR_DOMAIN_CRASHED_LAST' file='libvirt' value='2' type='virDomainCrashedReason'/>
    <enum name='VIR_DOMAIN_CRASHED_PANICKED' file='libvirt' value='1' type='virDomainCrashedReason' info='domain panicked'/>
    <enum name='VIR_DOMAIN_CRASHED_UNKNOWN' file='libvirt' value='0' type='virDomainCrashedReason' info='crashed for unknown reason'/>
    <enum name='VIR_DOMAIN_DESTROY_DEFAULT' file='libvirt' value='0' type='virDomainDestroyFlagsValues' info='Default behavior - could lead to data loss!!'/>
    <enum name='VIR_DOMAIN_DESTROY_GRACEFUL' file='libvirt' value='1' type='virDomainDestroyFlagsValues' info='only SIGTERM, no SIGKILL'/>
    <enum name='VIR_DOMAIN_DEVICE_MODIFY_CONFIG' file='libvirt' value='VIR_DOMAIN_AFFECT_CONFIG' type='virDomainDeviceModifyFlags' info='Additionally, these flags may be bitwise-OR&apos;d in.'/>
    <enum name='VIR_DOMAIN_DEVICE_MODIFY_CURRENT' file='libvirt' value='VIR_DOMAIN_AFFECT_CURRENT' type='virDomainDeviceModifyFlags'/>
    <enum name='VIR_DOMAIN_DEVICE_MODIFY_FORCE' file='libvirt' value='4' type='virDomainDeviceModifyFlags' info='Forcibly modify device
(ex. force eject a cdrom)'/>
    <enum name='VIR_DOMAIN_DEVICE_MODIFY_LIVE' file='libvirt' value='VIR_DOMAIN_AFFECT_LIVE' type='virDomainDeviceModifyFlags'/>
    <enum name='VIR_DOMAIN_DISK_ERROR_LAST' file='libvirt' value='3' type='virDomainDiskErrorCode'/>
    <enum name='VIR_DOMAIN_DISK_ERROR_NONE' file='libvirt' value='0' type='virDomainDiskErrorCode' info='no error'/>
    <enum name='VIR_DOMAIN_DISK_ERROR_NO_SPACE' file='libvirt' value='2' type='virDomainDiskErrorCode' info='no space left on the device'/>
    <enum name='VIR_DOMAIN_DISK_ERROR_UNSPEC' file='libvirt' value='1' type='virDomainDiskErrorCode' info='unspecified I/O error'/>
    <enum name='VIR_DOMAIN_EVENT_CRASHED' file='libvirt' value='8' type='virDomainEventType'/>
    <enum name='VIR_DOMAIN_EVENT_CRASHED_LAST' file='libvirt' value='1' type='virDomainEventCrashedDetailType'/>
    <enum name='VIR_DOMAIN_EVENT_CRASHED_PANICKED' file='libvirt' value='0' type='virDomainEventCrashedDetailType' info='Guest was panicked'/>
    <enum name='VIR_DOMAIN_EVENT_DEFINED' file='libvirt' value='0' type='virDomainEventType'/>
    <enum name='VIR_DOMAIN_EVENT_DEFINED_ADDED' file='libvirt' value='0' type='virDomainEventDefinedDetailType' info='Newly created config file'/>
    <enum name='VIR_DOMAIN_EVENT_DEFINED_LAST' file='libvirt' value='2' type='virDomainEventDefinedDetailType'/>
    <enum name='VIR_DOMAIN_EVENT_DEFINED_UPDATED' file='libvirt' value='1' type='virDomainEventDefinedDetailType' info='Changed config file'/>
    <enum name='VIR_DOMAIN_EVENT_DISK_CHANGE_LAST' file='libvirt' value='2' type='virConnectDomainEventDiskChangeReason'/>
    <enum name='VIR_DOMAIN_EVENT_DISK_CHANGE_MISSING_ON_START' file='libvirt' value='0' type='virConnectDomainEventDiskChangeReason' info='oldSrcPath is set'/>
    <enum name='VIR_DOMAIN_EVENT_DISK_DROP_MISSING_ON_START' file='libvirt' value='1' type='virConnectDomainEventDiskChangeReason'/>
    <enum name='VIR_DOMAIN_EVENT_GRAPHICS_ADDRESS_IPV4' file='libvirt' value='1' type='virDomainEventGraphicsAddressType' info='IPv4 address'/>
    <enum name='VIR_DOMAIN_EVENT_GRAPHICS_ADDRESS_IPV6' file='libvirt' value='2' type='virDomainEventGraphicsAddressType' info='IPv6 address'/>
    <enum name='VIR_DOMAIN_EVENT_GRAPHICS_ADDRESS_LAST' file='libvirt' value='4' type='virDomainEventGraphicsAddressType'/>
    <enum name='VIR_DOMAIN_EVENT_GRAPHICS_ADDRESS_UNIX' file='libvirt' value='3' type='virDomainEventGraphicsAddressType' info='UNIX socket path'/>
    <enum name='VIR_DOMAIN_EVENT_GRAPHICS_CONNECT' file='libvirt' value='0' type='virDomainEventGraphicsPhase' info='Initial socket connection established'/>
    <enum name='VIR_DOMAIN_EVENT_GRAPHICS_DISCONNECT' file='libvirt' value='2' type='virDomainEventGraphicsPhase' info='Final socket disconnection'/>
    <enum name='VIR_DOMAIN_EVENT_GRAPHICS_INITIALIZE' file='libvirt' value='1' type='virDomainEventGraphicsPhase' info='Authentication &amp; setup completed'/>
    <enum name='VIR_DOMAIN_EVENT_GRAPHICS_LAST' file='libvirt' value='3' type='virDomainEventGraphicsPhase'/>
    <enum name='VIR_DOMAIN_EVENT_ID_BALLOON_CHANGE' file='libvirt' value='13' type='virDomainEventID' info='virConnectDomainEventBalloonChangeCallback'/>
    <enum name='VIR_DOMAIN_EVENT_ID_BLOCK_JOB' file='libvirt' value='8' type='virDomainEventID' info='virConnectDomainEventBlockJobCallback'/>
    <enum name='VIR_DOMAIN_EVENT_ID_CONTROL_ERROR' file='libvirt' value='7' type='virDomainEventID' info='virConnectDomainEventGenericCallback'/>
    <enum name='VIR_DOMAIN_EVENT_ID_DEVICE_REMOVED' file='libvirt' value='15' type='virDomainEventID' info='virConnectDomainEventDeviceRemovedCallback'/>
    <enum name='VIR_DOMAIN_EVENT_ID_DISK_CHANGE' file='libvirt' value='9' type='virDomainEventID' info='virConnectDomainEventDiskChangeCallback'/>
    <enum name='VIR_DOMAIN_EVENT_ID_GRAPHICS' file='libvirt' value='5' type='virDomainEventID' info='virConnectDomainEventGraphicsCallback'/>
    <enum name='VIR_DOMAIN_EVENT_ID_IO_ERROR' file='libvirt' value='4' type='virDomainEventID' info='virConnectDomainEventIOErrorCallback'/>
    <enum name='VIR_DOMAIN_EVENT_ID_IO_ERROR_REASON' file='libvirt' value='6' type='virDomainEventID' info='virConnectDomainEventIOErrorReasonCallback'/>
    <enum name='VIR_DOMAIN_EVENT_ID_LAST' file='libvirt' value='16' type='virDomainEventID' info='NB: this enum value will increase over time as new events are
 added to the libvirt API. It reflects the last event ID supported
 by this version of the libvirt API.'/>
    <enum name='VIR_DOMAIN_EVENT_ID_LIFECYCLE' file='libvirt' value='0' type='virDomainEventID' info='virConnectDomainEventCallback'/>
    <enum name='VIR_DOMAIN_EVENT_ID_PMSUSPEND' file='libvirt' value='12' type='virDomainEventID' info='virConnectDomainEventPMSuspendCallback'/>
    <enum name='VIR_DOMAIN_EVENT_ID_PMSUSPEND_DISK' file='libvirt' value='14' type='virDomainEventID' info='virConnectDomainEventPMSuspendDiskCallback'/>
    <enum name='VIR_DOMAIN_EVENT_ID_PMWAKEUP' file='libvirt' value='11' type='virDomainEventID' info='virConnectDomainEventPMWakeupCallback'/>
    <enum name='VIR_DOMAIN_EVENT_ID_REBOOT' file='libvirt' value='1' type='virDomainEventID' info='virConnectDomainEventGenericCallback'/>
    <enum name='VIR_DOMAIN_EVENT_ID_RTC_CHANGE' file='libvirt' value='2' type='virDomainEventID' info='virConnectDomainEventRTCChangeCallback'/>
    <enum name='VIR_DOMAIN_EVENT_ID_TRAY_CHANGE' file='libvirt' value='10' type='virDomainEventID' info='virConnectDomainEventTrayChangeCallback'/>
    <enum name='VIR_DOMAIN_EVENT_ID_WATCHDOG' file='libvirt' value='3' type='virDomainEventID' info='virConnectDomainEventWatchdogCallback'/>
    <enum name='VIR_DOMAIN_EVENT_IO_ERROR_LAST' file='libvirt' value='3' type='virDomainEventIOErrorAction'/>
    <enum name='VIR_DOMAIN_EVENT_IO_ERROR_NONE' file='libvirt' value='0' type='virDomainEventIOErrorAction' info='No action, IO error ignored'/>
    <enum name='VIR_DOMAIN_EVENT_IO_ERROR_PAUSE' file='libvirt' value='1' type='virDomainEventIOErrorAction' info='Guest CPUs are paused'/>
    <enum name='VIR_DOMAIN_EVENT_IO_ERROR_REPORT' file='libvirt' value='2' type='virDomainEventIOErrorAction' info='IO error reported to guest OS'/>
    <enum name='VIR_DOMAIN_EVENT_LAST' file='libvirt' value='9' type='virDomainEventType'/>
    <enum name='VIR_DOMAIN_EVENT_PMSUSPENDED' file='libvirt' value='7' type='virDomainEventType'/>
    <enum name='VIR_DOMAIN_EVENT_PMSUSPENDED_DISK' file='libvirt' value='1' type='virDomainEventPMSuspendedDetailType' info='Guest was PM suspended to disk'/>
    <enum name='VIR_DOMAIN_EVENT_PMSUSPENDED_LAST' file='libvirt' value='2' type='virDomainEventPMSuspendedDetailType'/>
    <enum name='VIR_DOMAIN_EVENT_PMSUSPENDED_MEMORY' file='libvirt' value='0' type='virDomainEventPMSuspendedDetailType' info='Guest was PM suspended to memory'/>
    <enum name='VIR_DOMAIN_EVENT_RESUMED' file='libvirt' value='4' type='virDomainEventType'/>
    <enum name='VIR_DOMAIN_EVENT_RESUMED_FROM_SNAPSHOT' file='libvirt' value='2' type='virDomainEventResumedDetailType' info='Resumed from snapshot'/>
    <enum name='VIR_DOMAIN_EVENT_RESUMED_LAST' file='libvirt' value='3' type='virDomainEventResumedDetailType'/>
    <enum name='VIR_DOMAIN_EVENT_RESUMED_MIGRATED' file='libvirt' value='1' type='virDomainEventResumedDetailType' info='Resumed for completion of migration'/>
    <enum name='VIR_DOMAIN_EVENT_RESUMED_UNPAUSED' file='libvirt' value='0' type='virDomainEventResumedDetailType' info='Normal resume due to admin unpause'/>
    <enum name='VIR_DOMAIN_EVENT_SHUTDOWN' file='libvirt' value='6' type='virDomainEventType'/>
    <enum name='VIR_DOMAIN_EVENT_SHUTDOWN_FINISHED' file='libvirt' value='0' type='virDomainEventShutdownDetailType' info='Guest finished shutdown sequence'/>
    <enum name='VIR_DOMAIN_EVENT_SHUTDOWN_LAST' file='libvirt' value='1' type='virDomainEventShutdownDetailType'/>
    <enum name='VIR_DOMAIN_EVENT_STARTED' file='libvirt' value='2' type='virDomainEventType'/>
    <enum name='VIR_DOMAIN_EVENT_STARTED_BOOTED' file='libvirt' value='0' type='virDomainEventStartedDetailType' info='Normal startup from boot'/>
    <enum name='VIR_DOMAIN_EVENT_STARTED_FROM_SNAPSHOT' file='libvirt' value='3' type='virDomainEventStartedDetailType' info='Restored from snapshot'/>
    <enum name='VIR_DOMAIN_EVENT_STARTED_LAST' file='libvirt' value='5' type='virDomainEventStartedDetailType'/>
    <enum name='VIR_DOMAIN_EVENT_STARTED_MIGRATED' file='libvirt' value='1' type='virDomainEventStartedDetailType' info='Incoming migration from another host'/>
    <enum name='VIR_DOMAIN_EVENT_STARTED_RESTORED' file='libvirt' value='2' type='virDomainEventStartedDetailType' info='Restored from a state file'/>
    <enum name='VIR_DOMAIN_EVENT_STARTED_WAKEUP' file='libvirt' value='4' type='virDomainEventStartedDetailType' info='Started due to wakeup event'/>
    <enum name='VIR_DOMAIN_EVENT_STOPPED' file='libvirt' value='5' type='virDomainEventType'/>
    <enum name='VIR_DOMAIN_EVENT_STOPPED_CRASHED' file='libvirt' value='2' type='virDomainEventStoppedDetailType' info='Guest crashed'/>
    <enum name='VIR_DOMAIN_EVENT_STOPPED_DESTROYED' file='libvirt' value='1' type='virDomainEventStoppedDetailType' info='Forced poweroff from host'/>
    <enum name='VIR_DOMAIN_EVENT_STOPPED_FAILED' file='libvirt' value='5' type='virDomainEventStoppedDetailType' info='Host emulator/mgmt failed'/>
    <enum name='VIR_DOMAIN_EVENT_STOPPED_FROM_SNAPSHOT' file='libvirt' value='6' type='virDomainEventStoppedDetailType' info='offline snapshot loaded'/>
    <enum name='VIR_DOMAIN_EVENT_STOPPED_LAST' file='libvirt' value='7' type='virDomainEventStoppedDetailType'/>
    <enum name='VIR_DOMAIN_EVENT_STOPPED_MIGRATED' file='libvirt' value='3' type='virDomainEventStoppedDetailType' info='Migrated off to another host'/>
    <enum name='VIR_DOMAIN_EVENT_STOPPED_SAVED' file='libvirt' value='4' type='virDomainEventStoppedDetailType' info='Saved to a state file'/>
    <enum name='VIR_DOMAIN_EVENT_STOPPED_SHUTDOWN' file='libvirt' value='0' type='virDomainEventStoppedDetailType' info='Normal shutdown'/>
    <enum name='VIR_DOMAIN_EVENT_SUSPENDED' file='libvirt' value='3' type='virDomainEventType'/>
    <enum name='VIR_DOMAIN_EVENT_SUSPENDED_API_ERROR' file='libvirt' value='6' type='virDomainEventSuspendedDetailType' info='suspended after failure during libvirt API call'/>
    <enum name='VIR_DOMAIN_EVENT_SUSPENDED_FROM_SNAPSHOT' file='libvirt' value='5' type='virDomainEventSuspendedDetailType' info='Restored from paused snapshot'/>
    <enum name='VIR_DOMAIN_EVENT_SUSPENDED_IOERROR' file='libvirt' value='2' type='virDomainEventSuspendedDetailType' info='Suspended due to a disk I/O error'/>
    <enum name='VIR_DOMAIN_EVENT_SUSPENDED_LAST' file='libvirt' value='7' type='virDomainEventSuspendedDetailType'/>
    <enum name='VIR_DOMAIN_EVENT_SUSPENDED_MIGRATED' file='libvirt' value='1' type='virDomainEventSuspendedDetailType' info='Suspended for offline migration'/>
    <enum name='VIR_DOMAIN_EVENT_SUSPENDED_PAUSED' file='libvirt' value='0' type='virDomainEventSuspendedDetailType' info='Normal suspend due to admin pause'/>
    <enum name='VIR_DOMAIN_EVENT_SUSPENDED_RESTORED' file='libvirt' value='4' type='virDomainEventSuspendedDetailType' info='Restored from paused state file'/>
    <enum name='VIR_DOMAIN_EVENT_SUSPENDED_WATCHDOG' file='libvirt' value='3' type='virDomainEventSuspendedDetailType' info='Suspended due to a watchdog firing'/>
    <enum name='VIR_DOMAIN_EVENT_TRAY_CHANGE_CLOSE' file='libvirt' value='1' type='virDomainEventTrayChangeReason'/>
    <enum name='VIR_DOMAIN_EVENT_TRAY_CHANGE_LAST' file='libvirt' value='2' type='virDomainEventTrayChangeReason'/>
    <enum name='VIR_DOMAIN_EVENT_TRAY_CHANGE_OPEN' file='libvirt' value='0' type='virDomainEventTrayChangeReason'/>
    <enum name='VIR_DOMAIN_EVENT_UNDEFINED' file='libvirt' value='1' type='virDomainEventType'/>
    <enum name='VIR_DOMAIN_EVENT_UNDEFINED_LAST' file='libvirt' value='1' type='virDomainEventUndefinedDetailType'/>
    <enum name='VIR_DOMAIN_EVENT_UNDEFINED_REMOVED' file='libvirt' value='0' type='virDomainEventUndefinedDetailType' info='Deleted the config file'/>
    <enum name='VIR_DOMAIN_EVENT_WATCHDOG_DEBUG' file='libvirt' value='5' type='virDomainEventWatchdogAction' info='No action, a debug message logged'/>
    <enum name='VIR_DOMAIN_EVENT_WATCHDOG_LAST' file='libvirt' value='6' type='virDomainEventWatchdogAction'/>
    <enum name='VIR_DOMAIN_EVENT_WATCHDOG_NONE' file='libvirt' value='0' type='virDomainEventWatchdogAction' info='No action, watchdog ignored'/>
    <enum name='VIR_DOMAIN_EVENT_WATCHDOG_PAUSE' file='libvirt' value='1' type='virDomainEventWatchdogAction' info='Guest CPUs are paused'/>
    <enum name='VIR_DOMAIN_EVENT_WATCHDOG_POWEROFF' file='libvirt' value='3' type='virDomainEventWatchdogAction' info='Guest is forcibly powered off'/>
    <enum name='VIR_DOMAIN_EVENT_WATCHDOG_RESET' file='libvirt' value='2' type='virDomainEventWatchdogAction' info='Guest CPUs are reset'/>
    <enum name='VIR_DOMAIN_EVENT_WATCHDOG_SHUTDOWN' file='libvirt' value='4' type='virDomainEventWatchdogAction' info='Guest is requested to gracefully shutdown'/>
    <enum name='VIR_DOMAIN_JOB_BOUNDED' file='libvirt' value='1' type='virDomainJobType' info='Job with a finite completion time'/>
    <enum name='VIR_DOMAIN_JOB_CANCELLED' file='libvirt' value='5' type='virDomainJobType' info='Job was aborted, but isn&apos;t cleaned up'/>
    <enum name='VIR_DOMAIN_JOB_COMPLETED' file='libvirt' value='3' type='virDomainJobType' info='Job has finished, but isn&apos;t cleaned up'/>
    <enum name='VIR_DOMAIN_JOB_FAILED' file='libvirt' value='4' type='virDomainJobType' info='Job hit error, but isn&apos;t cleaned up'/>
    <enum name='VIR_DOMAIN_JOB_LAST' file='libvirt' value='6' type='virDomainJobType'/>
    <enum name='VIR_DOMAIN_JOB_NONE' file='libvirt' value='0' type='virDomainJobType' info='No job is active'/>
    <enum name='VIR_DOMAIN_JOB_UNBOUNDED' file='libvirt' value='2' type='virDomainJobType' info='Job without a finite completion time'/>
    <enum name='VIR_DOMAIN_LAST' file='libvirt' value='8' type='virDomainState' info='NB: this enum value will increase over time as new events are
 added to the libvirt API. It reflects the last state supported
 by this version of the libvirt API.'/>
    <enum name='VIR_DOMAIN_MEMORY_PARAM_BOOLEAN' file='libvirt' value='VIR_TYPED_PARAM_BOOLEAN' type='virMemoryParameterType'/>
    <enum name='VIR_DOMAIN_MEMORY_PARAM_DOUBLE' file='libvirt' value='VIR_TYPED_PARAM_DOUBLE' type='virMemoryParameterType'/>
    <enum name='VIR_DOMAIN_MEMORY_PARAM_INT' file='libvirt' value='VIR_TYPED_PARAM_INT' type='virMemoryParameterType'/>
    <enum name='VIR_DOMAIN_MEMORY_PARAM_LLONG' file='libvirt' value='VIR_TYPED_PARAM_LLONG' type='virMemoryParameterType'/>
    <enum name='VIR_DOMAIN_MEMORY_PARAM_UINT' file='libvirt' value='VIR_TYPED_PARAM_UINT' type='virMemoryParameterType'/>
    <enum name='VIR_DOMAIN_MEMORY_PARAM_ULLONG' file='libvirt' value='VIR_TYPED_PARAM_ULLONG' type='virMemoryParameterType'/>
    <enum name='VIR_DOMAIN_MEMORY_STAT_ACTUAL_BALLOON' file='libvirt' value='6' type='virDomainMemoryStatTags' info='Resident Set Size of the process running the domain. This value
 is in kB'/>
    <enum name='VIR_DOMAIN_MEMORY_STAT_AVAILABLE' file='libvirt' value='5' type='virDomainMemoryStatTags' info='Current balloon value (in KB).'/>
    <enum name='VIR_DOMAIN_MEMORY_STAT_LAST' file='libvirt' value='VIR_DOMAIN_MEMORY_STAT_NR' type='virDomainMemoryStatTags'/>
    <enum name='VIR_DOMAIN_MEMORY_STAT_MAJOR_FAULT' file='libvirt' value='2' type='virDomainMemoryStatTags'/>
    <enum name='VIR_DOMAIN_MEMORY_STAT_MINOR_FAULT' file='libvirt' value='3' type='virDomainMemoryStatTags' info='The amount of memory left completely unused by the system.  Memory that
 is available but used for reclaimable caches should NOT be reported as
 free.  This value is expressed in kB.'/>
    <enum name='VIR_DOMAIN_MEMORY_STAT_NR' file='libvirt' value='8' type='virDomainMemoryStatTags'/>
    <enum name='VIR_DOMAIN_MEMORY_STAT_RSS' file='libvirt' value='7' type='virDomainMemoryStatTags' info='The number of statistics supported by this version of the interface.
 To add new statistics, add them to the enum and increase this value.'/>
    <enum name='VIR_DOMAIN_MEMORY_STAT_SWAP_IN' file='libvirt' value='0' type='virDomainMemoryStatTags' info='The total amount of memory written out to swap space (in kB).'/>
    <enum name='VIR_DOMAIN_MEMORY_STAT_SWAP_OUT' file='libvirt' value='1' type='virDomainMemoryStatTags' info='Page faults occur when a process makes a valid access to virtual memory
 that is not available.  When servicing the page fault, if disk IO is
 required, it is considered a major fault.  If not, it is a minor fault.
 These are expressed as the number of faults that have occurred.'/>
    <enum name='VIR_DOMAIN_MEMORY_STAT_UNUSED' file='libvirt' value='4' type='virDomainMemoryStatTags' info='The total amount of usable memory as seen by the domain.  This value
 may be less than the amount of memory assigned to the domain if a
 balloon driver is in use or if the guest OS does not initialize all
 assigned pages.  This value is expressed in kB.'/>
    <enum name='VIR_DOMAIN_MEM_CONFIG' file='libvirt' value='VIR_DOMAIN_AFFECT_CONFIG' type='virDomainMemoryModFlags' info='Additionally, these flags may be bitwise-OR&apos;d in.'/>
    <enum name='VIR_DOMAIN_MEM_CURRENT' file='libvirt' value='VIR_DOMAIN_AFFECT_CURRENT' type='virDomainMemoryModFlags'/>
    <enum name='VIR_DOMAIN_MEM_LIVE' file='libvirt' value='VIR_DOMAIN_AFFECT_LIVE' type='virDomainMemoryModFlags'/>
    <enum name='VIR_DOMAIN_MEM_MAXIMUM' file='libvirt' value='4' type='virDomainMemoryModFlags' info='affect Max rather than current'/>
    <enum name='VIR_DOMAIN_METADATA_DESCRIPTION' file='libvirt' value='0' type='virDomainMetadataType' info='Operate on &lt;description&gt;'/>
    <enum name='VIR_DOMAIN_METADATA_ELEMENT' file='libvirt' value='2' type='virDomainMetadataType' info='Operate on &lt;metadata&gt;'/>
    <enum name='VIR_DOMAIN_METADATA_LAST' file='libvirt' value='3' type='virDomainMetadataType'/>
    <enum name='VIR_DOMAIN_METADATA_TITLE' file='libvirt' value='1' type='virDomainMetadataType' info='Operate on &lt;title&gt;'/>
    <enum name='VIR_DOMAIN_NONE' file='libvirt' value='0' type='virDomainCreateFlags' info='Default behavior'/>
    <enum name='VIR_DOMAIN_NOSTATE' file='libvirt' value='0' type='virDomainState' info='no state'/>
    <enum name='VIR_DOMAIN_NOSTATE_LAST' file='libvirt' value='1' type='virDomainNostateReason'/>
    <enum name='VIR_DOMAIN_NOSTATE_UNKNOWN' file='libvirt' value='0' type='virDomainNostateReason'/>
    <enum name='VIR_DOMAIN_NUMATUNE_MEM_INTERLEAVE' file='libvirt' value='2' type='virDomainNumatuneMemMode'/>
    <enum name='VIR_DOMAIN_NUMATUNE_MEM_LAST' file='libvirt' value='3' type='virDomainNumatuneMemMode' info='This constant is subject to change'/>
    <enum name='VIR_DOMAIN_NUMATUNE_MEM_PREFERRED' file='libvirt' value='1' type='virDomainNumatuneMemMode'/>
    <enum name='VIR_DOMAIN_NUMATUNE_MEM_STRICT' file='libvirt' value='0' type='virDomainNumatuneMemMode'/>
    <enum name='VIR_DOMAIN_OPEN_GRAPHICS_SKIPAUTH' file='libvirt' value='1' type='virDomainOpenGraphicsFlags'/>
    <enum name='VIR_DOMAIN_PAUSED' file='libvirt' value='3' type='virDomainState' info='the domain is paused by user'/>
    <enum name='VIR_DOMAIN_PAUSED_CRASHED' file='libvirt' value='10' type='virDomainPausedReason' info='paused due to a guest crash'/>
    <enum name='VIR_DOMAIN_PAUSED_DUMP' file='libvirt' value='4' type='virDomainPausedReason' info='paused for offline core dump'/>
    <enum name='VIR_DOMAIN_PAUSED_FROM_SNAPSHOT' file='libvirt' value='7' type='virDomainPausedReason' info='paused after restoring from snapshot'/>
    <enum name='VIR_DOMAIN_PAUSED_IOERROR' file='libvirt' value='5' type='virDomainPausedReason' info='paused due to a disk I/O error'/>
    <enum name='VIR_DOMAIN_PAUSED_LAST' file='libvirt' value='11' type='virDomainPausedReason'/>
    <enum name='VIR_DOMAIN_PAUSED_MIGRATION' file='libvirt' value='2' type='virDomainPausedReason' info='paused for offline migration'/>
    <enum name='VIR_DOMAIN_PAUSED_SAVE' file='libvirt' value='3' type='virDomainPausedReason' info='paused for save'/>
    <enum name='VIR_DOMAIN_PAUSED_SHUTTING_DOWN' file='libvirt' value='8' type='virDomainPausedReason' info='paused during shutdown process'/>
    <enum name='VIR_DOMAIN_PAUSED_SNAPSHOT' file='libvirt' value='9' type='virDomainPausedReason' info='paused while creating a snapshot'/>
    <enum name='VIR_DOMAIN_PAUSED_UNKNOWN' file='libvirt' value='0' type='virDomainPausedReason' info='the reason is unknown'/>
    <enum name='VIR_DOMAIN_PAUSED_USER' file='libvirt' value='1' type='virDomainPausedReason' info='paused on user request'/>
    <enum name='VIR_DOMAIN_PAUSED_WATCHDOG' file='libvirt' value='6' type='virDomainPausedReason' info='paused due to a watchdog event'/>
    <enum name='VIR_DOMAIN_PMSUSPENDED' file='libvirt' value='7' type='virDomainState' info='the domain is suspended by guest
power management'/>
    <enum name='VIR_DOMAIN_PMSUSPENDED_DISK_LAST' file='libvirt' value='1' type='virDomainPMSuspendedDiskReason'/>
    <enum name='VIR_DOMAIN_PMSUSPENDED_DISK_UNKNOWN' file='libvirt' value='0' type='virDomainPMSuspendedDiskReason'/>
    <enum name='VIR_DOMAIN_PMSUSPENDED_LAST' file='libvirt' value='1' type='virDomainPMSuspendedReason'/>
    <enum name='VIR_DOMAIN_PMSUSPENDED_UNKNOWN' file='libvirt' value='0' type='virDomainPMSuspendedReason'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_ABRT' file='libvirt' value='6' type='virDomainProcessSignal' info='SIGABRT'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_ALRM' file='libvirt' value='14' type='virDomainProcessSignal' info='SIGALRM'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_BUS' file='libvirt' value='7' type='virDomainProcessSignal' info='SIGBUS'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_CHLD' file='libvirt' value='17' type='virDomainProcessSignal' info='SIGCHLD'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_CONT' file='libvirt' value='18' type='virDomainProcessSignal' info='SIGCONT'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_FPE' file='libvirt' value='8' type='virDomainProcessSignal' info='SIGFPE'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_HUP' file='libvirt' value='1' type='virDomainProcessSignal' info='SIGHUP'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_ILL' file='libvirt' value='4' type='virDomainProcessSignal' info='SIGILL'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_INT' file='libvirt' value='2' type='virDomainProcessSignal' info='SIGINT'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_KILL' file='libvirt' value='9' type='virDomainProcessSignal' info='SIGKILL'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_LAST' file='libvirt' value='65' type='virDomainProcessSignal'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_NOP' file='libvirt' value='0' type='virDomainProcessSignal' info='No constant in POSIX/Linux'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_PIPE' file='libvirt' value='13' type='virDomainProcessSignal' info='SIGPIPE'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_POLL' file='libvirt' value='29' type='virDomainProcessSignal' info='SIGPOLL (also known as SIGIO on Linux)'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_PROF' file='libvirt' value='27' type='virDomainProcessSignal' info='SIGPROF'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_PWR' file='libvirt' value='30' type='virDomainProcessSignal' info='Not in POSIX (SIGPWR on Linux)'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_QUIT' file='libvirt' value='3' type='virDomainProcessSignal' info='SIGQUIT'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_RT0' file='libvirt' value='32' type='virDomainProcessSignal' info='SIGRTMIN'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_RT1' file='libvirt' value='33' type='virDomainProcessSignal' info='SIGRTMIN + 1'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_RT10' file='libvirt' value='42' type='virDomainProcessSignal' info='SIGRTMIN + 10'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_RT11' file='libvirt' value='43' type='virDomainProcessSignal' info='SIGRTMIN + 11'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_RT12' file='libvirt' value='44' type='virDomainProcessSignal' info='SIGRTMIN + 12'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_RT13' file='libvirt' value='45' type='virDomainProcessSignal' info='SIGRTMIN + 13'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_RT14' file='libvirt' value='46' type='virDomainProcessSignal' info='SIGRTMIN + 14'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_RT15' file='libvirt' value='47' type='virDomainProcessSignal' info='SIGRTMIN + 15'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_RT16' file='libvirt' value='48' type='virDomainProcessSignal' info='SIGRTMIN + 16'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_RT17' file='libvirt' value='49' type='virDomainProcessSignal' info='SIGRTMIN + 17'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_RT18' file='libvirt' value='50' type='virDomainProcessSignal' info='SIGRTMIN + 18'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_RT19' file='libvirt' value='51' type='virDomainProcessSignal' info='SIGRTMIN + 19'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_RT2' file='libvirt' value='34' type='virDomainProcessSignal' info='SIGRTMIN + 2'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_RT20' file='libvirt' value='52' type='virDomainProcessSignal' info='SIGRTMIN + 20'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_RT21' file='libvirt' value='53' type='virDomainProcessSignal' info='SIGRTMIN + 21'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_RT22' file='libvirt' value='54' type='virDomainProcessSignal' info='SIGRTMIN + 22'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_RT23' file='libvirt' value='55' type='virDomainProcessSignal' info='SIGRTMIN + 23'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_RT24' file='libvirt' value='56' type='virDomainProcessSignal' info='SIGRTMIN + 24'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_RT25' file='libvirt' value='57' type='virDomainProcessSignal' info='SIGRTMIN + 25'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_RT26' file='libvirt' value='58' type='virDomainProcessSignal' info='SIGRTMIN + 26'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_RT27' file='libvirt' value='59' type='virDomainProcessSignal' info='SIGRTMIN + 27'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_RT28' file='libvirt' value='60' type='virDomainProcessSignal' info='SIGRTMIN + 28'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_RT29' file='libvirt' value='61' type='virDomainProcessSignal' info='SIGRTMIN + 29'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_RT3' file='libvirt' value='35' type='virDomainProcessSignal' info='SIGRTMIN + 3'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_RT30' file='libvirt' value='62' type='virDomainProcessSignal' info='SIGRTMIN + 30'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_RT31' file='libvirt' value='63' type='virDomainProcessSignal' info='SIGRTMIN + 31'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_RT32' file='libvirt' value='64' type='virDomainProcessSignal' info='SIGRTMIN + 32 / SIGRTMAX'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_RT4' file='libvirt' value='36' type='virDomainProcessSignal' info='SIGRTMIN + 4'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_RT5' file='libvirt' value='37' type='virDomainProcessSignal' info='SIGRTMIN + 5'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_RT6' file='libvirt' value='38' type='virDomainProcessSignal' info='SIGRTMIN + 6'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_RT7' file='libvirt' value='39' type='virDomainProcessSignal' info='SIGRTMIN + 7'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_RT8' file='libvirt' value='40' type='virDomainProcessSignal' info='SIGRTMIN + 8'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_RT9' file='libvirt' value='41' type='virDomainProcessSignal' info='SIGRTMIN + 9'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_SEGV' file='libvirt' value='11' type='virDomainProcessSignal' info='SIGSEGV'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_STKFLT' file='libvirt' value='16' type='virDomainProcessSignal' info='Not in POSIX (SIGSTKFLT on Linux'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_STOP' file='libvirt' value='19' type='virDomainProcessSignal' info='SIGSTOP'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_SYS' file='libvirt' value='31' type='virDomainProcessSignal' info='SIGSYS (also known as SIGUNUSED on Linux)'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_TERM' file='libvirt' value='15' type='virDomainProcessSignal' info='SIGTERM'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_TRAP' file='libvirt' value='5' type='virDomainProcessSignal' info='SIGTRAP'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_TSTP' file='libvirt' value='20' type='virDomainProcessSignal' info='SIGTSTP'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_TTIN' file='libvirt' value='21' type='virDomainProcessSignal' info='SIGTTIN'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_TTOU' file='libvirt' value='22' type='virDomainProcessSignal' info='SIGTTOU'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_URG' file='libvirt' value='23' type='virDomainProcessSignal' info='SIGURG'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_USR1' file='libvirt' value='10' type='virDomainProcessSignal' info='SIGUSR1'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_USR2' file='libvirt' value='12' type='virDomainProcessSignal' info='SIGUSR2'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_VTALRM' file='libvirt' value='26' type='virDomainProcessSignal' info='SIGVTALRM'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_WINCH' file='libvirt' value='28' type='virDomainProcessSignal' info='Not in POSIX (SIGWINCH on Linux)'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_XCPU' file='libvirt' value='24' type='virDomainProcessSignal' info='SIGXCPU'/>
    <enum name='VIR_DOMAIN_PROCESS_SIGNAL_XFSZ' file='libvirt' value='25' type='virDomainProcessSignal' info='SIGXFSZ'/>
    <enum name='VIR_DOMAIN_REBOOT_ACPI_POWER_BTN' file='libvirt' value='1' type='virDomainRebootFlagValues' info='Send ACPI event'/>
    <enum name='VIR_DOMAIN_REBOOT_DEFAULT' file='libvirt' value='0' type='virDomainRebootFlagValues' info='hypervisor choice'/>
    <enum name='VIR_DOMAIN_REBOOT_GUEST_AGENT' file='libvirt' value='2' type='virDomainRebootFlagValues' info='Use guest agent'/>
    <enum name='VIR_DOMAIN_REBOOT_INITCTL' file='libvirt' value='4' type='virDomainRebootFlagValues' info='Use initctl'/>
    <enum name='VIR_DOMAIN_REBOOT_SIGNAL' file='libvirt' value='8' type='virDomainRebootFlagValues' info='Send a signal'/>
    <enum name='VIR_DOMAIN_RUNNING' file='libvirt' value='1' type='virDomainState' info='the domain is running'/>
    <enum name='VIR_DOMAIN_RUNNING_BOOTED' file='libvirt' value='1' type='virDomainRunningReason' info='normal startup from boot'/>
    <enum name='VIR_DOMAIN_RUNNING_CRASHED' file='libvirt' value='9' type='virDomainRunningReason' info='resumed from crashed'/>
    <enum name='VIR_DOMAIN_RUNNING_FROM_SNAPSHOT' file='libvirt' value='4' type='virDomainRunningReason' info='restored from snapshot'/>
    <enum name='VIR_DOMAIN_RUNNING_LAST' file='libvirt' value='10' type='virDomainRunningReason'/>
    <enum name='VIR_DOMAIN_RUNNING_MIGRATED' file='libvirt' value='2' type='virDomainRunningReason' info='migrated from another host'/>
    <enum name='VIR_DOMAIN_RUNNING_MIGRATION_CANCELED' file='libvirt' value='6' type='virDomainRunningReason' info='returned from migration'/>
    <enum name='VIR_DOMAIN_RUNNING_RESTORED' file='libvirt' value='3' type='virDomainRunningReason' info='restored from a state file'/>
    <enum name='VIR_DOMAIN_RUNNING_SAVE_CANCELED' file='libvirt' value='7' type='virDomainRunningReason' info='returned from failed save process'/>
    <enum name='VIR_DOMAIN_RUNNING_UNKNOWN' file='libvirt' value='0' type='virDomainRunningReason'/>
    <enum name='VIR_DOMAIN_RUNNING_UNPAUSED' file='libvirt' value='5' type='virDomainRunningReason' info='returned from paused state'/>
    <enum name='VIR_DOMAIN_RUNNING_WAKEUP' file='libvirt' value='8' type='virDomainRunningReason' info='returned from pmsuspended due to
wakeup event'/>
    <enum name='VIR_DOMAIN_SAVE_BYPASS_CACHE' file='libvirt' value='1' type='virDomainSaveRestoreFlags' info='Avoid file system cache pollution'/>
    <enum name='VIR_DOMAIN_SAVE_PAUSED' file='libvirt' value='4' type='virDomainSaveRestoreFlags' info='Favor paused over running'/>
    <enum name='VIR_DOMAIN_SAVE_RUNNING' file='libvirt' value='2' type='virDomainSaveRestoreFlags' info='Favor running over paused'/>
    <enum name='VIR_DOMAIN_SCHED_FIELD_BOOLEAN' file='libvirt' value='VIR_TYPED_PARAM_BOOLEAN' type='virSchedParameterType'/>
    <enum name='VIR_DOMAIN_SCHED_FIELD_DOUBLE' file='libvirt' value='VIR_TYPED_PARAM_DOUBLE' type='virSchedParameterType'/>
    <enum name='VIR_DOMAIN_SCHED_FIELD_INT' file='libvirt' value='VIR_TYPED_PARAM_INT' type='virSchedParameterType'/>
    <enum name='VIR_DOMAIN_SCHED_FIELD_LLONG' file='libvirt' value='VIR_TYPED_PARAM_LLONG' type='virSchedParameterType'/>
    <enum name='VIR_DOMAIN_SCHED_FIELD_UINT' file='libvirt' value='VIR_TYPED_PARAM_UINT' type='virSchedParameterType'/>
    <enum name='VIR_DOMAIN_SCHED_FIELD_ULLONG' file='libvirt' value='VIR_TYPED_PARAM_ULLONG' type='virSchedParameterType'/>
    <enum name='VIR_DOMAIN_SHUTDOWN' file='libvirt' value='4' type='virDomainState' info='the domain is being shut down'/>
    <enum name='VIR_DOMAIN_SHUTDOWN_ACPI_POWER_BTN' file='libvirt' value='1' type='virDomainShutdownFlagValues' info='Send ACPI event'/>
    <enum name='VIR_DOMAIN_SHUTDOWN_DEFAULT' file='libvirt' value='0' type='virDomainShutdownFlagValues' info='hypervisor choice'/>
    <enum name='VIR_DOMAIN_SHUTDOWN_GUEST_AGENT' file='libvirt' value='2' type='virDomainShutdownFlagValues' info='Use guest agent'/>
    <enum name='VIR_DOMAIN_SHUTDOWN_INITCTL' file='libvirt' value='4' type='virDomainShutdownFlagValues' info='Use initctl'/>
    <enum name='VIR_DOMAIN_SHUTDOWN_LAST' file='libvirt' value='2' type='virDomainShutdownReason'/>
    <enum name='VIR_DOMAIN_SHUTDOWN_SIGNAL' file='libvirt' value='8' type='virDomainShutdownFlagValues' info='Send a signal'/>
    <enum name='VIR_DOMAIN_SHUTDOWN_UNKNOWN' file='libvirt' value='0' type='virDomainShutdownReason' info='the reason is unknown'/>
    <enum name='VIR_DOMAIN_SHUTDOWN_USER' file='libvirt' value='1' type='virDomainShutdownReason' info='shutting down on user request'/>
    <enum name='VIR_DOMAIN_SHUTOFF' file='libvirt' value='5' type='virDomainState' info='the domain is shut off'/>
    <enum name='VIR_DOMAIN_SHUTOFF_CRASHED' file='libvirt' value='3' type='virDomainShutoffReason' info='domain crashed'/>
    <enum name='VIR_DOMAIN_SHUTOFF_DESTROYED' file='libvirt' value='2' type='virDomainShutoffReason' info='forced poweroff'/>
    <enum name='VIR_DOMAIN_SHUTOFF_FAILED' file='libvirt' value='6' type='virDomainShutoffReason' info='domain failed to start'/>
    <enum name='VIR_DOMAIN_SHUTOFF_FROM_SNAPSHOT' file='libvirt' value='7' type='virDomainShutoffReason' info='restored from a snapshot which was
 taken while domain was shutoff'/>
    <enum name='VIR_DOMAIN_SHUTOFF_LAST' file='libvirt' value='8' type='virDomainShutoffReason'/>
    <enum name='VIR_DOMAIN_SHUTOFF_MIGRATED' file='libvirt' value='4' type='virDomainShutoffReason' info='migrated to another host'/>
    <enum name='VIR_DOMAIN_SHUTOFF_SAVED' file='libvirt' value='5' type='virDomainShutoffReason' info='saved to a file'/>
    <enum name='VIR_DOMAIN_SHUTOFF_SHUTDOWN' file='libvirt' value='1' type='virDomainShutoffReason' info='normal shutdown'/>
    <enum name='VIR_DOMAIN_SHUTOFF_UNKNOWN' file='libvirt' value='0' type='virDomainShutoffReason' info='the reason is unknown'/>
    <enum name='VIR_DOMAIN_SNAPSHOT_CREATE_ATOMIC' file='libvirt' value='128' type='virDomainSnapshotCreateFlags' info='atomically avoid
partial changes'/>
    <enum name='VIR_DOMAIN_SNAPSHOT_CREATE_CURRENT' file='libvirt' value='2' type='virDomainSnapshotCreateFlags' info='With redefine, make
snapshot current'/>
    <enum name='VIR_DOMAIN_SNAPSHOT_CREATE_DISK_ONLY' file='libvirt' value='16' type='virDomainSnapshotCreateFlags' info='disk snapshot, not
system checkpoint'/>
    <enum name='VIR_DOMAIN_SNAPSHOT_CREATE_HALT' file='libvirt' value='8' type='virDomainSnapshotCreateFlags' info='Stop running guest
after snapshot'/>
    <enum name='VIR_DOMAIN_SNAPSHOT_CREATE_LIVE' file='libvirt' value='256' type='virDomainSnapshotCreateFlags' info='create the snapshot
while the guest is
running'/>
    <enum name='VIR_DOMAIN_SNAPSHOT_CREATE_NO_METADATA' file='libvirt' value='4' type='virDomainSnapshotCreateFlags' info='Make snapshot without
remembering it'/>
    <enum name='VIR_DOMAIN_SNAPSHOT_CREATE_QUIESCE' file='libvirt' value='64' type='virDomainSnapshotCreateFlags' info='use guest agent to
quiesce all mounted
file systems within
the domain'/>
    <enum name='VIR_DOMAIN_SNAPSHOT_CREATE_REDEFINE' file='libvirt' value='1' type='virDomainSnapshotCreateFlags' info='Restore or alter
metadata'/>
    <enum name='VIR_DOMAIN_SNAPSHOT_CREATE_REUSE_EXT' file='libvirt' value='32' type='virDomainSnapshotCreateFlags' info='reuse any existing
external files'/>
    <enum name='VIR_DOMAIN_SNAPSHOT_DELETE_CHILDREN' file='libvirt' value='1' type='virDomainSnapshotDeleteFlags' info='Also delete children'/>
    <enum name='VIR_DOMAIN_SNAPSHOT_DELETE_CHILDREN_ONLY' file='libvirt' value='4' type='virDomainSnapshotDeleteFlags' info='Delete just children'/>
    <enum name='VIR_DOMAIN_SNAPSHOT_DELETE_METADATA_ONLY' file='libvirt' value='2' type='virDomainSnapshotDeleteFlags' info='Delete just metadata'/>
    <enum name='VIR_DOMAIN_SNAPSHOT_LIST_ACTIVE' file='libvirt' value='64' type='virDomainSnapshotListFlags' info='Filter by snapshots
taken while guest was
active, and with
memory state'/>
    <enum name='VIR_DOMAIN_SNAPSHOT_LIST_DESCENDANTS' file='libvirt' value='1' type='virDomainSnapshotListFlags' info='List all descendants,
not just children, when
listing a snapshot For historical reasons, groups do not use contiguous bits.'/>
    <enum name='VIR_DOMAIN_SNAPSHOT_LIST_DISK_ONLY' file='libvirt' value='128' type='virDomainSnapshotListFlags' info='Filter by snapshots
taken while guest was
active, but without
memory state'/>
    <enum name='VIR_DOMAIN_SNAPSHOT_LIST_EXTERNAL' file='libvirt' value='512' type='virDomainSnapshotListFlags' info='Filter by snapshots
that use files external
to disk images'/>
    <enum name='VIR_DOMAIN_SNAPSHOT_LIST_INACTIVE' file='libvirt' value='32' type='virDomainSnapshotListFlags' info='Filter by snapshots
taken while guest was
shut off'/>
    <enum name='VIR_DOMAIN_SNAPSHOT_LIST_INTERNAL' file='libvirt' value='256' type='virDomainSnapshotListFlags' info='Filter by snapshots
stored internal to
disk images'/>
    <enum name='VIR_DOMAIN_SNAPSHOT_LIST_LEAVES' file='libvirt' value='4' type='virDomainSnapshotListFlags' info='Filter by snapshots
with no children'/>
    <enum name='VIR_DOMAIN_SNAPSHOT_LIST_METADATA' file='libvirt' value='2' type='virDomainSnapshotListFlags' info='Filter by snapshots
which have metadata'/>
    <enum name='VIR_DOMAIN_SNAPSHOT_LIST_NO_LEAVES' file='libvirt' value='8' type='virDomainSnapshotListFlags' info='Filter by snapshots
that have children'/>
    <enum name='VIR_DOMAIN_SNAPSHOT_LIST_NO_METADATA' file='libvirt' value='16' type='virDomainSnapshotListFlags' info='Filter by snapshots
with no metadata'/>
    <enum name='VIR_DOMAIN_SNAPSHOT_LIST_ROOTS' file='libvirt' value='1' type='virDomainSnapshotListFlags' info='Filter by snapshots
with no parents, when
listing a domain'/>
    <enum name='VIR_DOMAIN_SNAPSHOT_REVERT_FORCE' file='libvirt' value='4' type='virDomainSnapshotRevertFlags' info='Allow risky reverts'/>
    <enum name='VIR_DOMAIN_SNAPSHOT_REVERT_PAUSED' file='libvirt' value='2' type='virDomainSnapshotRevertFlags' info='Pause after revert'/>
    <enum name='VIR_DOMAIN_SNAPSHOT_REVERT_RUNNING' file='libvirt' value='1' type='virDomainSnapshotRevertFlags' info='Run after revert'/>
    <enum name='VIR_DOMAIN_START_AUTODESTROY' file='libvirt' value='2' type='virDomainCreateFlags' info='Automatically kill guest when virConnectPtr is closed'/>
    <enum name='VIR_DOMAIN_START_BYPASS_CACHE' file='libvirt' value='4' type='virDomainCreateFlags' info='Avoid file system cache pollution'/>
    <enum name='VIR_DOMAIN_START_FORCE_BOOT' file='libvirt' value='8' type='virDomainCreateFlags' info='Boot, discarding any managed save'/>
    <enum name='VIR_DOMAIN_START_PAUSED' file='libvirt' value='1' type='virDomainCreateFlags' info='Launch guest in paused state'/>
    <enum name='VIR_DOMAIN_UNDEFINE_MANAGED_SAVE' file='libvirt' value='1' type='virDomainUndefineFlagsValues' info='Also remove any
managed save'/>
    <enum name='VIR_DOMAIN_UNDEFINE_SNAPSHOTS_METADATA' file='libvirt' value='2' type='virDomainUndefineFlagsValues' info='If last use of domain,
then also remove any
snapshot metadata Future undefine control flags should come here.'/>
    <enum name='VIR_DOMAIN_VCPU_CONFIG' file='libvirt' value='VIR_DOMAIN_AFFECT_CONFIG' type='virDomainVcpuFlags' info='Additionally, these flags may be bitwise-OR&apos;d in.'/>
    <enum name='VIR_DOMAIN_VCPU_CURRENT' file='libvirt' value='VIR_DOMAIN_AFFECT_CURRENT' type='virDomainVcpuFlags'/>
    <enum name='VIR_DOMAIN_VCPU_GUEST' file='libvirt' value='8' type='virDomainVcpuFlags' info='Modify state of the cpu in the guest'/>
    <enum name='VIR_DOMAIN_VCPU_LIVE' file='libvirt' value='VIR_DOMAIN_AFFECT_LIVE' type='virDomainVcpuFlags'/>
    <enum name='VIR_DOMAIN_VCPU_MAXIMUM' file='libvirt' value='4' type='virDomainVcpuFlags' info='Max rather than current count'/>
    <enum name='VIR_DOMAIN_XML_INACTIVE' file='libvirt' value='2' type='virDomainXMLFlags' info='dump inactive domain information'/>
    <enum name='VIR_DOMAIN_XML_MIGRATABLE' file='libvirt' value='8' type='virDomainXMLFlags' info='dump XML suitable for migration'/>
    <enum name='VIR_DOMAIN_XML_SECURE' file='libvirt' value='1' type='virDomainXMLFlags' info='dump security sensitive information too'/>
    <enum name='VIR_DOMAIN_XML_UPDATE_CPU' file='libvirt' value='4' type='virDomainXMLFlags' info='update guest CPU requirements according to host CPU'/>
    <enum name='VIR_DUMP_BYPASS_CACHE' file='libvirt' value='4' type='virDomainCoreDumpFlags' info='avoid file system cache pollution'/>
    <enum name='VIR_DUMP_CRASH' file='libvirt' value='1' type='virDomainCoreDumpFlags' info='crash after dump'/>
    <enum name='VIR_DUMP_LIVE' file='libvirt' value='2' type='virDomainCoreDumpFlags' info='live dump'/>
    <enum name='VIR_DUMP_MEMORY_ONLY' file='libvirt' value='16' type='virDomainCoreDumpFlags' info='use dump-guest-memory'/>
    <enum name='VIR_DUMP_RESET' file='libvirt' value='8' type='virDomainCoreDumpFlags' info='reset domain after dump finishes'/>
    <enum name='VIR_ERR_ACCESS_DENIED' file='virterror' value='88' type='virErrorNumber' info='operation on the object/resource
was denied'/>
    <enum name='VIR_ERR_AGENT_UNRESPONSIVE' file='virterror' value='86' type='virErrorNumber' info='guest agent is unresponsive,
not running or not usable'/>
    <enum name='VIR_ERR_ARGUMENT_UNSUPPORTED' file='virterror' value='74' type='virErrorNumber' info='valid API use but unsupported by
the given driver'/>
    <enum name='VIR_ERR_AUTH_CANCELLED' file='virterror' value='79' type='virErrorNumber' info='authentication cancelled'/>
    <enum name='VIR_ERR_AUTH_FAILED' file='virterror' value='45' type='virErrorNumber' info='authentication failed'/>
    <enum name='VIR_ERR_BLOCK_COPY_ACTIVE' file='virterror' value='83' type='virErrorNumber' info='action prevented by block copy job'/>
    <enum name='VIR_ERR_BUILD_FIREWALL' file='virterror' value='63' type='virErrorNumber' info='nw filter pool not found'/>
    <enum name='VIR_ERR_CALL_FAILED' file='virterror' value='26' type='virErrorNumber' info='not supported by the drivers
(DEPRECATED)'/>
    <enum name='VIR_ERR_CONFIG_UNSUPPORTED' file='virterror' value='67' type='virErrorNumber' info='unsupported configuration
construct'/>
    <enum name='VIR_ERR_CONF_SYNTAX' file='virterror' value='33' type='virErrorNumber' info='failed to parse the syntax of a
conf file'/>
    <enum name='VIR_ERR_DBUS_SERVICE' file='virterror' value='89' type='virErrorNumber' info='error from a dbus service'/>
    <enum name='VIR_ERR_DOMAIN_LAST' file='virterror' value='59' type='virErrorDomain'/>
    <enum name='VIR_ERR_DOM_EXIST' file='virterror' value='28' type='virErrorNumber' info='the domain already exist'/>
    <enum name='VIR_ERR_DRIVER_FULL' file='virterror' value='25' type='virErrorNumber' info='too many drivers registered'/>
    <enum name='VIR_ERR_ERROR' file='virterror' value='2' type='virErrorLevel' info='An error'/>
    <enum name='VIR_ERR_GET_FAILED' file='virterror' value='10' type='virErrorNumber' info='a HTTP GET command to failed'/>
    <enum name='VIR_ERR_GNUTLS_ERROR' file='virterror' value='40' type='virErrorNumber' info='error from a GNUTLS call'/>
    <enum name='VIR_ERR_HOOK_SCRIPT_FAILED' file='virterror' value='70' type='virErrorNumber' info='a synchronous hook script failed'/>
    <enum name='VIR_ERR_HTTP_ERROR' file='virterror' value='12' type='virErrorNumber' info='unexpected HTTP error code'/>
    <enum name='VIR_ERR_INTERNAL_ERROR' file='virterror' value='1' type='virErrorNumber' info='internal error'/>
    <enum name='VIR_ERR_INVALID_ARG' file='virterror' value='8' type='virErrorNumber' info='invalid function argument'/>
    <enum name='VIR_ERR_INVALID_CONN' file='virterror' value='6' type='virErrorNumber' info='invalid connection object'/>
    <enum name='VIR_ERR_INVALID_DOMAIN' file='virterror' value='7' type='virErrorNumber' info='invalid domain object'/>
    <enum name='VIR_ERR_INVALID_DOMAIN_SNAPSHOT' file='virterror' value='71' type='virErrorNumber' info='invalid domain snapshot'/>
    <enum name='VIR_ERR_INVALID_INTERFACE' file='virterror' value='58' type='virErrorNumber' info='invalid interface object'/>
    <enum name='VIR_ERR_INVALID_MAC' file='virterror' value='44' type='virErrorNumber' info='invalid MAC address'/>
    <enum name='VIR_ERR_INVALID_NETWORK' file='virterror' value='36' type='virErrorNumber' info='invalid network object'/>
    <enum name='VIR_ERR_INVALID_NODE_DEVICE' file='virterror' value='52' type='virErrorNumber' info='invalid node device object'/>
    <enum name='VIR_ERR_INVALID_NWFILTER' file='virterror' value='61' type='virErrorNumber' info='invalid nwfilter object'/>
    <enum name='VIR_ERR_INVALID_SECRET' file='virterror' value='65' type='virErrorNumber' info='invalid secret'/>
    <enum name='VIR_ERR_INVALID_STORAGE_POOL' file='virterror' value='46' type='virErrorNumber' info='invalid storage pool object'/>
    <enum name='VIR_ERR_INVALID_STORAGE_VOL' file='virterror' value='47' type='virErrorNumber' info='invalid storage vol object'/>
    <enum name='VIR_ERR_INVALID_STREAM' file='virterror' value='73' type='virErrorNumber' info='stream pointer not valid'/>
    <enum name='VIR_ERR_MIGRATE_PERSIST_FAILED' file='virterror' value='69' type='virErrorNumber' info='a migration worked, but making the
VM persist on the dest host failed'/>
    <enum name='VIR_ERR_MIGRATE_UNSAFE' file='virterror' value='81' type='virErrorNumber' info='Migration is not safe'/>
    <enum name='VIR_ERR_MULTIPLE_INTERFACES' file='virterror' value='59' type='virErrorNumber' info='more than one matching interface
found'/>
    <enum name='VIR_ERR_NETWORK_EXIST' file='virterror' value='37' type='virErrorNumber' info='the network already exist'/>
    <enum name='VIR_ERR_NONE' file='virterror' value='0' type='virErrorLevel'/>
    <enum name='VIR_ERR_NO_CONNECT' file='virterror' value='5' type='virErrorNumber' info='can&apos;t connect to hypervisor'/>
    <enum name='VIR_ERR_NO_DEVICE' file='virterror' value='23' type='virErrorNumber' info='missing domain devices information'/>
    <enum name='VIR_ERR_NO_DOMAIN' file='virterror' value='42' type='virErrorNumber' info='domain not found or unexpectedly
disappeared'/>
    <enum name='VIR_ERR_NO_DOMAIN_METADATA' file='virterror' value='80' type='virErrorNumber' info='The metadata is not present'/>
    <enum name='VIR_ERR_NO_DOMAIN_SNAPSHOT' file='virterror' value='72' type='virErrorNumber' info='domain snapshot not found'/>
    <enum name='VIR_ERR_NO_INTERFACE' file='virterror' value='57' type='virErrorNumber' info='interface driver not running'/>
    <enum name='VIR_ERR_NO_KERNEL' file='virterror' value='17' type='virErrorNumber' info='missing kernel information'/>
    <enum name='VIR_ERR_NO_MEMORY' file='virterror' value='2' type='virErrorNumber' info='memory allocation failure'/>
    <enum name='VIR_ERR_NO_NAME' file='virterror' value='21' type='virErrorNumber' info='missing domain name information'/>
    <enum name='VIR_ERR_NO_NETWORK' file='virterror' value='43' type='virErrorNumber' info='network not found'/>
    <enum name='VIR_ERR_NO_NODE_DEVICE' file='virterror' value='53' type='virErrorNumber' info='node device not found'/>
    <enum name='VIR_ERR_NO_NWFILTER' file='virterror' value='62' type='virErrorNumber' info='nw filter pool not found'/>
    <enum name='VIR_ERR_NO_OS' file='virterror' value='22' type='virErrorNumber' info='missing domain OS information'/>
    <enum name='VIR_ERR_NO_ROOT' file='virterror' value='18' type='virErrorNumber' info='missing root device information'/>
    <enum name='VIR_ERR_NO_SECRET' file='virterror' value='66' type='virErrorNumber' info='secret not found'/>
    <enum name='VIR_ERR_NO_SECURITY_MODEL' file='virterror' value='54' type='virErrorNumber' info='security model not found'/>
    <enum name='VIR_ERR_NO_SOURCE' file='virterror' value='19' type='virErrorNumber' info='missing source device information'/>
    <enum name='VIR_ERR_NO_STORAGE_POOL' file='virterror' value='49' type='virErrorNumber' info='storage pool not found'/>
    <enum name='VIR_ERR_NO_STORAGE_VOL' file='virterror' value='50' type='virErrorNumber' info='storage volume not found'/>
    <enum name='VIR_ERR_NO_SUPPORT' file='virterror' value='3' type='virErrorNumber' info='no support for this function'/>
    <enum name='VIR_ERR_NO_TARGET' file='virterror' value='20' type='virErrorNumber' info='missing target device information'/>
    <enum name='VIR_ERR_NO_XEN' file='virterror' value='14' type='virErrorNumber' info='could not open Xen hypervisor
control'/>
    <enum name='VIR_ERR_NO_XENSTORE' file='virterror' value='24' type='virErrorNumber' info='could not open Xen Store control'/>
    <enum name='VIR_ERR_OK' file='virterror' value='0' type='virErrorNumber'/>
    <enum name='VIR_ERR_OPEN_FAILED' file='virterror' value='30' type='virErrorNumber' info='failed to open a conf file'/>
    <enum name='VIR_ERR_OPERATION_ABORTED' file='virterror' value='78' type='virErrorNumber' info='operation on a domain was
canceled/aborted by user'/>
    <enum name='VIR_ERR_OPERATION_DENIED' file='virterror' value='29' type='virErrorNumber' info='operation forbidden on read-only
connections'/>
    <enum name='VIR_ERR_OPERATION_FAILED' file='virterror' value='9' type='virErrorNumber' info='a command to hypervisor failed'/>
    <enum name='VIR_ERR_OPERATION_INVALID' file='virterror' value='55' type='virErrorNumber' info='operation is not applicable at this
time'/>
    <enum name='VIR_ERR_OPERATION_TIMEOUT' file='virterror' value='68' type='virErrorNumber' info='timeout occurred during operation'/>
    <enum name='VIR_ERR_OPERATION_UNSUPPORTED' file='virterror' value='84' type='virErrorNumber' info='The requested operation is not
supported'/>
    <enum name='VIR_ERR_OS_TYPE' file='virterror' value='16' type='virErrorNumber' info='unknown OS type'/>
    <enum name='VIR_ERR_OVERFLOW' file='virterror' value='82' type='virErrorNumber' info='integer overflow'/>
    <enum name='VIR_ERR_PARSE_FAILED' file='virterror' value='32' type='virErrorNumber' info='failed to parse a conf file'/>
    <enum name='VIR_ERR_POST_FAILED' file='virterror' value='11' type='virErrorNumber' info='a HTTP POST command to failed'/>
    <enum name='VIR_ERR_READ_FAILED' file='virterror' value='31' type='virErrorNumber' info='failed to read a conf file'/>
    <enum name='VIR_ERR_RESOURCE_BUSY' file='virterror' value='87' type='virErrorNumber' info='resource is already in use'/>
    <enum name='VIR_ERR_RPC' file='virterror' value='39' type='virErrorNumber' info='some sort of RPC error'/>
    <enum name='VIR_ERR_SEXPR_SERIAL' file='virterror' value='13' type='virErrorNumber' info='failure to serialize an S-Expr'/>
    <enum name='VIR_ERR_SNAPSHOT_REVERT_RISKY' file='virterror' value='77' type='virErrorNumber' info='force was not requested for a
risky domain snapshot revert'/>
    <enum name='VIR_ERR_SSH' file='virterror' value='85' type='virErrorNumber' info='error in ssh transport driver'/>
    <enum name='VIR_ERR_STORAGE_POOL_BUILT' file='virterror' value='76' type='virErrorNumber' info='storage pool already built'/>
    <enum name='VIR_ERR_STORAGE_PROBE_FAILED' file='virterror' value='75' type='virErrorNumber' info='storage pool probe failed'/>
    <enum name='VIR_ERR_STORAGE_VOL_EXIST' file='virterror' value='90' type='virErrorNumber' info='the storage vol already exists'/>
    <enum name='VIR_ERR_SYSTEM_ERROR' file='virterror' value='38' type='virErrorNumber' info='general system call failure'/>
    <enum name='VIR_ERR_UNKNOWN_HOST' file='virterror' value='4' type='virErrorNumber' info='could not resolve hostname'/>
    <enum name='VIR_ERR_WARNING' file='virterror' value='1' type='virErrorLevel' info='A simple warning'/>
    <enum name='VIR_ERR_WRITE_FAILED' file='virterror' value='34' type='virErrorNumber' info='failed to write a conf file'/>
    <enum name='VIR_ERR_XEN_CALL' file='virterror' value='15' type='virErrorNumber' info='failure doing an hypervisor call'/>
    <enum name='VIR_ERR_XML_DETAIL' file='virterror' value='35' type='virErrorNumber' info='detail of an XML error'/>
    <enum name='VIR_ERR_XML_ERROR' file='virterror' value='27' type='virErrorNumber' info='an XML description is not well
formed or broken'/>
    <enum name='VIR_EVENT_HANDLE_ERROR' file='libvirt' value='4' type='virEventHandleType'/>
    <enum name='VIR_EVENT_HANDLE_HANGUP' file='libvirt' value='8' type='virEventHandleType'/>
    <enum name='VIR_EVENT_HANDLE_READABLE' file='libvirt' value='1' type='virEventHandleType'/>
    <enum name='VIR_EVENT_HANDLE_WRITABLE' file='libvirt' value='2' type='virEventHandleType'/>
    <enum name='VIR_FROM_ACCESS' file='virterror' value='55' type='virErrorDomain' info='Error from access control manager'/>
    <enum name='VIR_FROM_AUDIT' file='virterror' value='36' type='virErrorDomain' info='Error from auditing subsystem'/>
    <enum name='VIR_FROM_AUTH' file='virterror' value='46' type='virErrorDomain' info='Error from auth handling'/>
    <enum name='VIR_FROM_BHYVE' file='virterror' value='57' type='virErrorDomain' info='Error from bhyve driver'/>
    <enum name='VIR_FROM_CAPABILITIES' file='virterror' value='44' type='virErrorDomain' info='Error from capabilities'/>
    <enum name='VIR_FROM_CGROUP' file='virterror' value='54' type='virErrorDomain' info='Error from cgroups'/>
    <enum name='VIR_FROM_CONF' file='virterror' value='9' type='virErrorDomain' info='Error in the configuration file handling'/>
    <enum name='VIR_FROM_CPU' file='virterror' value='31' type='virErrorDomain' info='Error from CPU driver'/>
    <enum name='VIR_FROM_CRYPTO' file='virterror' value='58' type='virErrorDomain' info='Error from crypto code'/>
    <enum name='VIR_FROM_DBUS' file='virterror' value='47' type='virErrorDomain' info='Error from DBus'/>
    <enum name='VIR_FROM_DEVICE' file='virterror' value='49' type='virErrorDomain' info='Error from Device'/>
    <enum name='VIR_FROM_DOM' file='virterror' value='6' type='virErrorDomain' info='Error when operating on a domain'/>
    <enum name='VIR_FROM_DOMAIN' file='virterror' value='20' type='virErrorDomain' info='Error from domain config'/>
    <enum name='VIR_FROM_DOMAIN_SNAPSHOT' file='virterror' value='35' type='virErrorDomain' info='Error from domain snapshot'/>
    <enum name='VIR_FROM_ESX' file='virterror' value='28' type='virErrorDomain' info='Error from ESX driver'/>
    <enum name='VIR_FROM_EVENT' file='virterror' value='40' type='virErrorDomain' info='Error from event loop impl'/>
    <enum name='VIR_FROM_HOOK' file='virterror' value='34' type='virErrorDomain' info='Error from Synchronous hooks'/>
    <enum name='VIR_FROM_HYPERV' file='virterror' value='43' type='virErrorDomain' info='Error from Hyper-V driver'/>
    <enum name='VIR_FROM_IDENTITY' file='virterror' value='53' type='virErrorDomain' info='Error from identity code'/>
    <enum name='VIR_FROM_INITCTL' file='virterror' value='52' type='virErrorDomain' info='Error from initctl device communication'/>
    <enum name='VIR_FROM_INTERFACE' file='virterror' value='26' type='virErrorDomain' info='Error when operating on an interface'/>
    <enum name='VIR_FROM_LIBXL' file='virterror' value='41' type='virErrorDomain' info='Error from libxenlight driver'/>
    <enum name='VIR_FROM_LOCKING' file='virterror' value='42' type='virErrorDomain' info='Error from lock manager'/>
    <enum name='VIR_FROM_LOCKSPACE' file='virterror' value='51' type='virErrorDomain' info='Error from lockspace'/>
    <enum name='VIR_FROM_LXC' file='virterror' value='17' type='virErrorDomain' info='Error from Linux Container driver'/>
    <enum name='VIR_FROM_NET' file='virterror' value='11' type='virErrorDomain' info='Error when operating on a network'/>
    <enum name='VIR_FROM_NETWORK' file='virterror' value='19' type='virErrorDomain' info='Error from network config'/>
    <enum name='VIR_FROM_NODEDEV' file='virterror' value='22' type='virErrorDomain' info='Error from node device monitor'/>
    <enum name='VIR_FROM_NONE' file='virterror' value='0' type='virErrorDomain'/>
    <enum name='VIR_FROM_NWFILTER' file='virterror' value='33' type='virErrorDomain' info='Error from network filter driver'/>
    <enum name='VIR_FROM_ONE' file='virterror' value='27' type='virErrorDomain' info='The OpenNebula driver no longer exists.
Retained for ABI/API compat only'/>
    <enum name='VIR_FROM_OPENVZ' file='virterror' value='14' type='virErrorDomain' info='Error from OpenVZ driver'/>
    <enum name='VIR_FROM_PARALLELS' file='virterror' value='48' type='virErrorDomain' info='Error from Parallels'/>
    <enum name='VIR_FROM_PHYP' file='virterror' value='29' type='virErrorDomain' info='Error from IBM power hypervisor'/>
    <enum name='VIR_FROM_PROXY' file='virterror' value='8' type='virErrorDomain' info='Error in the proxy code; unused since
0.8.6'/>
    <enum name='VIR_FROM_QEMU' file='virterror' value='10' type='virErrorDomain' info='Error at the QEMU daemon'/>
    <enum name='VIR_FROM_REMOTE' file='virterror' value='13' type='virErrorDomain' info='Error from remote driver'/>
    <enum name='VIR_FROM_RPC' file='virterror' value='7' type='virErrorDomain' info='Error in the XML-RPC code'/>
    <enum name='VIR_FROM_SECRET' file='virterror' value='30' type='virErrorDomain' info='Error from secret storage'/>
    <enum name='VIR_FROM_SECURITY' file='virterror' value='24' type='virErrorDomain' info='Error from security framework'/>
    <enum name='VIR_FROM_SEXPR' file='virterror' value='4' type='virErrorDomain' info='Error in the S-Expression code'/>
    <enum name='VIR_FROM_SSH' file='virterror' value='50' type='virErrorDomain' info='Error from libssh2 connection transport'/>
    <enum name='VIR_FROM_STATS_LINUX' file='virterror' value='16' type='virErrorDomain' info='Error in the Linux Stats code'/>
    <enum name='VIR_FROM_STORAGE' file='virterror' value='18' type='virErrorDomain' info='Error from storage driver'/>
    <enum name='VIR_FROM_STREAMS' file='virterror' value='38' type='virErrorDomain' info='Error from I/O streams'/>
    <enum name='VIR_FROM_SYSINFO' file='virterror' value='37' type='virErrorDomain' info='Error from sysinfo/SMBIOS'/>
    <enum name='VIR_FROM_SYSTEMD' file='virterror' value='56' type='virErrorDomain' info='Error from systemd code'/>
    <enum name='VIR_FROM_TEST' file='virterror' value='12' type='virErrorDomain' info='Error from test driver'/>
    <enum name='VIR_FROM_UML' file='virterror' value='21' type='virErrorDomain' info='Error at the UML driver'/>
    <enum name='VIR_FROM_URI' file='virterror' value='45' type='virErrorDomain' info='Error from URI handling'/>
    <enum name='VIR_FROM_VBOX' file='virterror' value='25' type='virErrorDomain' info='Error from VirtualBox driver'/>
    <enum name='VIR_FROM_VMWARE' file='virterror' value='39' type='virErrorDomain' info='Error from VMware driver'/>
    <enum name='VIR_FROM_XEN' file='virterror' value='1' type='virErrorDomain' info='Error at Xen hypervisor layer'/>
    <enum name='VIR_FROM_XENAPI' file='virterror' value='32' type='virErrorDomain' info='Error from XenAPI'/>
    <enum name='VIR_FROM_XEND' file='virterror' value='2' type='virErrorDomain' info='Error at connection with xend daemon'/>
    <enum name='VIR_FROM_XENSTORE' file='virterror' value='3' type='virErrorDomain' info='Error at connection with xen store'/>
    <enum name='VIR_FROM_XENXM' file='virterror' value='15' type='virErrorDomain' info='Error at Xen XM layer'/>
    <enum name='VIR_FROM_XEN_INOTIFY' file='virterror' value='23' type='virErrorDomain' info='Error from xen inotify layer'/>
    <enum name='VIR_FROM_XML' file='virterror' value='5' type='virErrorDomain' info='Error in the XML code'/>
    <enum name='VIR_INTERFACE_XML_INACTIVE' file='libvirt' value='1' type='virInterfaceXMLFlags' info='dump inactive interface information'/>
    <enum name='VIR_KEYCODE_SET_ATSET1' file='libvirt' value='2' type='virKeycodeSet'/>
    <enum name='VIR_KEYCODE_SET_ATSET2' file='libvirt' value='3' type='virKeycodeSet'/>
    <enum name='VIR_KEYCODE_SET_ATSET3' file='libvirt' value='4' type='virKeycodeSet'/>
    <enum name='VIR_KEYCODE_SET_LAST' file='libvirt' value='10' type='virKeycodeSet' info='NB: this enum value will increase over time as new events are
 added to the libvirt API. It reflects the last keycode set supported
 by this version of the libvirt API.'/>
    <enum name='VIR_KEYCODE_SET_LINUX' file='libvirt' value='0' type='virKeycodeSet'/>
    <enum name='VIR_KEYCODE_SET_OSX' file='libvirt' value='5' type='virKeycodeSet'/>
    <enum name='VIR_KEYCODE_SET_RFB' file='libvirt' value='9' type='virKeycodeSet'/>
    <enum name='VIR_KEYCODE_SET_USB' file='libvirt' value='7' type='virKeycodeSet'/>
    <enum name='VIR_KEYCODE_SET_WIN32' file='libvirt' value='8' type='virKeycodeSet'/>
    <enum name='VIR_KEYCODE_SET_XT' file='libvirt' value='1' type='virKeycodeSet'/>
    <enum name='VIR_KEYCODE_SET_XT_KBD' file='libvirt' value='6' type='virKeycodeSet'/>
    <enum name='VIR_MEMORY_PHYSICAL' file='libvirt' value='2' type='virDomainMemoryFlags' info='addresses are physical addresses'/>
    <enum name='VIR_MEMORY_VIRTUAL' file='libvirt' value='1' type='virDomainMemoryFlags' info='addresses are virtual addresses'/>
    <enum name='VIR_MIGRATE_ABORT_ON_ERROR' file='libvirt' value='4096' type='virDomainMigrateFlags' info='abort migration on I/O errors happened during migration'/>
    <enum name='VIR_MIGRATE_AUTO_CONVERGE' file='libvirt' value='8192' type='virDomainMigrateFlags' info='force convergence'/>
    <enum name='VIR_MIGRATE_CHANGE_PROTECTION' file='libvirt' value='256' type='virDomainMigrateFlags' info='protect for changing domain configuration through the
 whole migration process; this will be used automatically
 when supported'/>
    <enum name='VIR_MIGRATE_COMPRESSED' file='libvirt' value='2048' type='virDomainMigrateFlags' info='compress data during migration'/>
    <enum name='VIR_MIGRATE_LIVE' file='libvirt' value='1' type='virDomainMigrateFlags' info='live migration'/>
    <enum name='VIR_MIGRATE_NON_SHARED_DISK' file='libvirt' value='64' type='virDomainMigrateFlags' info='migration with non-shared storage with full disk copy'/>
    <enum name='VIR_MIGRATE_NON_SHARED_INC' file='libvirt' value='128' type='virDomainMigrateFlags' info='migration with non-shared storage with incremental copy (same base image shared between source and destination)'/>
    <enum name='VIR_MIGRATE_OFFLINE' file='libvirt' value='1024' type='virDomainMigrateFlags' info='offline migrate'/>
    <enum name='VIR_MIGRATE_PAUSED' file='libvirt' value='32' type='virDomainMigrateFlags' info='pause on remote side'/>
    <enum name='VIR_MIGRATE_PEER2PEER' file='libvirt' value='2' type='virDomainMigrateFlags' info='direct source -&gt; dest host control channel Note the less-common spelling that we&apos;re stuck with:
VIR_MIGRATE_TUNNELLED should be VIR_MIGRATE_TUNNELED'/>
    <enum name='VIR_MIGRATE_PERSIST_DEST' file='libvirt' value='8' type='virDomainMigrateFlags' info='persist the VM on the destination'/>
    <enum name='VIR_MIGRATE_TUNNELLED' file='libvirt' value='4' type='virDomainMigrateFlags' info='tunnel migration data over libvirtd connection'/>
    <enum name='VIR_MIGRATE_UNDEFINE_SOURCE' file='libvirt' value='16' type='virDomainMigrateFlags' info='undefine the VM on the source'/>
    <enum name='VIR_MIGRATE_UNSAFE' file='libvirt' value='512' type='virDomainMigrateFlags' info='force migration even if it is considered unsafe'/>
    <enum name='VIR_NETWORK_EVENT_DEFINED' file='libvirt' value='0' type='virNetworkEventLifecycleType'/>
    <enum name='VIR_NETWORK_EVENT_ID_LAST' file='libvirt' value='1' type='virNetworkEventID' info='NB: this enum value will increase over time as new events are
 added to the libvirt API. It reflects the last event ID supported
 by this version of the libvirt API.'/>
    <enum name='VIR_NETWORK_EVENT_ID_LIFECYCLE' file='libvirt' value='0' type='virNetworkEventID' info='virConnectNetworkEventLifecycleCallback'/>
    <enum name='VIR_NETWORK_EVENT_LAST' file='libvirt' value='4' type='virNetworkEventLifecycleType'/>
    <enum name='VIR_NETWORK_EVENT_STARTED' file='libvirt' value='2' type='virNetworkEventLifecycleType'/>
    <enum name='VIR_NETWORK_EVENT_STOPPED' file='libvirt' value='3' type='virNetworkEventLifecycleType'/>
    <enum name='VIR_NETWORK_EVENT_UNDEFINED' file='libvirt' value='1' type='virNetworkEventLifecycleType'/>
    <enum name='VIR_NETWORK_SECTION_BRIDGE' file='libvirt' value='1' type='virNetworkUpdateSection' info='&lt;bridge&gt;'/>
    <enum name='VIR_NETWORK_SECTION_DNS_HOST' file='libvirt' value='10' type='virNetworkUpdateSection' info='&lt;dns&gt;/&lt;host&gt;'/>
    <enum name='VIR_NETWORK_SECTION_DNS_SRV' file='libvirt' value='12' type='virNetworkUpdateSection' info='&lt;dns&gt;/&lt;srv&gt;'/>
    <enum name='VIR_NETWORK_SECTION_DNS_TXT' file='libvirt' value='11' type='virNetworkUpdateSection' info='&lt;dns&gt;/&lt;txt&gt;'/>
    <enum name='VIR_NETWORK_SECTION_DOMAIN' file='libvirt' value='2' type='virNetworkUpdateSection' info='&lt;domain&gt;'/>
    <enum name='VIR_NETWORK_SECTION_FORWARD' file='libvirt' value='6' type='virNetworkUpdateSection' info='&lt;forward&gt;'/>
    <enum name='VIR_NETWORK_SECTION_FORWARD_INTERFACE' file='libvirt' value='7' type='virNetworkUpdateSection' info='&lt;forward&gt;/&lt;interface&gt;'/>
    <enum name='VIR_NETWORK_SECTION_FORWARD_PF' file='libvirt' value='8' type='virNetworkUpdateSection' info='&lt;forward&gt;/&lt;pf&gt;'/>
    <enum name='VIR_NETWORK_SECTION_IP' file='libvirt' value='3' type='virNetworkUpdateSection' info='&lt;ip&gt;'/>
    <enum name='VIR_NETWORK_SECTION_IP_DHCP_HOST' file='libvirt' value='4' type='virNetworkUpdateSection' info='&lt;ip&gt;/&lt;dhcp&gt;/&lt;host&gt;'/>
    <enum name='VIR_NETWORK_SECTION_IP_DHCP_RANGE' file='libvirt' value='5' type='virNetworkUpdateSection' info='&lt;ip&gt;/&lt;dhcp&gt;/&lt;range&gt;'/>
    <enum name='VIR_NETWORK_SECTION_LAST' file='libvirt' value='13' type='virNetworkUpdateSection'/>
    <enum name='VIR_NETWORK_SECTION_NONE' file='libvirt' value='0' type='virNetworkUpdateSection' info='(invalid)'/>
    <enum name='VIR_NETWORK_SECTION_PORTGROUP' file='libvirt' value='9' type='virNetworkUpdateSection' info='&lt;portgroup&gt;'/>
    <enum name='VIR_NETWORK_UPDATE_AFFECT_CONFIG' file='libvirt' value='2' type='virNetworkUpdateFlags' info='affect persistent config only'/>
    <enum name='VIR_NETWORK_UPDATE_AFFECT_CURRENT' file='libvirt' value='0' type='virNetworkUpdateFlags' info='affect live if network is active,
config if it&apos;s not active'/>
    <enum name='VIR_NETWORK_UPDATE_AFFECT_LIVE' file='libvirt' value='1' type='virNetworkUpdateFlags' info='affect live state of network only'/>
    <enum name='VIR_NETWORK_UPDATE_COMMAND_ADD_FIRST' file='libvirt' value='4' type='virNetworkUpdateCommand' info='add an element at start of list'/>
    <enum name='VIR_NETWORK_UPDATE_COMMAND_ADD_LAST' file='libvirt' value='3' type='virNetworkUpdateCommand' info='add an element at end of list'/>
    <enum name='VIR_NETWORK_UPDATE_COMMAND_DELETE' file='libvirt' value='2' type='virNetworkUpdateCommand' info='delete an existing element'/>
    <enum name='VIR_NETWORK_UPDATE_COMMAND_LAST' file='libvirt' value='5' type='virNetworkUpdateCommand'/>
    <enum name='VIR_NETWORK_UPDATE_COMMAND_MODIFY' file='libvirt' value='1' type='virNetworkUpdateCommand' info='modify an existing element'/>
    <enum name='VIR_NETWORK_UPDATE_COMMAND_NONE' file='libvirt' value='0' type='virNetworkUpdateCommand' info='(invalid)'/>
    <enum name='VIR_NETWORK_XML_INACTIVE' file='libvirt' value='1' type='virNetworkXMLFlags' info='dump inactive network information'/>
    <enum name='VIR_NODE_CPU_STATS_ALL_CPUS' file='libvirt' value='-1' type='virNodeGetCPUStatsAllCPUs'/>
    <enum name='VIR_NODE_MEMORY_STATS_ALL_CELLS' file='libvirt' value='-1' type='virNodeGetMemoryStatsAllCells'/>
    <enum name='VIR_NODE_SUSPEND_TARGET_DISK' file='libvirt' value='1' type='virNodeSuspendTarget'/>
    <enum name='VIR_NODE_SUSPEND_TARGET_HYBRID' file='libvirt' value='2' type='virNodeSuspendTarget'/>
    <enum name='VIR_NODE_SUSPEND_TARGET_LAST' file='libvirt' value='3' type='virNodeSuspendTarget' info='This constant is subject to change'/>
    <enum name='VIR_NODE_SUSPEND_TARGET_MEM' file='libvirt' value='0' type='virNodeSuspendTarget'/>
    <enum name='VIR_SECRET_USAGE_TYPE_CEPH' file='libvirt' value='2' type='virSecretUsageType'/>
    <enum name='VIR_SECRET_USAGE_TYPE_ISCSI' file='libvirt' value='3' type='virSecretUsageType'/>
    <enum name='VIR_SECRET_USAGE_TYPE_LAST' file='libvirt' value='4' type='virSecretUsageType' info='NB: this enum value will increase over time as new events are
 added to the libvirt API. It reflects the last secret owner ID
 supported by this version of the libvirt API.'/>
    <enum name='VIR_SECRET_USAGE_TYPE_NONE' file='libvirt' value='0' type='virSecretUsageType'/>
    <enum name='VIR_SECRET_USAGE_TYPE_VOLUME' file='libvirt' value='1' type='virSecretUsageType'/>
    <enum name='VIR_STORAGE_POOL_BUILDING' file='libvirt' value='1' type='virStoragePoolState' info='Initializing pool, not available'/>
    <enum name='VIR_STORAGE_POOL_BUILD_NEW' file='libvirt' value='0' type='virStoragePoolBuildFlags' info='Regular build from scratch'/>
    <enum name='VIR_STORAGE_POOL_BUILD_NO_OVERWRITE' file='libvirt' value='4' type='virStoragePoolBuildFlags' info='Do not overwrite existing pool'/>
    <enum name='VIR_STORAGE_POOL_BUILD_OVERWRITE' file='libvirt' value='8' type='virStoragePoolBuildFlags' info='Overwrite data'/>
    <enum name='VIR_STORAGE_POOL_BUILD_REPAIR' file='libvirt' value='1' type='virStoragePoolBuildFlags' info='Repair / reinitialize'/>
    <enum name='VIR_STORAGE_POOL_BUILD_RESIZE' file='libvirt' value='2' type='virStoragePoolBuildFlags' info='Extend existing pool'/>
    <enum name='VIR_STORAGE_POOL_DEGRADED' file='libvirt' value='3' type='virStoragePoolState' info='Running degraded'/>
    <enum name='VIR_STORAGE_POOL_DELETE_NORMAL' file='libvirt' value='0' type='virStoragePoolDeleteFlags' info='Delete metadata only    (fast)'/>
    <enum name='VIR_STORAGE_POOL_DELETE_ZEROED' file='libvirt' value='1' type='virStoragePoolDeleteFlags' info='Clear all data to zeros (slow)'/>
    <enum name='VIR_STORAGE_POOL_INACCESSIBLE' file='libvirt' value='4' type='virStoragePoolState' info='Running, but not accessible'/>
    <enum name='VIR_STORAGE_POOL_INACTIVE' file='libvirt' value='0' type='virStoragePoolState' info='Not running'/>
    <enum name='VIR_STORAGE_POOL_RUNNING' file='libvirt' value='2' type='virStoragePoolState' info='Running normally'/>
    <enum name='VIR_STORAGE_POOL_STATE_LAST' file='libvirt' value='5' type='virStoragePoolState'/>
    <enum name='VIR_STORAGE_VOL_BLOCK' file='libvirt' value='1' type='virStorageVolType' info='Block based volumes'/>
    <enum name='VIR_STORAGE_VOL_CREATE_PREALLOC_METADATA' file='libvirt' value='1' type='virStorageVolCreateFlags'/>
    <enum name='VIR_STORAGE_VOL_DELETE_NORMAL' file='libvirt' value='0' type='virStorageVolDeleteFlags' info='Delete metadata only    (fast)'/>
    <enum name='VIR_STORAGE_VOL_DELETE_ZEROED' file='libvirt' value='1' type='virStorageVolDeleteFlags' info='Clear all data to zeros (slow)'/>
    <enum name='VIR_STORAGE_VOL_DIR' file='libvirt' value='2' type='virStorageVolType' info='Directory-passthrough based volume'/>
    <enum name='VIR_STORAGE_VOL_FILE' file='libvirt' value='0' type='virStorageVolType' info='Regular file based volumes'/>
    <enum name='VIR_STORAGE_VOL_LAST' file='libvirt' value='5' type='virStorageVolType'/>
    <enum name='VIR_STORAGE_VOL_NETDIR' file='libvirt' value='4' type='virStorageVolType' info='Network accessible directory that can
 contain other network volumes'/>
    <enum name='VIR_STORAGE_VOL_NETWORK' file='libvirt' value='3' type='virStorageVolType' info='Network volumes like RBD (RADOS Block Device)'/>
    <enum name='VIR_STORAGE_VOL_RESIZE_ALLOCATE' file='libvirt' value='1' type='virStorageVolResizeFlags' info='force allocation of new size'/>
    <enum name='VIR_STORAGE_VOL_RESIZE_DELTA' file='libvirt' value='2' type='virStorageVolResizeFlags' info='size is relative to current'/>
    <enum name='VIR_STORAGE_VOL_RESIZE_SHRINK' file='libvirt' value='4' type='virStorageVolResizeFlags' info='allow decrease in capacity'/>
    <enum name='VIR_STORAGE_VOL_WIPE_ALG_BSI' file='libvirt' value='3' type='virStorageVolWipeAlgorithm' info='9-pass method recommended by the
German Center of Security in
Information Technologies'/>
    <enum name='VIR_STORAGE_VOL_WIPE_ALG_DOD' file='libvirt' value='2' type='virStorageVolWipeAlgorithm' info='4-pass DoD 5220.22-M section
8-306 procedure'/>
    <enum name='VIR_STORAGE_VOL_WIPE_ALG_GUTMANN' file='libvirt' value='4' type='virStorageVolWipeAlgorithm' info='The canonical 35-pass sequence'/>
    <enum name='VIR_STORAGE_VOL_WIPE_ALG_LAST' file='libvirt' value='9' type='virStorageVolWipeAlgorithm' info='NB: this enum value will increase over time as new algorithms are
 added to the libvirt API. It reflects the last algorithm supported
 by this version of the libvirt API.'/>
    <enum name='VIR_STORAGE_VOL_WIPE_ALG_NNSA' file='libvirt' value='1' type='virStorageVolWipeAlgorithm' info='4-pass  NNSA Policy Letter
NAP-14.1-C (XVI-8)'/>
    <enum name='VIR_STORAGE_VOL_WIPE_ALG_PFITZNER33' file='libvirt' value='7' type='virStorageVolWipeAlgorithm' info='33-pass random'/>
    <enum name='VIR_STORAGE_VOL_WIPE_ALG_PFITZNER7' file='libvirt' value='6' type='virStorageVolWipeAlgorithm' info='7-pass random'/>
    <enum name='VIR_STORAGE_VOL_WIPE_ALG_RANDOM' file='libvirt' value='8' type='virStorageVolWipeAlgorithm' info='1-pass random'/>
    <enum name='VIR_STORAGE_VOL_WIPE_ALG_SCHNEIER' file='libvirt' value='5' type='virStorageVolWipeAlgorithm' info='7-pass method described by
Bruce Schneier in &quot;Applied
Cryptography&quot; (1996)'/>
    <enum name='VIR_STORAGE_VOL_WIPE_ALG_ZERO' file='libvirt' value='0' type='virStorageVolWipeAlgorithm' info='1-pass, all zeroes'/>
    <enum name='VIR_STORAGE_XML_INACTIVE' file='libvirt' value='1' type='virStorageXMLFlags' info='dump inactive pool/volume information'/>
    <enum name='VIR_STREAM_EVENT_ERROR' file='libvirt' value='4' type='virStreamEventType'/>
    <enum name='VIR_STREAM_EVENT_HANGUP' file='libvirt' value='8' type='virStreamEventType'/>
    <enum name='VIR_STREAM_EVENT_READABLE' file='libvirt' value='1' type='virStreamEventType'/>
    <enum name='VIR_STREAM_EVENT_WRITABLE' file='libvirt' value='2' type='virStreamEventType'/>
    <enum name='VIR_STREAM_NONBLOCK' file='libvirt' value='1' type='virStreamFlags'/>
    <enum name='VIR_TYPED_PARAM_BOOLEAN' file='libvirt' value='6' type='virTypedParameterType' info='boolean(character) case'/>
    <enum name='VIR_TYPED_PARAM_DOUBLE' file='libvirt' value='5' type='virTypedParameterType' info='double case'/>
    <enum name='VIR_TYPED_PARAM_INT' file='libvirt' value='1' type='virTypedParameterType' info='integer case'/>
    <enum name='VIR_TYPED_PARAM_LAST' file='libvirt' value='8' type='virTypedParameterType'/>
    <enum name='VIR_TYPED_PARAM_LLONG' file='libvirt' value='3' type='virTypedParameterType' info='long long case'/>
    <enum name='VIR_TYPED_PARAM_STRING' file='libvirt' value='7' type='virTypedParameterType' info='string case'/>
    <enum name='VIR_TYPED_PARAM_STRING_OKAY' file='libvirt' value='4' type='virTypedParameterFlags'/>
    <enum name='VIR_TYPED_PARAM_UINT' file='libvirt' value='2' type='virTypedParameterType' info='unsigned integer case'/>
    <enum name='VIR_TYPED_PARAM_ULLONG' file='libvirt' value='4' type='virTypedParameterType' info='unsigned long long case'/>
    <enum name='VIR_VCPU_BLOCKED' file='libvirt' value='2' type='virVcpuState' info='the virtual CPU is blocked on resource'/>
    <enum name='VIR_VCPU_LAST' file='libvirt' value='3' type='virVcpuState'/>
    <enum name='VIR_VCPU_OFFLINE' file='libvirt' value='0' type='virVcpuState' info='the virtual CPU is offline'/>
    <enum name='VIR_VCPU_RUNNING' file='libvirt' value='1' type='virVcpuState' info='the virtual CPU is running'/>
    <enum name='VIR_WAR_NO_INTERFACE' file='virterror' value='56' type='virErrorNumber' info='failed to start interface driver'/>
    <enum name='VIR_WAR_NO_NETWORK' file='virterror' value='41' type='virErrorNumber' info='failed to start network'/>
    <enum name='VIR_WAR_NO_NODE' file='virterror' value='51' type='virErrorNumber' info='failed to start node driver'/>
    <enum name='VIR_WAR_NO_NWFILTER' file='virterror' value='60' type='virErrorNumber' info='failed to start nwfilter driver'/>
    <enum name='VIR_WAR_NO_SECRET' file='virterror' value='64' type='virErrorNumber' info='failed to start secret storage'/>
    <enum name='VIR_WAR_NO_STORAGE' file='virterror' value='48' type='virErrorNumber' info='failed to start storage'/>
    <struct name='virBlkioParameter' file='libvirt' type='struct _virTypedParameter'>
      <field name='field' type='char field[VIR_TYPED_PARAM_FIELD_LENGTH]' info='parameter name'/>
      <field name='type' type='int' info='parameter type, virTypedParameterType'/>
      <field name='value' type='union' info='parameter value'>
        <union>
          <field name='i' type='int' info='type is INT'/>
          <field name='ui' type='unsigned int' info='type is UINT'/>
          <field name='l' type='long long int' info='type is LLONG'/>
          <field name='ul' type='unsigned long long int' info='type is ULLONG'/>
          <field name='d' type='double' info='type is DOUBLE'/>
          <field name='b' type='char' info='type is BOOLEAN'/>
          <field name='s' type='char *' info='type is STRING, may not be NULL'/>
        </union>
      </field>
    </struct>
    <typedef name='virBlkioParameterPtr' file='libvirt' type='virBlkioParameter *'>
      <info><![CDATA[a virBlkioParameterPtr is a pointer to a virBlkioParameter structure. Provided for backwards compatibility; virTypedParameterPtr is the preferred alias since 0.9.2.]]></info>
    </typedef>
    <typedef name='virBlkioParameterType' file='libvirt' type='enum'/>
    <typedef name='virCPUCompareResult' file='libvirt' type='enum'/>
    <struct name='virConnect' file='libvirt' type='struct _virConnect'/>
    <struct name='virConnectAuth' file='libvirt' type='struct _virConnectAuth'>
      <field name='credtype' type='int *' info='List of supported virConnectCredentialType values'/>
      <field name='ncredtype' type='unsigned int' info=''/>
      <field name='cb' type='virConnectAuthCallbackPtr' info='Callback used to collect credentials'/>
      <field name='cbdata' type='void *' info=''/>
    </struct>
    <typedef name='virConnectAuthPtr' file='libvirt' type='virConnectAuth *'/>
    <typedef name='virConnectBaselineCPUFlags' file='libvirt' type='enum'/>
    <typedef name='virConnectCloseReason' file='libvirt' type='enum'/>
    <struct name='virConnectCredential' file='libvirt' type='struct _virConnectCredential'>
      <field name='type' type='int' info='One of virConnectCredentialType constants'/>
      <field name='prompt' type='const char *' info='Prompt to show to user'/>
      <field name='challenge' type='const char *' info='Additional challenge to show'/>
      <field name='defresult' type='const char *' info='Optional default result'/>
      <field name='result' type='char *' info='Result to be filled with user response (or defresult)'/>
      <field name='resultlen' type='unsigned int' info='Length of the result'/>
    </struct>
    <typedef name='virConnectCredentialPtr' file='libvirt' type='virConnectCredential *'/>
    <typedef name='virConnectCredentialType' file='libvirt' type='enum'/>
    <typedef name='virConnectDomainEventBlockJobStatus' file='libvirt' type='enum'/>
    <typedef name='virConnectDomainEventDiskChangeReason' file='libvirt' type='enum'/>
    <typedef name='virConnectFlags' file='libvirt' type='enum'/>
    <typedef name='virConnectListAllDomainsFlags' file='libvirt' type='enum'/>
    <typedef name='virConnectListAllInterfacesFlags' file='libvirt' type='enum'/>
    <typedef name='virConnectListAllNetworksFlags' file='libvirt' type='enum'/>
    <typedef name='virConnectListAllNodeDeviceFlags' file='libvirt' type='enum'/>
    <typedef name='virConnectListAllSecretsFlags' file='libvirt' type='enum'/>
    <typedef name='virConnectListAllStoragePoolsFlags' file='libvirt' type='enum'/>
    <typedef name='virConnectPtr' file='libvirt' type='virConnect *'>
      <info><![CDATA[a virConnectPtr is pointer to a virConnect private structure, this is the type used to reference a connection to the Hypervisor in the API.]]></info>
    </typedef>
    <struct name='virDomain' file='libvirt' type='struct _virDomain'/>
    <typedef name='virDomainBlockCommitFlags' file='libvirt' type='enum'/>
    <struct name='virDomainBlockInfo' file='libvirt' type='struct _virDomainBlockInfo'>
      <field name='capacity' type='unsigned long long' info='logical size in bytes of the block device backing image'/>
      <field name='allocation' type='unsigned long long' info='highest allocated extent in bytes of the block device backing image'/>
      <field name='physical' type='unsigned long long' info='physical size in bytes of the container of the backing image'/>
    </struct>
    <typedef name='virDomainBlockInfoPtr' file='libvirt' type='virDomainBlockInfo *'/>
    <typedef name='virDomainBlockJobAbortFlags' file='libvirt' type='enum'/>
    <typedef name='virDomainBlockJobCursor' file='libvirt' type='unsigned long long'/>
    <struct name='virDomainBlockJobInfo' file='libvirt' type='struct _virDomainBlockJobInfo'>
      <field name='type' type='virDomainBlockJobType' info=''/>
      <field name='bandwidth' type='unsigned long' info='The following fields provide an indication of block job progress.  @cur
 indicates the current position and will be between 0 and @end.  @end is
 the final cursor position for this operation and represents completion.
 To approximate progress, divide @cur by @end.'/>
      <field name='cur' type='virDomainBlockJobCursor' info=''/>
      <field name='end' type='virDomainBlockJobCursor' info=''/>
    </struct>
    <typedef name='virDomainBlockJobInfoPtr' file='libvirt' type='virDomainBlockJobInfo *'/>
    <typedef name='virDomainBlockJobType' file='libvirt' type='enum'/>
    <typedef name='virDomainBlockRebaseFlags' file='libvirt' type='enum'/>
    <typedef name='virDomainBlockResizeFlags' file='libvirt' type='enum'/>
    <typedef name='virDomainBlockStatsPtr' file='libvirt' type='virDomainBlockStatsStruct *'>
      <info><![CDATA[A pointer to a virDomainBlockStats structure]]></info>
    </typedef>
    <struct name='virDomainBlockStatsStruct' file='libvirt' type='struct _virDomainBlockStats'>
      <field name='rd_req' type='long long' info='number of read requests'/>
      <field name='rd_bytes' type='long long' info='number of read bytes'/>
      <field name='wr_req' type='long long' info='number of write requests'/>
      <field name='wr_bytes' type='long long' info='number of written bytes'/>
      <field name='errs' type='long long' info='In Xen this returns the mysterious &apos;oo_req&apos;.'/>
    </struct>
    <typedef name='virDomainBlockedReason' file='libvirt' type='enum'/>
    <typedef name='virDomainChannelFlags' file='libvirt' type='enum'/>
    <typedef name='virDomainConsoleFlags' file='libvirt' type='enum'/>
    <struct name='virDomainControlInfo' file='libvirt' type='struct _virDomainControlInfo'>
      <field name='state' type='unsigned int' info='control state, one of virDomainControlState'/>
      <field name='details' type='unsigned int' info='state details, currently 0'/>
      <field name='stateTime' type='unsigned long long' info='for how long (in msec) control interface
has been in current state (except for OK
and ERROR states)'/>
    </struct>
    <typedef name='virDomainControlInfoPtr' file='libvirt' type='virDomainControlInfo *'>
      <info><![CDATA[Pointer to virDomainControlInfo structure.]]></info>
    </typedef>
    <typedef name='virDomainControlState' file='libvirt' type='enum'/>
    <typedef name='virDomainCoreDumpFlags' file='libvirt' type='enum'/>
    <typedef name='virDomainCoreDumpFormat' file='libvirt' type='enum'/>
    <typedef name='virDomainCrashedReason' file='libvirt' type='enum'/>
    <typedef name='virDomainCreateFlags' file='libvirt' type='enum'/>
    <typedef name='virDomainDestroyFlagsValues' file='libvirt' type='enum'/>
    <typedef name='virDomainDeviceModifyFlags' file='libvirt' type='enum'/>
    <struct name='virDomainDiskError' file='libvirt' type='struct _virDomainDiskError'>
      <field name='disk' type='char *' info='disk target'/>
      <field name='error' type='int' info='virDomainDiskErrorCode'/>
    </struct>
    <typedef name='virDomainDiskErrorCode' file='libvirt' type='enum'/>
    <typedef name='virDomainDiskErrorPtr' file='libvirt' type='virDomainDiskError *'/>
    <typedef name='virDomainEventCrashedDetailType' file='libvirt' type='enum'/>
    <typedef name='virDomainEventDefinedDetailType' file='libvirt' type='enum'/>
    <struct name='virDomainEventGraphicsAddress' file='libvirt' type='struct _virDomainEventGraphicsAddress'>
      <field name='family' type='int' info='Address family, virDomainEventGraphicsAddressType'/>
      <field name='node' type='char *' info='Address of node (eg IP address, or UNIX path)'/>
      <field name='service' type='char *' info='Service name/number (eg TCP port, or NULL)'/>
    </struct>
    <typedef name='virDomainEventGraphicsAddressPtr' file='libvirt' type='virDomainEventGraphicsAddress *'/>
    <typedef name='virDomainEventGraphicsAddressType' file='libvirt' type='enum'/>
    <typedef name='virDomainEventGraphicsPhase' file='libvirt' type='enum'/>
    <struct name='virDomainEventGraphicsSubject' file='libvirt' type='struct _virDomainEventGraphicsSubject'>
      <field name='nidentity' type='int' info='Number of identities in arra'/>
      <field name='identities' type='virDomainEventGraphicsSubjectIdentityPtr' info='Array of identities for subject'/>
    </struct>
    <struct name='virDomainEventGraphicsSubjectIdentity' file='libvirt' type='struct _virDomainEventGraphicsSubjectIdentity'>
      <field name='type' type='char *' info='Type of identity'/>
      <field name='name' type='char *' info='Identity value'/>
    </struct>
    <typedef name='virDomainEventGraphicsSubjectIdentityPtr' file='libvirt' type='virDomainEventGraphicsSubjectIdentity *'/>
    <typedef name='virDomainEventGraphicsSubjectPtr' file='libvirt' type='virDomainEventGraphicsSubject *'/>
    <typedef name='virDomainEventID' file='libvirt' type='enum'/>
    <typedef name='virDomainEventIOErrorAction' file='libvirt' type='enum'/>
    <typedef name='virDomainEventPMSuspendedDetailType' file='libvirt' type='enum'/>
    <typedef name='virDomainEventResumedDetailType' file='libvirt' type='enum'/>
    <typedef name='virDomainEventShutdownDetailType' file='libvirt' type='enum'/>
    <typedef name='virDomainEventStartedDetailType' file='libvirt' type='enum'/>
    <typedef name='virDomainEventStoppedDetailType' file='libvirt' type='enum'/>
    <typedef name='virDomainEventSuspendedDetailType' file='libvirt' type='enum'/>
    <typedef name='virDomainEventTrayChangeReason' file='libvirt' type='enum'/>
    <typedef name='virDomainEventType' file='libvirt' type='enum'/>
    <typedef name='virDomainEventUndefinedDetailType' file='libvirt' type='enum'/>
    <typedef name='virDomainEventWatchdogAction' file='libvirt' type='enum'/>
    <struct name='virDomainInfo' file='libvirt' type='struct _virDomainInfo'>
      <field name='state' type='unsigned char' info='the running state, one of virDomainState'/>
      <field name='maxMem' type='unsigned long' info='the maximum memory in KBytes allowed'/>
      <field name='memory' type='unsigned long' info='the memory in KBytes used by the domain'/>
      <field name='nrVirtCpu' type='unsigned short' info='the number of virtual CPUs for the domain'/>
      <field name='cpuTime' type='unsigned long long' info='the CPU time used in nanoseconds'/>
    </struct>
    <typedef name='virDomainInfoPtr' file='libvirt' type='virDomainInfo *'>
      <info><![CDATA[a virDomainInfoPtr is a pointer to a virDomainInfo structure.]]></info>
    </typedef>
    <typedef name='virDomainInterfaceStatsPtr' file='libvirt' type='virDomainInterfaceStatsStruct *'>
      <info><![CDATA[A pointer to a virDomainInterfaceStats structure]]></info>
    </typedef>
    <struct name='virDomainInterfaceStatsStruct' file='libvirt' type='struct _virDomainInterfaceStats'>
      <field name='rx_bytes' type='long long' info=''/>
      <field name='rx_packets' type='long long' info=''/>
      <field name='rx_errs' type='long long' info=''/>
      <field name='rx_drop' type='long long' info=''/>
      <field name='tx_bytes' type='long long' info=''/>
      <field name='tx_packets' type='long long' info=''/>
      <field name='tx_errs' type='long long' info=''/>
      <field name='tx_drop' type='long long' info=''/>
    </struct>
    <struct name='virDomainJobInfo' file='libvirt' type='struct _virDomainJobInfo'>
      <field name='type' type='int' info='Time is measured in milliseconds'/>
      <field name='timeElapsed' type='unsigned long long' info='Always set'/>
      <field name='timeRemaining' type='unsigned long long' info='Only for VIR_DOMAIN_JOB_BOUNDED Data is measured in bytes unless otherwise specified
 and is measuring the job as a whole.

 For VIR_DOMAIN_JOB_UNBOUNDED, dataTotal may be less
 than the final sum of dataProcessed + dataRemaining
 in the event that the hypervisor has to repeat some
 data, such as due to dirtied pages during migration.

 For VIR_DOMAIN_JOB_BOUNDED, dataTotal shall always
 equal the sum of dataProcessed + dataRemaining.'/>
      <field name='dataTotal' type='unsigned long long' info=''/>
      <field name='dataProcessed' type='unsigned long long' info=''/>
      <field name='dataRemaining' type='unsigned long long' info='As above, but only tracking guest memory progress'/>
      <field name='memTotal' type='unsigned long long' info=''/>
      <field name='memProcessed' type='unsigned long long' info=''/>
      <field name='memRemaining' type='unsigned long long' info='As above, but only tracking guest disk file progress'/>
      <field name='fileTotal' type='unsigned long long' info=''/>
      <field name='fileProcessed' type='unsigned long long' info=''/>
      <field name='fileRemaining' type='unsigned long long' info=''/>
    </struct>
    <typedef name='virDomainJobInfoPtr' file='libvirt' type='virDomainJobInfo *'/>
    <typedef name='virDomainJobType' file='libvirt' type='enum'/>
    <typedef name='virDomainMemoryFlags' file='libvirt' type='enum'/>
    <typedef name='virDomainMemoryModFlags' file='libvirt' type='enum'/>
    <typedef name='virDomainMemoryStatPtr' file='libvirt' type='virDomainMemoryStatStruct *'/>
    <struct name='virDomainMemoryStatStruct' file='libvirt' type='struct _virDomainMemoryStat'>
      <field name='tag' type='int' info=''/>
      <field name='val' type='unsigned long long' info=''/>
    </struct>
    <typedef name='virDomainMemoryStatTags' file='libvirt' type='enum'/>
    <typedef name='virDomainMetadataType' file='libvirt' type='enum'/>
    <typedef name='virDomainMigrateFlags' file='libvirt' type='enum'/>
    <typedef name='virDomainModificationImpact' file='libvirt' type='enum'/>
    <typedef name='virDomainNostateReason' file='libvirt' type='enum'/>
    <typedef name='virDomainNumatuneMemMode' file='libvirt' type='enum'/>
    <typedef name='virDomainOpenGraphicsFlags' file='libvirt' type='enum'/>
    <typedef name='virDomainPMSuspendedDiskReason' file='libvirt' type='enum'/>
    <typedef name='virDomainPMSuspendedReason' file='libvirt' type='enum'/>
    <typedef name='virDomainPausedReason' file='libvirt' type='enum'/>
    <typedef name='virDomainProcessSignal' file='libvirt' type='enum'/>
    <typedef name='virDomainPtr' file='libvirt' type='virDomain *'>
      <info><![CDATA[a virDomainPtr is pointer to a virDomain private structure, this is the type used to reference a domain in the API.]]></info>
    </typedef>
    <typedef name='virDomainRebootFlagValues' file='libvirt' type='enum'/>
    <typedef name='virDomainRunningReason' file='libvirt' type='enum'/>
    <typedef name='virDomainSaveRestoreFlags' file='libvirt' type='enum'/>
    <typedef name='virDomainShutdownFlagValues' file='libvirt' type='enum'/>
    <typedef name='virDomainShutdownReason' file='libvirt' type='enum'/>
    <typedef name='virDomainShutoffReason' file='libvirt' type='enum'/>
    <struct name='virDomainSnapshot' file='libvirt' type='struct _virDomainSnapshot'/>
    <typedef name='virDomainSnapshotCreateFlags' file='libvirt' type='enum'/>
    <typedef name='virDomainSnapshotDeleteFlags' file='libvirt' type='enum'/>
    <typedef name='virDomainSnapshotListFlags' file='libvirt' type='enum'/>
    <typedef name='virDomainSnapshotPtr' file='libvirt' type='virDomainSnapshot *'>
      <info><![CDATA[a virDomainSnapshotPtr is pointer to a virDomainSnapshot private structure, and is the type used to reference a domain snapshot in the API.]]></info>
    </typedef>
    <typedef name='virDomainSnapshotRevertFlags' file='libvirt' type='enum'/>
    <typedef name='virDomainState' file='libvirt' type='enum'/>
    <typedef name='virDomainUndefineFlagsValues' file='libvirt' type='enum'/>
    <typedef name='virDomainVcpuFlags' file='libvirt' type='enum'/>
    <typedef name='virDomainXMLFlags' file='libvirt' type='enum'/>
    <struct name='virError' file='virterror' type='struct _virError'>
      <field name='code' type='int' info='The error code, a virErrorNumber'/>
      <field name='domain' type='int' info='What part of the library raised this error'/>
      <field name='message' type='char *' info='human-readable informative error message'/>
      <field name='level' type='virErrorLevel' info='how consequent is the error'/>
      <field name='conn' type='virConnectPtr' info='connection if available, deprecated
see note above'/>
      <field name='dom' type='virDomainPtr' info='domain if available, deprecated
see note above'/>
      <field name='str1' type='char *' info='extra string information'/>
      <field name='str2' type='char *' info='extra string information'/>
      <field name='str3' type='char *' info='extra string information'/>
      <field name='int1' type='int' info='extra number information'/>
      <field name='int2' type='int' info='extra number information'/>
      <field name='net' type='virNetworkPtr' info='network if available, deprecated
see note above'/>
    </struct>
    <typedef name='virErrorDomain' file='virterror' type='enum'/>
    <typedef name='virErrorLevel' file='virterror' type='enum'/>
    <typedef name='virErrorNumber' file='virterror' type='enum'/>
    <typedef name='virErrorPtr' file='virterror' type='virError *'/>
    <typedef name='virEventHandleType' file='libvirt' type='enum'/>
    <struct name='virInterface' file='libvirt' type='struct _virInterface'/>
    <typedef name='virInterfacePtr' file='libvirt' type='virInterface *'>
      <info><![CDATA[a virInterfacePtr is pointer to a virInterface private structure, this is the type used to reference a virtual interface in the API.]]></info>
    </typedef>
    <typedef name='virInterfaceXMLFlags' file='libvirt' type='enum'/>
    <typedef name='virKeycodeSet' file='libvirt' type='enum'/>
    <struct name='virMemoryParameter' file='libvirt' type='struct _virTypedParameter'>
      <field name='field' type='char field[VIR_TYPED_PARAM_FIELD_LENGTH]' info='parameter name'/>
      <field name='type' type='int' info='parameter type, virTypedParameterType'/>
      <field name='value' type='union' info='parameter value'>
        <union>
          <field name='i' type='int' info='type is INT'/>
          <field name='ui' type='unsigned int' info='type is UINT'/>
          <field name='l' type='long long int' info='type is LLONG'/>
          <field name='ul' type='unsigned long long int' info='type is ULLONG'/>
          <field name='d' type='double' info='type is DOUBLE'/>
          <field name='b' type='char' info='type is BOOLEAN'/>
          <field name='s' type='char *' info='type is STRING, may not be NULL'/>
        </union>
      </field>
    </struct>
    <typedef name='virMemoryParameterPtr' file='libvirt' type='virMemoryParameter *'>
      <info><![CDATA[a virMemoryParameterPtr is a pointer to a virMemoryParameter structure. Provided for backwards compatibility; virTypedParameterPtr is the preferred alias since 0.9.2.]]></info>
    </typedef>
    <typedef name='virMemoryParameterType' file='libvirt' type='enum'/>
    <struct name='virNWFilter' file='libvirt' type='struct _virNWFilter'/>
    <typedef name='virNWFilterPtr' file='libvirt' type='virNWFilter *'>
      <info><![CDATA[a virNWFilterPtr is pointer to a virNWFilter private structure, this is the type used to reference a network filter in the API.]]></info>
    </typedef>
    <struct name='virNetwork' file='libvirt' type='struct _virNetwork'/>
    <typedef name='virNetworkEventID' file='libvirt' type='enum'/>
    <typedef name='virNetworkEventLifecycleType' file='libvirt' type='enum'/>
    <typedef name='virNetworkPtr' file='libvirt' type='virNetwork *'>
      <info><![CDATA[a virNetworkPtr is pointer to a virNetwork private structure, this is the type used to reference a virtual network in the API.]]></info>
    </typedef>
    <typedef name='virNetworkUpdateCommand' file='libvirt' type='enum'/>
    <typedef name='virNetworkUpdateFlags' file='libvirt' type='enum'/>
    <typedef name='virNetworkUpdateSection' file='libvirt' type='enum'/>
    <typedef name='virNetworkXMLFlags' file='libvirt' type='enum'/>
    <struct name='virNodeCPUStats' file='libvirt' type='struct _virNodeCPUStats'>
      <field name='field' type='char field[VIR_NODE_CPU_STATS_FIELD_LENGTH]' info=''/>
      <field name='value' type='unsigned long long' info=''/>
    </struct>
    <typedef name='virNodeCPUStatsPtr' file='libvirt' type='virNodeCPUStats *'>
      <info><![CDATA[a virNodeCPUStatsPtr is a pointer to a virNodeCPUStats structure.]]></info>
    </typedef>
    <struct name='virNodeDevice' file='libvirt' type='struct _virNodeDevice'/>
    <typedef name='virNodeDevicePtr' file='libvirt' type='virNodeDevice *'>
      <info><![CDATA[A virNodeDevicePtr is a pointer to a virNodeDevice structure.  Get one via virNodeDeviceLookupByName, or virNodeDeviceCreate.  Be sure to call virNodeDeviceFree when done using a virNodeDevicePtr obtained from any of the above functions to avoid leaking memory.]]></info>
    </typedef>
    <typedef name='virNodeGetCPUStatsAllCPUs' file='libvirt' type='enum'/>
    <typedef name='virNodeGetMemoryStatsAllCells' file='libvirt' type='enum'/>
    <struct name='virNodeInfo' file='libvirt' type='struct _virNodeInfo'>
      <field name='model' type='char model[32]' info='string indicating the CPU model'/>
      <field name='memory' type='unsigned long' info='memory size in kilobytes'/>
      <field name='cpus' type='unsigned int' info='the number of active CPUs'/>
      <field name='mhz' type='unsigned int' info='expected CPU frequency'/>
      <field name='nodes' type='unsigned int' info='the number of NUMA cell, 1 for unusual NUMA
topologies or uniform memory access; check
capabilities XML for the actual NUMA topology'/>
      <field name='sockets' type='unsigned int' info='number of CPU sockets per node if nodes &gt; 1,
1 in case of unusual NUMA topology'/>
      <field name='cores' type='unsigned int' info='number of cores per socket, total number of
processors in case of unusual NUMA topolog'/>
      <field name='threads' type='unsigned int' info='number of threads per core, 1 in case of
unusual numa topology'/>
    </struct>
    <typedef name='virNodeInfoPtr' file='libvirt' type='virNodeInfo *'>
      <info><![CDATA[a virNodeInfoPtr is a pointer to a virNodeInfo structure.]]></info>
    </typedef>
    <struct name='virNodeMemoryStats' file='libvirt' type='struct _virNodeMemoryStats'>
      <field name='field' type='char field[VIR_NODE_MEMORY_STATS_FIELD_LENGTH]' info=''/>
      <field name='value' type='unsigned long long' info=''/>
    </struct>
    <typedef name='virNodeMemoryStatsPtr' file='libvirt' type='virNodeMemoryStats *'>
      <info><![CDATA[a virNodeMemoryStatsPtr is a pointer to a virNodeMemoryStats structure.]]></info>
    </typedef>
    <typedef name='virNodeSuspendTarget' file='libvirt' type='enum'/>
    <struct name='virSchedParameter' file='libvirt' type='struct _virTypedParameter'>
      <field name='field' type='char field[VIR_TYPED_PARAM_FIELD_LENGTH]' info='parameter name'/>
      <field name='type' type='int' info='parameter type, virTypedParameterType'/>
      <field name='value' type='union' info='parameter value'>
        <union>
          <field name='i' type='int' info='type is INT'/>
          <field name='ui' type='unsigned int' info='type is UINT'/>
          <field name='l' type='long long int' info='type is LLONG'/>
          <field name='ul' type='unsigned long long int' info='type is ULLONG'/>
          <field name='d' type='double' info='type is DOUBLE'/>
          <field name='b' type='char' info='type is BOOLEAN'/>
          <field name='s' type='char *' info='type is STRING, may not be NULL'/>
        </union>
      </field>
    </struct>
    <typedef name='virSchedParameterPtr' file='libvirt' type='virSchedParameter *'>
      <info><![CDATA[a virSchedParameterPtr is a pointer to a virSchedParameter structure. Provided for backwards compatibility; virTypedParameterPtr is the preferred alias since 0.9.2.]]></info>
    </typedef>
    <typedef name='virSchedParameterType' file='libvirt' type='enum'/>
    <struct name='virSecret' file='libvirt' type='struct _virSecret'/>
    <typedef name='virSecretPtr' file='libvirt' type='virSecret *'/>
    <typedef name='virSecretUsageType' file='libvirt' type='enum'/>
    <struct name='virSecurityLabel' file='libvirt' type='struct _virSecurityLabel'/>
    <typedef name='virSecurityLabelPtr' file='libvirt' type='virSecurityLabel *'>
      <info><![CDATA[a virSecurityLabelPtr is a pointer to a virSecurityLabel.]]></info>
    </typedef>
    <struct name='virSecurityModel' file='libvirt' type='struct _virSecurityModel'/>
    <typedef name='virSecurityModelPtr' file='libvirt' type='virSecurityModel *'>
      <info><![CDATA[a virSecurityModelPtr is a pointer to a virSecurityModel.]]></info>
    </typedef>
    <struct name='virStoragePool' file='libvirt' type='struct _virStoragePool'/>
    <typedef name='virStoragePoolBuildFlags' file='libvirt' type='enum'/>
    <typedef name='virStoragePoolDeleteFlags' file='libvirt' type='enum'/>
    <struct name='virStoragePoolInfo' file='libvirt' type='struct _virStoragePoolInfo'>
      <field name='state' type='int' info='virStoragePoolState flags'/>
      <field name='capacity' type='unsigned long long' info='Logical size bytes'/>
      <field name='allocation' type='unsigned long long' info='Current allocation bytes'/>
      <field name='available' type='unsigned long long' info='Remaining free space bytes'/>
    </struct>
    <typedef name='virStoragePoolInfoPtr' file='libvirt' type='virStoragePoolInfo *'/>
    <typedef name='virStoragePoolPtr' file='libvirt' type='virStoragePool *'>
      <info><![CDATA[a virStoragePoolPtr is pointer to a virStoragePool private structure, this is the type used to reference a storage pool in the API.]]></info>
    </typedef>
    <typedef name='virStoragePoolState' file='libvirt' type='enum'/>
    <struct name='virStorageVol' file='libvirt' type='struct _virStorageVol'/>
    <typedef name='virStorageVolCreateFlags' file='libvirt' type='enum'/>
    <typedef name='virStorageVolDeleteFlags' file='libvirt' type='enum'/>
    <struct name='virStorageVolInfo' file='libvirt' type='struct _virStorageVolInfo'>
      <field name='type' type='int' info='virStorageVolType flags'/>
      <field name='capacity' type='unsigned long long' info='Logical size bytes'/>
      <field name='allocation' type='unsigned long long' info='Current allocation bytes'/>
    </struct>
    <typedef name='virStorageVolInfoPtr' file='libvirt' type='virStorageVolInfo *'/>
    <typedef name='virStorageVolPtr' file='libvirt' type='virStorageVol *'>
      <info><![CDATA[a virStorageVolPtr is pointer to a virStorageVol private structure, this is the type used to reference a storage volume in the API.]]></info>
    </typedef>
    <typedef name='virStorageVolResizeFlags' file='libvirt' type='enum'/>
    <typedef name='virStorageVolType' file='libvirt' type='enum'/>
    <typedef name='virStorageVolWipeAlgorithm' file='libvirt' type='enum'/>
    <typedef name='virStorageXMLFlags' file='libvirt' type='enum'/>
    <struct name='virStream' file='libvirt' type='struct _virStream'/>
    <typedef name='virStreamEventType' file='libvirt' type='enum'/>
    <typedef name='virStreamFlags' file='libvirt' type='enum'/>
    <typedef name='virStreamPtr' file='libvirt' type='virStream *'>
      <info><![CDATA[a virStreamPtr is pointer to a virStream private structure, this is the type used to reference a data stream in the API.]]></info>
    </typedef>
    <struct name='virTypedParameter' file='libvirt' type='struct _virTypedParameter'>
      <field name='field' type='char field[VIR_TYPED_PARAM_FIELD_LENGTH]' info='parameter name'/>
      <field name='type' type='int' info='parameter type, virTypedParameterType'/>
      <field name='value' type='union' info='parameter value'>
        <union>
          <field name='i' type='int' info='type is INT'/>
          <field name='ui' type='unsigned int' info='type is UINT'/>
          <field name='l' type='long long int' info='type is LLONG'/>
          <field name='ul' type='unsigned long long int' info='type is ULLONG'/>
          <field name='d' type='double' info='type is DOUBLE'/>
          <field name='b' type='char' info='type is BOOLEAN'/>
          <field name='s' type='char *' info='type is STRING, may not be NULL'/>
        </union>
      </field>
    </struct>
    <typedef name='virTypedParameterFlags' file='libvirt' type='enum'/>
    <typedef name='virTypedParameterPtr' file='libvirt' type='virTypedParameter *'>
      <info><![CDATA[a pointer to a virTypedParameter structure.]]></info>
    </typedef>
    <typedef name='virTypedParameterType' file='libvirt' type='enum'/>
    <struct name='virVcpuInfo' file='libvirt' type='struct _virVcpuInfo'>
      <field name='number' type='unsigned int' info='virtual CPU number'/>
      <field name='state' type='int' info='value from virVcpuState'/>
      <field name='cpuTime' type='unsigned long long' info='CPU time used, in nanoseconds'/>
      <field name='cpu' type='int' info='real CPU number, or -1 if offline'/>
    </struct>
    <typedef name='virVcpuInfoPtr' file='libvirt' type='virVcpuInfo *'/>
    <typedef name='virVcpuState' file='libvirt' type='enum'/>
    <variable name='virConnectAuthPtrDefault' file='libvirt' type='virConnectAuthPtr'/>
    <function name='virConnCopyLastError' file='virterror' module='virerror'>
      <info><![CDATA[Copy the content of the last error caught on that connection

This method is not protected against access from multiple
threads. In a multi-threaded application, always use the
global virGetLastError() API which is backed by thread
local storage.

If the connection object was discovered to be invalid by
an API call, then the error will be reported against the
global error object.

Since 0.6.0, all errors reported in the per-connection object
are also duplicated in the global error object. As such an
application can always use virGetLastError(). This method
remains for backwards compatibility.

One will need to free the result with virResetError()]]></info>
      <return type='int' info='0 if no error was found and the error code otherwise and -1 in case of parameter error.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='to' type='virErrorPtr' info='target to receive the copy'/>
    </function>
    <function name='virConnGetLastError' file='virterror' module='virerror'>
      <info><![CDATA[Provide a pointer to the last error caught on that connection

This method is not protected against access from multiple
threads. In a multi-threaded application, always use the
global virGetLastError() API which is backed by thread
local storage.

If the connection object was discovered to be invalid by
an API call, then the error will be reported against the
global error object.

Since 0.6.0, all errors reported in the per-connection object
are also duplicated in the global error object. As such an
application can always use virGetLastError(). This method
remains for backwards compatibility.]]></info>
      <return type='virErrorPtr' info='a pointer to the last error or NULL if none occurred.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
    </function>
    <function name='virConnResetLastError' file='virterror' module='virerror'>
      <info><![CDATA[The error object is kept in thread local storage, so separate
threads can safely access this concurrently.

Reset the last error caught on that connection]]></info>
      <return type='void'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
    </function>
    <function name='virConnSetErrorFunc' file='virterror' module='virerror'>
      <info><![CDATA[Set a connection error handling function, if @handler is NULL
it will reset to default which is to pass error back to the global
library handler.]]></info>
      <return type='void'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='userData' type='void *' info='pointer to the user data provided in the handler callback'/>
      <arg name='handler' type='virErrorFunc' info='the function to get called in case of error or NULL'/>
    </function>
    <functype name='virConnectAuthCallbackPtr' file='libvirt' module='libvirt'>
      <info><![CDATA[When authentication requires one or more interactions, this callback
is invoked. For each interaction supplied, data must be gathered
from the user and filled in to the 'result' and 'resultlen' fields.
If an interaction cannot be filled, fill in NULL and 0.]]></info>
      <return type='int' info='0 if all interactions were filled, or -1 upon error'/>
      <arg name='cred' type='virConnectCredentialPtr' info='list of virConnectCredential object to fetch from user'/>
      <arg name='ncred' type='unsigned int' info='size of cred list'/>
      <arg name='cbdata' type='void *' info='opaque data passed to virConnectOpenAuth'/>
    </functype>
    <function name='virConnectBaselineCPU' file='libvirt' module='libvirt'>
      <info><![CDATA[Computes the most feature-rich CPU which is compatible with all given
host CPUs.

If @flags includes VIR_CONNECT_BASELINE_CPU_EXPAND_FEATURES then libvirt
will explicitly list all CPU features that are part of the host CPU,
without this flag features that are part of the CPU model will not be
listed.]]></info>
      <return type='char *' info='XML description of the computed CPU or NULL on error.'/>
      <arg name='conn' type='virConnectPtr' info='virConnect connection'/>
      <arg name='xmlCPUs' type='const char **' info='array of XML descriptions of host CPUs'/>
      <arg name='ncpus' type='unsigned int' info='number of CPUs in xmlCPUs'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virConnectBaselineCPUFlags'/>
    </function>
    <function name='virConnectClose' file='libvirt' module='libvirt'>
      <info><![CDATA[This function closes the connection to the Hypervisor. This should
not be called if further interaction with the Hypervisor are needed
especially if there is running domain which need further monitoring by
the application.

Connections are reference counted; the count is explicitly
increased by the initial open (virConnectOpen, virConnectOpenAuth,
and the like) as well as virConnectRef; it is also temporarily
increased by other API that depend on the connection remaining
alive.  The open and every virConnectRef call should have a
matching virConnectClose, and all other references will be released
after the corresponding operation completes.]]></info>
      <return type='int' info='a positive number if at least 1 reference remains on success. The returned value should not be assumed to be the total reference count. A return of 0 implies no references remain and the connection is closed and memory has been freed. A return of -1 implies a failure.  It is possible for the last virConnectClose to return a positive value if some other object still has a temporary reference to the connection, but the application should not try to further use a connection after the virConnectClose that matches the initial open.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
    </function>
    <functype name='virConnectCloseFunc' file='libvirt' module='libvirt'>
      <info><![CDATA[A callback function to be registered, and called when the connection
is closed.]]></info>
      <return type='void'/>
      <arg name='conn' type='virConnectPtr' info='virConnect connection'/>
      <arg name='reason' type='int' info='reason why the connection was closed (one of virConnectCloseReason)'/>
      <arg name='opaque' type='void *' info='opaque user data'/>
    </functype>
    <function name='virConnectCompareCPU' file='libvirt' module='libvirt'>
      <info><![CDATA[Compares the given CPU description with the host CPU]]></info>
      <return type='int' info='comparison result according to enum virCPUCompareResult'/>
      <arg name='conn' type='virConnectPtr' info='virConnect connection'/>
      <arg name='xmlDesc' type='const char *' info='XML describing the CPU to compare with host CPU'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <functype name='virConnectDomainEventBalloonChangeCallback' file='libvirt' module='libvirt'>
      <info><![CDATA[The callback signature to use when registering for an event of type
VIR_DOMAIN_EVENT_ID_BALLOON_CHANGE with virConnectDomainEventRegisterAny()]]></info>
      <return type='void'/>
      <arg name='conn' type='virConnectPtr' info='connection object'/>
      <arg name='dom' type='virDomainPtr' info='domain on which the event occurred'/>
      <arg name='actual' type='unsigned long long' info='the new balloon level measured in kibibytes(blocks of 1024 bytes)'/>
      <arg name='opaque' type='void *' info='application specified data'/>
    </functype>
    <functype name='virConnectDomainEventBlockJobCallback' file='libvirt' module='libvirt'>
      <info><![CDATA[The callback signature to use when registering for an event of type
VIR_DOMAIN_EVENT_ID_BLOCK_JOB with virConnectDomainEventRegisterAny()]]></info>
      <return type='void'/>
      <arg name='conn' type='virConnectPtr' info='connection object'/>
      <arg name='dom' type='virDomainPtr' info='domain on which the event occurred'/>
      <arg name='disk' type='const char *' info='fully-qualified filename of the affected disk'/>
      <arg name='type' type='int' info='type of block job (virDomainBlockJobType)'/>
      <arg name='status' type='int' info='final status of the operation (virConnectDomainEventBlockJobStatus)'/>
      <arg name='opaque' type='void *' info='application specified data'/>
    </functype>
    <functype name='virConnectDomainEventCallback' file='libvirt' module='libvirt'>
      <info><![CDATA[A callback function to be registered, and called when a domain event occurs]]></info>
      <return type='int' info='0 (the return value is currently ignored)'/>
      <arg name='conn' type='virConnectPtr' info='virConnect connection'/>
      <arg name='dom' type='virDomainPtr' info='The domain on which the event occurred'/>
      <arg name='event' type='int' info='The specific virDomainEventType which occurred'/>
      <arg name='detail' type='int' info='event specific detail information'/>
      <arg name='opaque' type='void *' info='opaque user data'/>
    </functype>
    <function name='virConnectDomainEventDeregister' file='libvirt' module='libvirt'>
      <info><![CDATA[Removes a callback previously registered with the
virConnectDomainEventRegister() function.

Use of this method is no longer recommended. Instead applications
should try virConnectDomainEventDeregisterAny() which has a more flexible
API contract]]></info>
      <return type='int' info='0 on success, -1 on failure.  Older versions of some hypervisors sometimes returned a positive number on success, but without any reliable semantics on what that number represents.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the connection'/>
      <arg name='cb' type='virConnectDomainEventCallback' info='callback to the function handling domain events'/>
    </function>
    <function name='virConnectDomainEventDeregisterAny' file='libvirt' module='libvirt'>
      <info><![CDATA[Removes an event callback. The callbackID parameter should be the
value obtained from a previous virConnectDomainEventRegisterAny() method.]]></info>
      <return type='int' info='0 on success, -1 on failure.  Older versions of some hypervisors sometimes returned a positive number on success, but without any reliable semantics on what that number represents.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the connection'/>
      <arg name='callbackID' type='int' info='the callback identifier'/>
    </function>
    <functype name='virConnectDomainEventDeviceRemovedCallback' file='libvirt' module='libvirt'>
      <info><![CDATA[This callback occurs when a device is removed from the domain.

The callback signature to use when registering for an event of type
VIR_DOMAIN_EVENT_ID_DEVICE_REMOVED with virConnectDomainEventRegisterAny()]]></info>
      <return type='void'/>
      <arg name='conn' type='virConnectPtr' info='connection object'/>
      <arg name='dom' type='virDomainPtr' info='domain on which the event occurred'/>
      <arg name='devAlias' type='const char *' info='device alias'/>
      <arg name='opaque' type='void *' info='application specified data'/>
    </functype>
    <functype name='virConnectDomainEventDiskChangeCallback' file='libvirt' module='libvirt'>
      <info><![CDATA[This callback occurs when disk gets changed. However,
not all @reason will cause both @oldSrcPath and @newSrcPath
to be non-NULL. Please see virConnectDomainEventDiskChangeReason
for more details.

The callback signature to use when registering for an event of type
VIR_DOMAIN_EVENT_ID_DISK_CHANGE with virConnectDomainEventRegisterAny()]]></info>
      <return type='void'/>
      <arg name='conn' type='virConnectPtr' info='connection object'/>
      <arg name='dom' type='virDomainPtr' info='domain on which the event occurred'/>
      <arg name='oldSrcPath' type='const char *' info='old source path'/>
      <arg name='newSrcPath' type='const char *' info='new source path'/>
      <arg name='devAlias' type='const char *' info='device alias name'/>
      <arg name='reason' type='int' info='reason why this callback was called; any of virConnectDomainEventDiskChangeReason'/>
      <arg name='opaque' type='void *' info='application specified data'/>
    </functype>
    <functype name='virConnectDomainEventGenericCallback' file='libvirt' module='libvirt'>
      <info><![CDATA[A generic domain event callback handler, for use with
virConnectDomainEventRegisterAny(). Specific events usually
have a customization with extra parameters, often with @opaque being
passed in a different parameter position; use VIR_DOMAIN_EVENT_CALLBACK()
when registering an appropriate handler.]]></info>
      <return type='void'/>
      <arg name='conn' type='virConnectPtr' info='the connection pointer'/>
      <arg name='dom' type='virDomainPtr' info='the domain pointer'/>
      <arg name='opaque' type='void *' info='application specified data'/>
    </functype>
    <functype name='virConnectDomainEventGraphicsCallback' file='libvirt' module='libvirt'>
      <info><![CDATA[The callback signature to use when registering for an event of type
VIR_DOMAIN_EVENT_ID_GRAPHICS with virConnectDomainEventRegisterAny()]]></info>
      <return type='void'/>
      <arg name='conn' type='virConnectPtr' info='connection object'/>
      <arg name='dom' type='virDomainPtr' info='domain on which the event occurred'/>
      <arg name='phase' type='int' info='the phase of the connection'/>
      <arg name='local' type='const virDomainEventGraphicsAddress *' info='the local server address'/>
      <arg name='remote' type='const virDomainEventGraphicsAddress *' info='the remote client address'/>
      <arg name='authScheme' type='const char *' info='the authentication scheme activated'/>
      <arg name='subject' type='const virDomainEventGraphicsSubject *' info='the authenticated subject (user)'/>
      <arg name='opaque' type='void *' info='application specified data'/>
    </functype>
    <functype name='virConnectDomainEventIOErrorCallback' file='libvirt' module='libvirt'>
      <info><![CDATA[The callback signature to use when registering for an event of type
VIR_DOMAIN_EVENT_ID_IO_ERROR with virConnectDomainEventRegisterAny()]]></info>
      <return type='void'/>
      <arg name='conn' type='virConnectPtr' info='connection object'/>
      <arg name='dom' type='virDomainPtr' info='domain on which the event occurred'/>
      <arg name='srcPath' type='const char *' info='The host file on which the IO error occurred'/>
      <arg name='devAlias' type='const char *' info='The guest device alias associated with the path'/>
      <arg name='action' type='int' info='action that is to be taken due to the IO error'/>
      <arg name='opaque' type='void *' info='application specified data'/>
    </functype>
    <functype name='virConnectDomainEventIOErrorReasonCallback' file='libvirt' module='libvirt'>
      <info><![CDATA[The callback signature to use when registering for an event of type
VIR_DOMAIN_EVENT_ID_IO_ERROR_REASON with virConnectDomainEventRegisterAny()]]></info>
      <return type='void'/>
      <arg name='conn' type='virConnectPtr' info='connection object'/>
      <arg name='dom' type='virDomainPtr' info='domain on which the event occurred'/>
      <arg name='srcPath' type='const char *' info='The host file on which the IO error occurred'/>
      <arg name='devAlias' type='const char *' info='The guest device alias associated with the path'/>
      <arg name='action' type='int' info='action that is to be taken due to the IO error'/>
      <arg name='reason' type='const char *' info='the cause of the IO error'/>
      <arg name='opaque' type='void *' info='application specified data'/>
    </functype>
    <functype name='virConnectDomainEventPMSuspendCallback' file='libvirt' module='libvirt'>
      <info><![CDATA[This callback occurs when the guest is suspended.

The callback signature to use when registering for an event of type
VIR_DOMAIN_EVENT_ID_PMSUSPEND with virConnectDomainEventRegisterAny()]]></info>
      <return type='void'/>
      <arg name='conn' type='virConnectPtr' info='connection object'/>
      <arg name='dom' type='virDomainPtr' info='domain on which the event occurred'/>
      <arg name='reason' type='int' info='reason why the callback was called, unused currently, always passes 0'/>
      <arg name='opaque' type='void *' info='application specified data'/>
    </functype>
    <functype name='virConnectDomainEventPMSuspendDiskCallback' file='libvirt' module='libvirt'>
      <info><![CDATA[This callback occurs when the guest is suspended to disk.

The callback signature to use when registering for an event of type
VIR_DOMAIN_EVENT_ID_PMSUSPEND_DISK with virConnectDomainEventRegisterAny()]]></info>
      <return type='void'/>
      <arg name='conn' type='virConnectPtr' info='connection object'/>
      <arg name='dom' type='virDomainPtr' info='domain on which the event occurred'/>
      <arg name='reason' type='int' info='reason why the callback was called, unused currently, always passes 0'/>
      <arg name='opaque' type='void *' info='application specified data'/>
    </functype>
    <functype name='virConnectDomainEventPMWakeupCallback' file='libvirt' module='libvirt'>
      <info><![CDATA[This callback occurs when the guest is woken up.

The callback signature to use when registering for an event of type
VIR_DOMAIN_EVENT_ID_PMWAKEUP with virConnectDomainEventRegisterAny()]]></info>
      <return type='void'/>
      <arg name='conn' type='virConnectPtr' info='connection object'/>
      <arg name='dom' type='virDomainPtr' info='domain on which the event occurred'/>
      <arg name='reason' type='int' info='reason why the callback was called, unused currently, always passes 0'/>
      <arg name='opaque' type='void *' info='application specified data'/>
    </functype>
    <functype name='virConnectDomainEventRTCChangeCallback' file='libvirt' module='libvirt'>
      <info><![CDATA[The callback signature to use when registering for an event of type
VIR_DOMAIN_EVENT_ID_RTC_CHANGE with virConnectDomainEventRegisterAny()]]></info>
      <return type='void'/>
      <arg name='conn' type='virConnectPtr' info='connection object'/>
      <arg name='dom' type='virDomainPtr' info='domain on which the event occurred'/>
      <arg name='utcoffset' type='long long' info='the new RTC offset from UTC, measured in seconds'/>
      <arg name='opaque' type='void *' info='application specified data'/>
    </functype>
    <function name='virConnectDomainEventRegister' file='libvirt' module='libvirt'>
      <info><![CDATA[Adds a callback to receive notifications of domain lifecycle events
occurring on a connection.  This function requires that an event loop
has been previously registered with virEventRegisterImpl() or
virEventRegisterDefaultImpl().

Use of this method is no longer recommended. Instead applications
should try virConnectDomainEventRegisterAny() which has a more flexible
API contract.

The virDomainPtr object handle passed into the callback upon delivery
of an event is only valid for the duration of execution of the callback.
If the callback wishes to keep the domain object after the callback returns,
it shall take a reference to it, by calling virDomainRef.
The reference can be released once the object is no longer required
by calling virDomainFree.]]></info>
      <return type='int' info='0 on success, -1 on failure.  Older versions of some hypervisors sometimes returned a positive number on success, but without any reliable semantics on what that number represents.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the connection'/>
      <arg name='cb' type='virConnectDomainEventCallback' info='callback to the function handling domain events'/>
      <arg name='opaque' type='void *' info='opaque data to pass on to the callback'/>
      <arg name='freecb' type='virFreeCallback' info='optional function to deallocate opaque when not used anymore'/>
    </function>
    <function name='virConnectDomainEventRegisterAny' file='libvirt' module='libvirt'>
      <info><![CDATA[Adds a callback to receive notifications of arbitrary domain events
occurring on a domain.  This function requires that an event loop
has been previously registered with virEventRegisterImpl() or
virEventRegisterDefaultImpl().

If @dom is NULL, then events will be monitored for any domain. If @dom
is non-NULL, then only the specific domain will be monitored.

Most types of event have a callback providing a custom set of parameters
for the event. When registering an event, it is thus necessary to use
the VIR_DOMAIN_EVENT_CALLBACK() macro to cast the supplied function pointer
to match the signature of this method.

The virDomainPtr object handle passed into the callback upon delivery
of an event is only valid for the duration of execution of the callback.
If the callback wishes to keep the domain object after the callback returns,
it shall take a reference to it, by calling virDomainRef().
The reference can be released once the object is no longer required
by calling virDomainFree().

The return value from this method is a positive integer identifier
for the callback. To unregister a callback, this callback ID should
be passed to the virConnectDomainEventDeregisterAny() method.]]></info>
      <return type='int' info='a callback identifier on success, -1 on failure.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the connection'/>
      <arg name='dom' type='virDomainPtr' info='pointer to the domain'/>
      <arg name='eventID' type='int' info='the event type to receive'/>
      <arg name='cb' type='virConnectDomainEventGenericCallback' info='callback to the function handling domain events'/>
      <arg name='opaque' type='void *' info='opaque data to pass on to the callback'/>
      <arg name='freecb' type='virFreeCallback' info='optional function to deallocate opaque when not used anymore'/>
    </function>
    <functype name='virConnectDomainEventTrayChangeCallback' file='libvirt' module='libvirt'>
      <info><![CDATA[This callback occurs when the tray of a removable device is moved.

The callback signature to use when registering for an event of type
VIR_DOMAIN_EVENT_ID_TRAY_CHANGE with virConnectDomainEventRegisterAny()]]></info>
      <return type='void'/>
      <arg name='conn' type='virConnectPtr' info='connection object'/>
      <arg name='dom' type='virDomainPtr' info='domain on which the event occurred'/>
      <arg name='devAlias' type='const char *' info='device alias'/>
      <arg name='reason' type='int' info='why the tray status was changed?'/>
      <arg name='opaque' type='void *' info='application specified data'/>
    </functype>
    <functype name='virConnectDomainEventWatchdogCallback' file='libvirt' module='libvirt'>
      <info><![CDATA[The callback signature to use when registering for an event of type
VIR_DOMAIN_EVENT_ID_WATCHDOG with virConnectDomainEventRegisterAny()]]></info>
      <return type='void'/>
      <arg name='conn' type='virConnectPtr' info='connection object'/>
      <arg name='dom' type='virDomainPtr' info='domain on which the event occurred'/>
      <arg name='action' type='int' info='action that is to be taken due to watchdog firing'/>
      <arg name='opaque' type='void *' info='application specified data'/>
    </functype>
    <function name='virConnectDomainXMLFromNative' file='libvirt' module='libvirt'>
      <info><![CDATA[Reads native configuration data  describing a domain, and
generates libvirt domain XML. The format of the native
data is hypervisor dependant.]]></info>
      <return type='char *' info='a 0 terminated UTF-8 encoded XML instance, or NULL in case of error. the caller must free() the returned value.'/>
      <arg name='conn' type='virConnectPtr' info='a connection object'/>
      <arg name='nativeFormat' type='const char *' info='configuration format importing from'/>
      <arg name='nativeConfig' type='const char *' info='the configuration data to import'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virConnectDomainXMLToNative' file='libvirt' module='libvirt'>
      <info><![CDATA[Reads a domain XML configuration document, and generates
a native configuration file describing the domain.
The format of the native data is hypervisor dependant.]]></info>
      <return type='char *' info='a 0 terminated UTF-8 encoded native config datafile, or NULL in case of error. the caller must free() the returned value.'/>
      <arg name='conn' type='virConnectPtr' info='a connection object'/>
      <arg name='nativeFormat' type='const char *' info='configuration format exporting to'/>
      <arg name='domainXml' type='const char *' info='the domain configuration to export'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virConnectFindStoragePoolSources' file='libvirt' module='libvirt'>
      <info><![CDATA[Talks to a storage backend and attempts to auto-discover the set of
available storage pool sources. e.g. For iSCSI this would be a set of
iSCSI targets. For NFS this would be a list of exported paths.  The
srcSpec (optional for some storage pool types, e.g. local ones) is
an instance of the storage pool's source element specifying where
to look for the pools.

srcSpec is not required for some types (e.g., those querying
local storage resources only)]]></info>
      <return type='char *' info='an xml document consisting of a SourceList element containing a source document appropriate to the given pool type for each discovered source.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to hypervisor connection'/>
      <arg name='type' type='const char *' info='type of storage pool sources to discover'/>
      <arg name='srcSpec' type='const char *' info='XML document specifying discovery source'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virConnectGetCPUModelNames' file='libvirt' module='libvirt'>
      <info><![CDATA[Get the list of supported CPU models for a specific architecture.]]></info>
      <return type='int' info='-1 on error, number of elements in @models on success.'/>
      <arg name='conn' type='virConnectPtr' info='virConnect connection'/>
      <arg name='arch' type='const char *' info='Architecture'/>
      <arg name='models' type='char ** *' info='Pointer to a variable to store the NULL-terminated array of the CPU models supported for the specified architecture.  Each element and the array itself must be freed by the caller with free.  Pass NULL if only the list length is needed.'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0.'/>
    </function>
    <function name='virConnectGetCapabilities' file='libvirt' module='libvirt'>
      <info><![CDATA[Provides capabilities of the hypervisor / driver.]]></info>
      <return type='char *' info='NULL in case of error, or an XML string defining the capabilities. The client must free the returned string after use.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
    </function>
    <function name='virConnectGetHostname' file='libvirt' module='libvirt'>
      <info><![CDATA[This returns a system hostname on which the hypervisor is
running (based on the result of the gethostname system call, but
possibly expanded to a fully-qualified domain name via getaddrinfo).
If we are connected to a remote system, then this returns the
hostname of the remote system.]]></info>
      <return type='char *' info='the hostname which must be freed by the caller, or NULL if there was an error.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to a hypervisor connection'/>
    </function>
    <function name='virConnectGetLibVersion' file='libvirt' module='libvirt'>
      <info><![CDATA[Provides @libVer, which is the version of libvirt used by the
  daemon running on the @conn host]]></info>
      <return type='int' info='-1 in case of failure, 0 otherwise, and values for @libVer have the format major * 1,000,000 + minor * 1,000 + release.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='libVer' type='unsigned long *' info='returns the libvirt library version used on the connection (OUT)'/>
    </function>
    <function name='virConnectGetMaxVcpus' file='libvirt' module='libvirt'>
      <info><![CDATA[Provides the maximum number of virtual CPUs supported for a guest VM of a
specific type. The 'type' parameter here corresponds to the 'type'
attribute in the <domain> element of the XML.]]></info>
      <return type='int' info='the maximum of virtual CPU or -1 in case of error.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='type' type='const char *' info='value of the &apos;type&apos; attribute in the &lt;domain&gt; element'/>
    </function>
    <function name='virConnectGetSysinfo' file='libvirt' module='libvirt'>
      <info><![CDATA[This returns the XML description of the sysinfo details for the
host on which the hypervisor is running, in the same format as the
<sysinfo> element of a domain XML.  This information is generally
available only for hypervisors running with root privileges.]]></info>
      <return type='char *' info='the XML string which must be freed by the caller, or NULL if there was an error.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to a hypervisor connection'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virConnectGetType' file='libvirt' module='libvirt'>
      <info><![CDATA[Get the name of the Hypervisor driver used. This is merely the driver
name; for example, both KVM and QEMU guests are serviced by the
driver for the qemu:// URI, so a return of "QEMU" does not indicate
whether KVM acceleration is present.  For more details about the
hypervisor, use virConnectGetCapabilities().]]></info>
      <return type='const char *' info='NULL in case of error, a static zero terminated string otherwise.  See also: http://www.redhat.com/archives/libvir-list/2007-February/msg00096.html'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
    </function>
    <function name='virConnectGetURI' file='libvirt' module='libvirt'>
      <info><![CDATA[This returns the URI (name) of the hypervisor connection.
Normally this is the same as or similar to the string passed
to the virConnectOpen/virConnectOpenReadOnly call, but
the driver may make the URI canonical.  If name == NULL
was passed to virConnectOpen, then the driver will return
a non-NULL URI which can be used to connect to the same
hypervisor later.]]></info>
      <return type='char *' info='the URI string which must be freed by the caller, or NULL if there was an error.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to a hypervisor connection'/>
    </function>
    <function name='virConnectGetVersion' file='libvirt' module='libvirt'>
      <info><![CDATA[Get the version level of the Hypervisor running. This may work only with
hypervisor call, i.e. with privileged access to the hypervisor, not
with a Read-Only connection.]]></info>
      <return type='int' info='-1 in case of error, 0 otherwise. if the version can&apos;t be extracted by lack of capacities returns 0 and @hvVer is 0, otherwise @hvVer value is major * 1,000,000 + minor * 1,000 + release'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='hvVer' type='unsigned long *' info='return value for the version of the running hypervisor (OUT)'/>
    </function>
    <function name='virConnectIsAlive' file='libvirt' module='libvirt'>
      <info><![CDATA[Determine if the connection to the hypervisor is still alive

A connection will be classed as alive if it is either local, or running
over a channel (TCP or UNIX socket) which is not closed.]]></info>
      <return type='int' info='1 if alive, 0 if dead, -1 on error'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the connection object'/>
    </function>
    <function name='virConnectIsEncrypted' file='libvirt' module='libvirt'>
      <info><![CDATA[Determine if the connection to the hypervisor is encrypted]]></info>
      <return type='int' info='1 if encrypted, 0 if not encrypted, -1 on error'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the connection object'/>
    </function>
    <function name='virConnectIsSecure' file='libvirt' module='libvirt'>
      <info><![CDATA[Determine if the connection to the hypervisor is secure

A connection will be classed as secure if it is either
encrypted, or running over a channel which is not exposed
to eavesdropping (eg a UNIX domain socket, or pipe)]]></info>
      <return type='int' info='1 if secure, 0 if not secure, -1 on error'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the connection object'/>
    </function>
    <function name='virConnectListAllDomains' file='libvirt' module='libvirt'>
      <info><![CDATA[Collect a possibly-filtered list of all domains, and return an allocated
array of information for each.  This API solves the race inherent in
virConnectListDomains() and virConnectListDefinedDomains().

Normally, all domains are returned; however, @flags can be used to
filter the results for a smaller list of targeted domains.  The valid
flags are divided into groups, where each group contains bits that
describe mutually exclusive attributes of a domain, and where all bits
within a group describe all possible domains.  Some hypervisors might
reject explicit bits from a group where the hypervisor cannot make a
distinction (for example, not all hypervisors can tell whether domains
have snapshots).  For a group supported by a given hypervisor, the
behavior when no bits of a group are set is identical to the behavior
when all bits in that group are set.  When setting bits from more than
one group, it is possible to select an impossible combination (such
as an inactive transient domain), in that case a hypervisor may return
either 0 or an error.

The first group of @flags is VIR_CONNECT_LIST_DOMAINS_ACTIVE (online
domains) and VIR_CONNECT_LIST_DOMAINS_INACTIVE (offline domains).

The next group of @flags is VIR_CONNECT_LIST_DOMAINS_PERSISTENT (defined
domains) and VIR_CONNECT_LIST_DOMAINS_TRANSIENT (running but not defined).

The next group of @flags covers various domain states:
VIR_CONNECT_LIST_DOMAINS_RUNNING, VIR_CONNECT_LIST_DOMAINS_PAUSED,
VIR_CONNECT_LIST_DOMAINS_SHUTOFF, and a catch-all for all other states
(such as crashed, this catch-all covers the possibility of adding new
states).

The remaining groups cover boolean attributes commonly asked about
domains; they include VIR_CONNECT_LIST_DOMAINS_MANAGEDSAVE and
VIR_CONNECT_LIST_DOMAINS_NO_MANAGEDSAVE, for filtering based on whether
a managed save image exists; VIR_CONNECT_LIST_DOMAINS_AUTOSTART and
VIR_CONNECT_LIST_DOMAINS_NO_AUTOSTART, for filtering based on autostart;
VIR_CONNECT_LIST_DOMAINS_HAS_SNAPSHOT and
VIR_CONNECT_LIST_DOMAINS_NO_SNAPSHOT, for filtering based on whether
a domain has snapshots.

Example of usage:

  virDomainPtr *domains;
  size_t i;
  int ret;
  unsigned int flags = VIR_CONNECT_LIST_DOMAINS_RUNNING |
                       VIR_CONNECT_LIST_DOMAINS_PERSISTENT;
  ret = virConnectListAllDomains(conn, &domains, flags);
  if (ret < 0)
      error();
  for (i = 0; i < ret; i++) {
       do_something_with_domain(domains[i]);
       //here or in a separate loop if needed
       virDomainFree(domains[i]);
  }
  free(domains);]]></info>
      <return type='int' info='the number of domains found or -1 and sets domains to NULL in case of error.  On success, the array stored into @domains is guaranteed to have an extra allocated element set to NULL but not included in the return count, to make iteration easier. The caller is responsible for calling virDomainFree() on each array element, then calling free() on @domains.'/>
      <arg name='conn' type='virConnectPtr' info='Pointer to the hypervisor connection.'/>
      <arg name='domains' type='virDomainPtr **' info='Pointer to a variable to store the array containing domain objects or NULL if the list is not required (just returns number of guests).'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virConnectListAllDomainsFlags'/>
    </function>
    <function name='virConnectListAllInterfaces' file='libvirt' module='libvirt'>
      <info><![CDATA[Collect the list of interfaces, and allocate an array to store those
objects. This API solves the race inherent between virConnectListInterfaces
and virConnectListDefinedInterfaces.

Normally, all interfaces are returned; however, @flags can be used to
filter the results for a smaller list of targeted interfaces.  The valid
flags are divided into groups, where each group contains bits that
describe mutually exclusive attributes of a interface, and where all bits
within a group describe all possible interfaces.

The only group of @flags is VIR_CONNECT_LIST_INTERFACES_ACTIVE (up) and
VIR_CONNECT_LIST_INTERFACES_INACTIVE (down) to filter the interfaces by state.]]></info>
      <return type='int' info='the number of interfaces found or -1 and sets @ifaces to  NULL in case of error.  On success, the array stored into @ifaces is guaranteed to have an extra allocated element set to NULL but not included in the return count, to make iteration easier.  The caller is responsible for calling virStorageInterfaceFree() on each array element, then calling free() on @ifaces.'/>
      <arg name='conn' type='virConnectPtr' info='Pointer to the hypervisor connection.'/>
      <arg name='ifaces' type='virInterfacePtr **' info='Pointer to a variable to store the array containing the interface objects or NULL if the list is not required (just returns number of interfaces).'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virConnectListAllInterfacesFlags.'/>
    </function>
    <function name='virConnectListAllNWFilters' file='libvirt' module='libvirt'>
      <info><![CDATA[Collect the list of network filters, and allocate an array to store those
objects.]]></info>
      <return type='int' info='the number of network filters found or -1 and sets @filters to  NULL in case of error.  On success, the array stored into @filters is guaranteed to have an extra allocated element set to NULL but not included in the return count, to make iteration easier.  The caller is responsible for calling virNWFilterFree() on each array element, then calling free() on @filters.'/>
      <arg name='conn' type='virConnectPtr' info='Pointer to the hypervisor connection.'/>
      <arg name='filters' type='virNWFilterPtr **' info='Pointer to a variable to store the array containing the network filter objects or NULL if the list is not required (just returns number of network filters).'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virConnectListAllNetworks' file='libvirt' module='libvirt'>
      <info><![CDATA[Collect the list of networks, and allocate an array to store those
objects. This API solves the race inherent between virConnectListNetworks
and virConnectListDefinedNetworks.

Normally, all networks are returned; however, @flags can be used to
filter the results for a smaller list of targeted networks.  The valid
flags are divided into groups, where each group contains bits that
describe mutually exclusive attributes of a network, and where all bits
within a group describe all possible networks.

The first group of @flags is VIR_CONNECT_LIST_NETWORKS_ACTIVE (up) and
VIR_CONNECT_LIST_NETWORKS_INACTIVE (down) to filter the networks by state.

The second group of @flags is VIR_CONNECT_LIST_NETWORKS_PERSISTENT (defined)
and VIR_CONNECT_LIST_NETWORKS_TRANSIENT (running but not defined), to filter
the networks by whether they have persistent config or not.

The third group of @flags is VIR_CONNECT_LIST_NETWORKS_AUTOSTART
and VIR_CONNECT_LIST_NETWORKS_NO_AUTOSTART, to filter the networks by
whether they are marked as autostart or not.]]></info>
      <return type='int' info='the number of networks found or -1 and sets @nets to  NULL in case of error.  On success, the array stored into @nets is guaranteed to have an extra allocated element set to NULL but not included in the return count, to make iteration easier.  The caller is responsible for calling virNetworkFree() on each array element, then calling free() on @nets.'/>
      <arg name='conn' type='virConnectPtr' info='Pointer to the hypervisor connection.'/>
      <arg name='nets' type='virNetworkPtr **' info='Pointer to a variable to store the array containing the network objects or NULL if the list is not required (just returns number of networks).'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virConnectListAllNetworksFlags.'/>
    </function>
    <function name='virConnectListAllNodeDevices' file='libvirt' module='libvirt'>
      <info><![CDATA[Collect the list of node devices, and allocate an array to store those
objects.

Normally, all node devices are returned; however, @flags can be used to
filter the results for a smaller list of targeted node devices.  The valid
flags are divided into groups, where each group contains bits that
describe mutually exclusive attributes of a node device, and where all bits
within a group describe all possible node devices.

Only one group of the @flags is provided to filter the node devices by
capability type, flags include:
  VIR_CONNECT_LIST_NODE_DEVICES_CAP_SYSTEM
  VIR_CONNECT_LIST_NODE_DEVICES_CAP_PCI_DEV
  VIR_CONNECT_LIST_NODE_DEVICES_CAP_USB_DEV
  VIR_CONNECT_LIST_NODE_DEVICES_CAP_USB_INTERFACE
  VIR_CONNECT_LIST_NODE_DEVICES_CAP_NET
  VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI_HOST
  VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI_TARGET
  VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI
  VIR_CONNECT_LIST_NODE_DEVICES_CAP_STORAGE
  VIR_CONNECT_LIST_NODE_DEVICES_CAP_FC_HOST
  VIR_CONNECT_LIST_NODE_DEVICES_CAP_VPORTS
  VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI_GENERIC]]></info>
      <return type='int' info='the number of node devices found or -1 and sets @devices to NULL in case of error.  On success, the array stored into @devices is guaranteed to have an extra allocated element set to NULL but not included in the return count, to make iteration easier.  The caller is responsible for calling virNodeDeviceFree() on each array element, then calling free() on @devices.'/>
      <arg name='conn' type='virConnectPtr' info='Pointer to the hypervisor connection.'/>
      <arg name='devices' type='virNodeDevicePtr **' info='Pointer to a variable to store the array containing the node device objects or NULL if the list is not required (just returns number of node devices).'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virConnectListAllNodeDevices.'/>
    </function>
    <function name='virConnectListAllSecrets' file='libvirt' module='libvirt'>
      <info><![CDATA[Collect the list of secrets, and allocate an array to store those
objects.

Normally, all secrets are returned; however, @flags can be used to
filter the results for a smaller list of targeted secrets. The valid
flags are divided into groups, where each group contains bits that
describe mutually exclusive attributes of a secret, and where all bits
within a group describe all possible secrets.

The first group of @flags is used to filter secrets by its storage
location. Flag VIR_CONNECT_LIST_SECRETS_EPHEMERAL selects secrets that
are kept only in memory. Flag VIR_CONNECT_LIST_SECRETS_NO_EPHEMERAL
selects secrets that are kept in persistent storage.

The second group of @flags is used to filter secrets by privacy. Flag
VIR_CONNECT_LIST_SECRETS_PRIVATE seclets secrets that are never revealed
to any caller of libvirt nor to any other node. Flag
VIR_CONNECT_LIST_SECRETS_NO_PRIVATE selects non-private secrets.]]></info>
      <return type='int' info='the number of secrets found or -1 and sets @secrets to NULL in case of error.  On success, the array stored into @secrets is guaranteed to have an extra allocated element set to NULL but not included in the return count, to make iteration easier.  The caller is responsible for calling virSecretFree() on each array element, then calling free() on @secrets.'/>
      <arg name='conn' type='virConnectPtr' info='Pointer to the hypervisor connection.'/>
      <arg name='secrets' type='virSecretPtr **' info='Pointer to a variable to store the array containing the secret objects or NULL if the list is not required (just returns the number of secrets).'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virConnectListAllStoragePools' file='libvirt' module='libvirt'>
      <info><![CDATA[Collect the list of storage pools, and allocate an array to store those
objects. This API solves the race inherent between
virConnectListStoragePools and virConnectListDefinedStoragePools.

Normally, all storage pools are returned; however, @flags can be used to
filter the results for a smaller list of targeted pools.  The valid
flags are divided into groups, where each group contains bits that
describe mutually exclusive attributes of a pool, and where all bits
within a group describe all possible pools.

The first group of @flags is VIR_CONNECT_LIST_STORAGE_POOLS_ACTIVE (online)
and VIR_CONNECT_LIST_STORAGE_POOLS_INACTIVE (offline) to filter the pools
by state.

The second group of @flags is VIR_CONNECT_LIST_STORAGE_POOLS_PERSITENT
(defined) and VIR_CONNECT_LIST_STORAGE_POOLS_TRANSIENT (running but not
defined), to filter the pools by whether they have persistent config or not.

The third group of @flags is VIR_CONNECT_LIST_STORAGE_POOLS_AUTOSTART
and VIR_CONNECT_LIST_STORAGE_POOLS_NO_AUTOSTART, to filter the pools by
whether they are marked as autostart or not.

The last group of @flags is provided to filter the pools by the types,
the flags include:
VIR_CONNECT_LIST_STORAGE_POOLS_DIR
VIR_CONNECT_LIST_STORAGE_POOLS_FS
VIR_CONNECT_LIST_STORAGE_POOLS_NETFS
VIR_CONNECT_LIST_STORAGE_POOLS_LOGICAL
VIR_CONNECT_LIST_STORAGE_POOLS_DISK
VIR_CONNECT_LIST_STORAGE_POOLS_ISCSI
VIR_CONNECT_LIST_STORAGE_POOLS_SCSI
VIR_CONNECT_LIST_STORAGE_POOLS_MPATH
VIR_CONNECT_LIST_STORAGE_POOLS_RBD
VIR_CONNECT_LIST_STORAGE_POOLS_SHEEPDOG]]></info>
      <return type='int' info='the number of storage pools found or -1 and sets @pools to NULL in case of error.  On success, the array stored into @pools is guaranteed to have an extra allocated element set to NULL but not included in the return count, to make iteration easier.  The caller is responsible for calling virStoragePoolFree() on each array element, then calling free() on @pools.'/>
      <arg name='conn' type='virConnectPtr' info='Pointer to the hypervisor connection.'/>
      <arg name='pools' type='virStoragePoolPtr **' info='Pointer to a variable to store the array containing storage pool objects or NULL if the list is not required (just returns number of pools).'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virConnectListAllStoragePoolsFlags.'/>
    </function>
    <function name='virConnectListDefinedDomains' file='libvirt' module='libvirt'>
      <info><![CDATA[list the defined but inactive domains, stores the pointers to the names
in @names

For active domains, see virConnectListDomains().  For more control over
the results, see virConnectListAllDomains().]]></info>
      <return type='int' info='the number of names provided in the array or -1 in case of error. Note that this command is inherently racy; a domain can be defined between a call to virConnectNumOfDefinedDomains() and this call; you are only guaranteed that all currently defined domains were listed if the return is less than @maxids.  The client must call free() on each returned name.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='names' type='char ** const' info='pointer to an array to store the names'/>
      <arg name='maxnames' type='int' info='size of the array'/>
    </function>
    <function name='virConnectListDefinedInterfaces' file='libvirt' module='libvirt'>
      <info><![CDATA[Collect the list of defined (inactive) physical host interfaces,
and store their names in @names.

For more control over the results, see virConnectListAllInterfaces().]]></info>
      <return type='int' info='the number of names provided in the array or -1 in case of error. Note that this command is inherently racy; a interface can be defined between a call to virConnectNumOfDefinedInterfaces() and this call; you are only guaranteed that all currently defined interfaces were listed if the return is less than @maxnames.  The client must call free() on each returned name.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='names' type='char ** const' info='array to collect the list of names of interfaces'/>
      <arg name='maxnames' type='int' info='size of @names'/>
    </function>
    <function name='virConnectListDefinedNetworks' file='libvirt' module='libvirt'>
      <info><![CDATA[list the inactive networks, stores the pointers to the names in @names

For more control over the results, see virConnectListAllNetworks().]]></info>
      <return type='int' info='the number of names provided in the array or -1 in case of error. Note that this command is inherently racy; a network can be defined between a call to virConnectNumOfDefinedNetworks() and this call; you are only guaranteed that all currently defined networks were listed if the return is less than @maxnames.  The client must call free() on each returned name.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='names' type='char ** const' info='pointer to an array to store the names'/>
      <arg name='maxnames' type='int' info='size of the array'/>
    </function>
    <function name='virConnectListDefinedStoragePools' file='libvirt' module='libvirt'>
      <info><![CDATA[Provides the list of names of inactive storage pools up to maxnames.
If there are more than maxnames, the remaining names will be silently
ignored.

For more control over the results, see virConnectListAllStoragePools().]]></info>
      <return type='int' info='the number of names provided in the array or -1 in case of error. Note that this command is inherently racy; a pool can be defined between a call to virConnectNumOfDefinedStoragePools() and this call; you are only guaranteed that all currently defined pools were listed if the return is less than @maxnames.  The client must call free() on each returned name.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to hypervisor connection'/>
      <arg name='names' type='char ** const' info='array of char * to fill with pool names (allocated by caller)'/>
      <arg name='maxnames' type='int' info='size of the names array'/>
    </function>
    <function name='virConnectListDomains' file='libvirt' module='libvirt'>
      <info><![CDATA[Collect the list of active domains, and store their IDs in array @ids

For inactive domains, see virConnectListDefinedDomains().  For more
control over the results, see virConnectListAllDomains().]]></info>
      <return type='int' info='the number of domains found or -1 in case of error.  Note that this command is inherently racy; a domain can be started between a call to virConnectNumOfDomains() and this call; you are only guaranteed that all currently active domains were listed if the return is less than @maxids.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='ids' type='int *' info='array to collect the list of IDs of active domains'/>
      <arg name='maxids' type='int' info='size of @ids'/>
    </function>
    <function name='virConnectListInterfaces' file='libvirt' module='libvirt'>
      <info><![CDATA[Collect the list of active physical host interfaces,
and store their names in @names

For more control over the results, see virConnectListAllInterfaces().]]></info>
      <return type='int' info='the number of interfaces found or -1 in case of error.  Note that this command is inherently racy; a interface can be started between a call to virConnectNumOfInterfaces() and this call; you are only guaranteed that all currently active interfaces were listed if the return is less than @maxnames. The client must call free() on each returned name.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='names' type='char ** const' info='array to collect the list of names of interfaces'/>
      <arg name='maxnames' type='int' info='size of @names'/>
    </function>
    <function name='virConnectListNWFilters' file='libvirt' module='libvirt'>
      <info><![CDATA[Collect the list of network filters, and store their names in @names]]></info>
      <return type='int' info='the number of network filters found or -1 in case of error'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='names' type='char ** const' info='array to collect the list of names of network filters'/>
      <arg name='maxnames' type='int' info='size of @names'/>
    </function>
    <function name='virConnectListNetworks' file='libvirt' module='libvirt'>
      <info><![CDATA[Collect the list of active networks, and store their names in @names

For more control over the results, see virConnectListAllNetworks().]]></info>
      <return type='int' info='the number of networks found or -1 in case of error.  Note that this command is inherently racy; a network can be started between a call to virConnectNumOfNetworks() and this call; you are only guaranteed that all currently active networks were listed if the return is less than @maxnames. The client must call free() on each returned name.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='names' type='char ** const' info='array to collect the list of names of active networks'/>
      <arg name='maxnames' type='int' info='size of @names'/>
    </function>
    <function name='virConnectListSecrets' file='libvirt' module='libvirt'>
      <info><![CDATA[List UUIDs of defined secrets, store pointers to names in uuids.]]></info>
      <return type='int' info='the number of UUIDs provided in the array, or -1 on failure.'/>
      <arg name='conn' type='virConnectPtr' info='virConnect connection'/>
      <arg name='uuids' type='char **' info='Pointer to an array to store the UUIDs'/>
      <arg name='maxuuids' type='int' info='size of the array.'/>
    </function>
    <function name='virConnectListStoragePools' file='libvirt' module='libvirt'>
      <info><![CDATA[Provides the list of names of active storage pools up to maxnames.
If there are more than maxnames, the remaining names will be silently
ignored.

For more control over the results, see virConnectListAllStoragePools().]]></info>
      <return type='int' info='the number of pools found or -1 in case of error.  Note that this command is inherently racy; a pool can be started between a call to virConnectNumOfStoragePools() and this call; you are only guaranteed that all currently active pools were listed if the return is less than @maxnames. The client must call free() on each returned name.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to hypervisor connection'/>
      <arg name='names' type='char ** const' info='array of char * to fill with pool names (allocated by caller)'/>
      <arg name='maxnames' type='int' info='size of the names array'/>
    </function>
    <function name='virConnectNetworkEventDeregisterAny' file='libvirt' module='libvirt'>
      <info><![CDATA[Removes an event callback. The callbackID parameter should be the
value obtained from a previous virConnectNetworkEventRegisterAny() method.]]></info>
      <return type='int' info='0 on success, -1 on failure'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the connection'/>
      <arg name='callbackID' type='int' info='the callback identifier'/>
    </function>
    <functype name='virConnectNetworkEventGenericCallback' file='libvirt' module='libvirt'>
      <info><![CDATA[A generic network event callback handler, for use with
virConnectNetworkEventRegisterAny(). Specific events usually
have a customization with extra parameters, often with @opaque being
passed in a different parameter position; use VIR_NETWORK_EVENT_CALLBACK()
when registering an appropriate handler.]]></info>
      <return type='void'/>
      <arg name='conn' type='virConnectPtr' info='the connection pointer'/>
      <arg name='net' type='virNetworkPtr' info='the network pointer'/>
      <arg name='opaque' type='void *' info='application specified data'/>
    </functype>
    <functype name='virConnectNetworkEventLifecycleCallback' file='libvirt' module='libvirt'>
      <info><![CDATA[This callback occurs when the network is started or stopped.

The callback signature to use when registering for an event of type
VIR_NETWORK_EVENT_ID_LIFECYCLE with virConnectNetworkEventRegisterAny()]]></info>
      <return type='void'/>
      <arg name='conn' type='virConnectPtr' info='connection object'/>
      <arg name='net' type='virNetworkPtr' info='network on which the event occurred'/>
      <arg name='event' type='int' info='The specific virNetworkEventLifeCycleType which occurred'/>
      <arg name='detail' type='int' info='contains some details on the reason of the event. It will be 0 for the while.'/>
      <arg name='opaque' type='void *' info='application specified data'/>
    </functype>
    <function name='virConnectNetworkEventRegisterAny' file='libvirt' module='libvirt'>
      <info><![CDATA[Adds a callback to receive notifications of arbitrary network events
occurring on a network.  This function requires that an event loop
has been previously registered with virEventRegisterImpl() or
virEventRegisterDefaultImpl().

If @net is NULL, then events will be monitored for any network. If @net
is non-NULL, then only the specific network will be monitored.

Most types of event have a callback providing a custom set of parameters
for the event. When registering an event, it is thus necessary to use
the VIR_NETWORK_EVENT_CALLBACK() macro to cast the supplied function pointer
to match the signature of this method.

The virNetworkPtr object handle passed into the callback upon delivery
of an event is only valid for the duration of execution of the callback.
If the callback wishes to keep the network object after the callback]]></info>
      <return type='int' info='it shall take a reference to it, by calling virNetworkRef(). The reference can be released once the object is no longer required by calling virNetworkFree().  The return value from this method is a positive integer identifier for the callback. To unregister a callback, this callback ID should be passed to the virConnectNetworkEventDeregisterAny() method.  Returns a callback identifier on success, -1 on failure.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the connection'/>
      <arg name='net' type='virNetworkPtr' info='pointer to the network'/>
      <arg name='eventID' type='int' info='the event type to receive'/>
      <arg name='cb' type='virConnectNetworkEventGenericCallback' info='callback to the function handling network events'/>
      <arg name='opaque' type='void *' info='opaque data to pass on to the callback'/>
      <arg name='freecb' type='virFreeCallback' info='optional function to deallocate opaque when not used anymore'/>
    </function>
    <function name='virConnectNumOfDefinedDomains' file='libvirt' module='libvirt'>
      <info><![CDATA[Provides the number of defined but inactive domains.]]></info>
      <return type='int' info='the number of domain found or -1 in case of error'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
    </function>
    <function name='virConnectNumOfDefinedInterfaces' file='libvirt' module='libvirt'>
      <info><![CDATA[Provides the number of defined (inactive) interfaces on the physical host.]]></info>
      <return type='int' info='the number of defined interface found or -1 in case of error'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
    </function>
    <function name='virConnectNumOfDefinedNetworks' file='libvirt' module='libvirt'>
      <info><![CDATA[Provides the number of inactive networks.]]></info>
      <return type='int' info='the number of networks found or -1 in case of error'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
    </function>
    <function name='virConnectNumOfDefinedStoragePools' file='libvirt' module='libvirt'>
      <info><![CDATA[Provides the number of inactive storage pools]]></info>
      <return type='int' info='the number of pools found, or -1 on error'/>
      <arg name='conn' type='virConnectPtr' info='pointer to hypervisor connection'/>
    </function>
    <function name='virConnectNumOfDomains' file='libvirt' module='libvirt'>
      <info><![CDATA[Provides the number of active domains.]]></info>
      <return type='int' info='the number of domain found or -1 in case of error'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
    </function>
    <function name='virConnectNumOfInterfaces' file='libvirt' module='libvirt'>
      <info><![CDATA[Provides the number of active interfaces on the physical host.]]></info>
      <return type='int' info='the number of active interfaces found or -1 in case of error'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
    </function>
    <function name='virConnectNumOfNWFilters' file='libvirt' module='libvirt'>
      <info><![CDATA[Provides the number of nwfilters.]]></info>
      <return type='int' info='the number of nwfilters found or -1 in case of error'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
    </function>
    <function name='virConnectNumOfNetworks' file='libvirt' module='libvirt'>
      <info><![CDATA[Provides the number of active networks.]]></info>
      <return type='int' info='the number of network found or -1 in case of error'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
    </function>
    <function name='virConnectNumOfSecrets' file='libvirt' module='libvirt'>
      <info><![CDATA[Fetch number of currently defined secrets.]]></info>
      <return type='int' info='the number currently defined secrets.'/>
      <arg name='conn' type='virConnectPtr' info='virConnect connection'/>
    </function>
    <function name='virConnectNumOfStoragePools' file='libvirt' module='libvirt'>
      <info><![CDATA[Provides the number of active storage pools]]></info>
      <return type='int' info='the number of pools found, or -1 on error'/>
      <arg name='conn' type='virConnectPtr' info='pointer to hypervisor connection'/>
    </function>
    <function name='virConnectOpen' file='libvirt' module='libvirt'>
      <info><![CDATA[This function should be called first to get a connection to the
Hypervisor and xen store

If @name is NULL, if the LIBVIRT_DEFAULT_URI environment variable is set,
then it will be used. Otherwise if the client configuration file
has the "uri_default" parameter set, then it will be used. Finally
probing will be done to determine a suitable default driver to activate.
This involves trying each hypervisor in turn until one successfully opens.

If connecting to an unprivileged hypervisor driver which requires
the libvirtd daemon to be active, it will automatically be launched
if not already running. This can be prevented by setting the
environment variable LIBVIRT_AUTOSTART=0

URIs are documented at http://libvirt.org/uri.html]]></info>
      <return type='virConnectPtr' info='a pointer to the hypervisor connection or NULL in case of error'/>
      <arg name='name' type='const char *' info='(optional) URI of the hypervisor'/>
    </function>
    <function name='virConnectOpenAuth' file='libvirt' module='libvirt'>
      <info><![CDATA[This function should be called first to get a connection to the
Hypervisor. If necessary, authentication will be performed fetching
credentials via the callback

See virConnectOpen for notes about environment variables which can
have an effect on opening drivers

URIs are documented at http://libvirt.org/uri.html]]></info>
      <return type='virConnectPtr' info='a pointer to the hypervisor connection or NULL in case of error'/>
      <arg name='name' type='const char *' info='(optional) URI of the hypervisor'/>
      <arg name='auth' type='virConnectAuthPtr' info='Authenticate callback parameters'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virConnectFlags'/>
    </function>
    <function name='virConnectOpenReadOnly' file='libvirt' module='libvirt'>
      <info><![CDATA[This function should be called first to get a restricted connection to the
library functionalities. The set of APIs usable are then restricted
on the available methods to control the domains.

See virConnectOpen for notes about environment variables which can
have an effect on opening drivers

URIs are documented at http://libvirt.org/uri.html]]></info>
      <return type='virConnectPtr' info='a pointer to the hypervisor connection or NULL in case of error'/>
      <arg name='name' type='const char *' info='(optional) URI of the hypervisor'/>
    </function>
    <function name='virConnectRef' file='libvirt' module='libvirt'>
      <info><![CDATA[Increment the reference count on the connection. For each
additional call to this method, there shall be a corresponding
call to virConnectClose to release the reference count, once
the caller no longer needs the reference to this object.

This method is typically useful for applications where multiple
threads are using a connection, and it is required that the
connection remain open until all threads have finished using
it. ie, each new thread using a connection would increment
the reference count.]]></info>
      <return type='int' info='0 in case of success, -1 in case of failure'/>
      <arg name='conn' type='virConnectPtr' info='the connection to hold a reference on'/>
    </function>
    <function name='virConnectRegisterCloseCallback' file='libvirt' module='libvirt'>
      <info><![CDATA[Registers a callback to be invoked when the connection
is closed. This callback is invoked when there is any
condition that causes the socket connection to the
hypervisor to be closed.

This function is only applicable to hypervisor drivers
which maintain a persistent open connection. Drivers
which open a new connection for every operation will
not invoke this.

The @freecb must not invoke any other libvirt public
APIs, since it is not called from a re-entrant safe
context.]]></info>
      <return type='int' info='0 on success, -1 on error'/>
      <arg name='conn' type='virConnectPtr' info='pointer to connection object'/>
      <arg name='cb' type='virConnectCloseFunc' info='callback to invoke upon close'/>
      <arg name='opaque' type='void *' info='user data to pass to @cb'/>
      <arg name='freecb' type='virFreeCallback' info='callback to free @opaque'/>
    </function>
    <function name='virConnectSetKeepAlive' file='libvirt' module='libvirt'>
      <info><![CDATA[Start sending keepalive messages after @interval seconds of inactivity and
consider the connection to be broken when no response is received after
@count keepalive messages sent in a row.  In other words, sending count + 1
keepalive message results in closing the connection.  When @interval is
<= 0, no keepalive messages will be sent.  When @count is 0, the connection
will be automatically closed after @interval seconds of inactivity without
sending any keepalive messages.

Note: The client has to implement and run an event loop with
virEventRegisterImpl() or virEventRegisterDefaultImpl() to be able to
use keepalive messages.  Failure to do so may result in connections
being closed unexpectedly.

Note: This API function controls only keepalive messages sent by the client.
If the server is configured to use keepalive you still need to run the event
loop to respond to them, even if you disable keepalives by this function.]]></info>
      <return type='int' info='-1 on error, 0 on success, 1 when remote party doesn&apos;t support keepalive messages.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to a hypervisor connection'/>
      <arg name='interval' type='int' info='number of seconds of inactivity before a keepalive message is sent'/>
      <arg name='count' type='unsigned int' info='number of messages that can be sent in a row'/>
    </function>
    <function name='virConnectUnregisterCloseCallback' file='libvirt' module='libvirt'>
      <info><![CDATA[Unregisters the callback previously set with the
virConnectRegisterCloseCallback method. The callback
will no longer receive notifications when the connection
closes. If a virFreeCallback was provided at time of
registration, it will be invoked]]></info>
      <return type='int' info='0 on success, -1 on error'/>
      <arg name='conn' type='virConnectPtr' info='pointer to connection object'/>
      <arg name='cb' type='virConnectCloseFunc' info='pointer to the current registered callback'/>
    </function>
    <function name='virCopyLastError' file='virterror' module='virerror'>
      <info><![CDATA[Copy the content of the last error caught at the library level

The error object is kept in thread local storage, so separate
threads can safely access this concurrently.

One will need to free the result with virResetError()]]></info>
      <return type='int' info='0 if no error was found and the error code otherwise and -1 in case of parameter error.'/>
      <arg name='to' type='virErrorPtr' info='target to receive the copy'/>
    </function>
    <function name='virDefaultErrorFunc' file='virterror' module='virerror'>
      <info><![CDATA[Default routine reporting an error to stderr.]]></info>
      <return type='void'/>
      <arg name='err' type='virErrorPtr' info='pointer to the error.'/>
    </function>
    <function name='virDomainAbortJob' file='libvirt' module='libvirt'>
      <info><![CDATA[Requests that the current background job be aborted at the
soonest opportunity.]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
    </function>
    <function name='virDomainAttachDevice' file='libvirt' module='libvirt'>
      <info><![CDATA[Create a virtual device attachment to backend.  This function,
having hotplug semantics, is only allowed on an active domain.

For compatibility, this method can also be used to change the media
in an existing CDROM/Floppy device, however, applications are
recommended to use the virDomainUpdateDeviceFlag method instead.]]></info>
      <return type='int' info='0 in case of success, -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='xml' type='const char *' info='pointer to XML description of one device'/>
    </function>
    <function name='virDomainAttachDeviceFlags' file='libvirt' module='libvirt'>
      <info><![CDATA[Attach a virtual device to a domain, using the flags parameter
to control how the device is attached.  VIR_DOMAIN_AFFECT_CURRENT
specifies that the device allocation is made based on current domain
state.  VIR_DOMAIN_AFFECT_LIVE specifies that the device shall be
allocated to the active domain instance only and is not added to the
persisted domain configuration.  VIR_DOMAIN_AFFECT_CONFIG
specifies that the device shall be allocated to the persisted domain
configuration only.  Note that the target hypervisor must return an
error if unable to satisfy flags.  E.g. the hypervisor driver will
return failure if LIVE is specified but it only supports modifying the
persisted device allocation.

For compatibility, this method can also be used to change the media
in an existing CDROM/Floppy device, however, applications are
recommended to use the virDomainUpdateDeviceFlag method instead.]]></info>
      <return type='int' info='0 in case of success, -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='xml' type='const char *' info='pointer to XML description of one device'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainDeviceModifyFlags'/>
    </function>
    <function name='virDomainBlockCommit' file='libvirt' module='libvirt'>
      <info><![CDATA[Commit changes that were made to temporary top-level files within a disk
image backing file chain into a lower-level base file.  In other words,
take all the difference between @base and @top, and update @base to contain
that difference; after the commit, any portion of the chain that previously
depended on @top will now depend on @base, and all files after @base up
to and including @top will now be invalidated.  A typical use of this
command is to reduce the length of a backing file chain after taking an
external disk snapshot.  To move data in the opposite direction, see
virDomainBlockPull().

This command starts a long-running commit block job, whose status may
be tracked by virDomainBlockJobInfo() with a job type of
VIR_DOMAIN_BLOCK_JOB_TYPE_COMMIT, and the operation can be aborted with
virDomainBlockJobAbort().  When finished, an asynchronous event is
raised to indicate the final status, and the job no longer exists.  If
the job is aborted, it is up to the hypervisor whether starting a new
job will resume from the same point, or start over.

Be aware that this command may invalidate files even if it is aborted;
the user is cautioned against relying on the contents of invalidated
intermediate files such as @top without manually rebasing those files
to use a backing file of a read-only copy of @base prior to the point
where the commit operation was started (although such a rebase cannot
be safely done until the commit has successfully completed).  However,
the domain itself will not have any issues; the active layer remains
valid throughout the entire commit operation.  As a convenience,
if @flags contains VIR_DOMAIN_BLOCK_COMMIT_DELETE, this command will
unlink all files that were invalidated, after the commit successfully
completes.

By default, if @base is NULL, the commit target will be the bottom of
the backing chain; if @flags contains VIR_DOMAIN_BLOCK_COMMIT_SHALLOW,
then the immediate backing file of @top will be used instead.  If @top
is NULL, the active image at the top of the chain will be used.  Some
hypervisors place restrictions on how much can be committed, and might
fail if @base is not the immediate backing file of @top, or if @top is
the active layer in use by a running domain, or if @top is not the
top-most file; restrictions may differ for online vs. offline domains.

The @disk parameter is either an unambiguous source name of the
block device (the <source file='...'/> sub-element, such as
"/path/to/image"), or the device target shorthand (the
<target dev='...'/> sub-element, such as "xvda").  Valid names
can be found by calling virDomainGetXMLDesc() and inspecting
elements within //domain/devices/disk.

The maximum bandwidth (in MiB/s) that will be used to do the commit can be
specified with the bandwidth parameter.  If set to 0, libvirt will choose a
suitable default.  Some hypervisors do not support this feature and will
return an error if bandwidth is not 0; in this case, it might still be
possible for a later call to virDomainBlockJobSetSpeed() to succeed.
The actual speed can be determined with virDomainGetBlockJobInfo().]]></info>
      <return type='int' info='0 if the operation has started, -1 on failure.'/>
      <arg name='dom' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='disk' type='const char *' info='path to the block device, or device shorthand'/>
      <arg name='base' type='const char *' info='path to backing file to merge into, or NULL for default'/>
      <arg name='top' type='const char *' info='path to file within backing chain that contains data to be merged, or NULL to merge all possible data'/>
      <arg name='bandwidth' type='unsigned long' info='(optional) specify commit bandwidth limit in MiB/s'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainBlockCommitFlags'/>
    </function>
    <function name='virDomainBlockJobAbort' file='libvirt' module='libvirt'>
      <info><![CDATA[Cancel the active block job on the given disk.

The @disk parameter is either an unambiguous source name of the
block device (the <source file='...'/> sub-element, such as
"/path/to/image"), or (since 0.9.5) the device target shorthand
(the <target dev='...'/> sub-element, such as "xvda").  Valid names
can be found by calling virDomainGetXMLDesc() and inspecting
elements within //domain/devices/disk.

If the current block job for @disk is VIR_DOMAIN_BLOCK_JOB_TYPE_PULL, then
by default, this function performs a synchronous operation and the caller
may assume that the operation has completed when 0 is returned.  However,
BlockJob operations may take a long time to cancel, and during this time
further domain interactions may be unresponsive.  To avoid this problem,
pass VIR_DOMAIN_BLOCK_JOB_ABORT_ASYNC in the @flags argument to enable
asynchronous behavior, returning as soon as possible.  When the job has
been canceled, a BlockJob event will be emitted, with status
VIR_DOMAIN_BLOCK_JOB_CANCELED (even if the ABORT_ASYNC flag was not
used); it is also possible to poll virDomainBlockJobInfo() to see if
the job cancellation is still pending.  This type of job can be restarted
to pick up from where it left off.

If the current block job for @disk is VIR_DOMAIN_BLOCK_JOB_TYPE_COPY, then
the default is to abort the mirroring and revert to the source disk;
adding @flags of VIR_DOMAIN_BLOCK_JOB_ABORT_PIVOT causes this call to
fail with VIR_ERR_BLOCK_COPY_ACTIVE if the copy is not fully populated,
otherwise it will swap the disk over to the copy to end the mirroring.  An
event will be issued when the job is ended, and it is possible to use
VIR_DOMAIN_BLOCK_JOB_ABORT_ASYNC to control whether this command waits
for the completion of the job.  Restarting this job requires starting
over from the beginning of the first phase.]]></info>
      <return type='int' info='-1 in case of failure, 0 when successful.'/>
      <arg name='dom' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='disk' type='const char *' info='path to the block device, or device shorthand'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainBlockJobAbortFlags'/>
    </function>
    <function name='virDomainBlockJobSetSpeed' file='libvirt' module='libvirt'>
      <info><![CDATA[Set the maximimum allowable bandwidth that a block job may consume.  If
bandwidth is 0, the limit will revert to the hypervisor default.

The @disk parameter is either an unambiguous source name of the
block device (the <source file='...'/> sub-element, such as
"/path/to/image"), or (since 0.9.5) the device target shorthand
(the <target dev='...'/> sub-element, such as "xvda").  Valid names
can be found by calling virDomainGetXMLDesc() and inspecting
elements within //domain/devices/disk.]]></info>
      <return type='int' info='-1 in case of failure, 0 when successful.'/>
      <arg name='dom' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='disk' type='const char *' info='path to the block device, or device shorthand'/>
      <arg name='bandwidth' type='unsigned long' info='specify bandwidth limit in MiB/s'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virDomainBlockPeek' file='libvirt' module='libvirt'>
      <info><![CDATA[This function allows you to read the contents of a domain's
disk device.

Typical uses for this are to determine if the domain has
written a Master Boot Record (indicating that the domain
has completed installation), or to try to work out the state
of the domain's filesystems.

(Note that in the local case you might try to open the
block device or file directly, but that won't work in the
remote case, nor if you don't have sufficient permission.
Hence the need for this call).

The @disk parameter is either an unambiguous source name of the
block device (the <source file='...'/> sub-element, such as
"/path/to/image"), or (since 0.9.5) the device target shorthand
(the <target dev='...'/> sub-element, such as "xvda").  Valid names
can be found by calling virDomainGetXMLDesc() and inspecting
elements within //domain/devices/disk.

'offset' and 'size' represent an area which must lie entirely
within the device or file.  'size' may be 0 to test if the
call would succeed.

'buffer' is the return buffer and must be at least 'size' bytes.

NB. The remote driver imposes a 64K byte limit on 'size'.
For your program to be able to work reliably over a remote
connection you should split large requests to <= 65536 bytes.
However, with 0.9.13 this RPC limit has been raised to 1M byte.
Starting with version 1.0.6 the RPC limit has been raised again.
Now large requests up to 16M byte are supported.]]></info>
      <return type='int' info='0 in case of success or -1 in case of failure. really 64 bits'/>
      <arg name='dom' type='virDomainPtr' info='pointer to the domain object'/>
      <arg name='disk' type='const char *' info='path to the block device, or device shorthand'/>
      <arg name='offset' type='unsigned long long' info='offset within block device'/>
      <arg name='size' type='size_t' info='size to read'/>
      <arg name='buffer' type='void *' info='return buffer (must be at least size bytes)'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virDomainBlockPull' file='libvirt' module='libvirt'>
      <info><![CDATA[Populate a disk image with data from its backing image.  Once all data from
its backing image has been pulled, the disk no longer depends on a backing
image.  This function pulls data for the entire device in the background.
Progress of the operation can be checked with virDomainGetBlockJobInfo() and
the operation can be aborted with virDomainBlockJobAbort().  When finished,
an asynchronous event is raised to indicate the final status.  To move
data in the opposite direction, see virDomainBlockCommit().

The @disk parameter is either an unambiguous source name of the
block device (the <source file='...'/> sub-element, such as
"/path/to/image"), or (since 0.9.5) the device target shorthand
(the <target dev='...'/> sub-element, such as "xvda").  Valid names
can be found by calling virDomainGetXMLDesc() and inspecting
elements within //domain/devices/disk.

The maximum bandwidth (in MiB/s) that will be used to do the copy can be
specified with the bandwidth parameter.  If set to 0, libvirt will choose a
suitable default.  Some hypervisors do not support this feature and will
return an error if bandwidth is not 0; in this case, it might still be
possible for a later call to virDomainBlockJobSetSpeed() to succeed.
The actual speed can be determined with virDomainGetBlockJobInfo().

This is shorthand for virDomainBlockRebase() with a NULL base.]]></info>
      <return type='int' info='0 if the operation has started, -1 on failure.'/>
      <arg name='dom' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='disk' type='const char *' info='path to the block device, or device shorthand'/>
      <arg name='bandwidth' type='unsigned long' info='(optional) specify copy bandwidth limit in MiB/s'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virDomainBlockRebase' file='libvirt' module='libvirt'>
      <info><![CDATA[Populate a disk image with data from its backing image chain, and
setting the backing image to @base, or alternatively copy an entire
backing chain to a new file @base.

When @flags is 0, this starts a pull, where @base must be the absolute
path of one of the backing images further up the chain, or NULL to
convert the disk image so that it has no backing image.  Once all
data from its backing image chain has been pulled, the disk no
longer depends on those intermediate backing images.  This function
pulls data for the entire device in the background.  Progress of
the operation can be checked with virDomainGetBlockJobInfo() with a
job type of VIR_DOMAIN_BLOCK_JOB_TYPE_PULL, and the operation can be
aborted with virDomainBlockJobAbort().  When finished, an asynchronous
event is raised to indicate the final status, and the job no longer
exists.  If the job is aborted, a new one can be started later to
resume from the same point.

When @flags includes VIR_DOMAIN_BLOCK_REBASE_COPY, this starts a copy,
where @base must be the name of a new file to copy the chain to.  By
default, the copy will pull the entire source chain into the destination
file, but if @flags also contains VIR_DOMAIN_BLOCK_REBASE_SHALLOW, then
only the top of the source chain will be copied (the source and
destination have a common backing file).  By default, @base will be
created with the same file format as the source, but this can be altered
by adding VIR_DOMAIN_BLOCK_REBASE_COPY_RAW to force the copy to be raw
(does not make sense with the shallow flag unless the source is also raw),
or by using VIR_DOMAIN_BLOCK_REBASE_REUSE_EXT to reuse an existing file
with initial contents identical to the backing file of the source (this
allows a management app to pre-create files with relative backing file
names, rather than the default of absolute backing file names; as a
security precaution, you should generally only use reuse_ext with the
shallow flag and a non-raw destination file).

A copy job has two parts; in the first phase, the @bandwidth parameter
affects how fast the source is pulled into the destination, and the job
can only be canceled by reverting to the source file; progress in this
phase can be tracked via the virDomainBlockJobInfo() command, with a
job type of VIR_DOMAIN_BLOCK_JOB_TYPE_COPY.  The job transitions to the
second phase when the job info states cur == end, and remains alive to
mirror all further changes to both source and destination.  The user
must call virDomainBlockJobAbort() to end the mirroring while choosing
whether to revert to source or pivot to the destination.  An event is
issued when the job ends, and depending on the hypervisor, an event may
also be issued when the job transitions from pulling to mirroring.  If
the job is aborted, a new job will have to start over from the beginning
of the first phase.

Some hypervisors will restrict certain actions, such as virDomainSave()
or virDomainDetachDevice(), while a copy job is active; they may
also restrict a copy job to transient domains.

The @disk parameter is either an unambiguous source name of the
block device (the <source file='...'/> sub-element, such as
"/path/to/image"), or the device target shorthand (the
<target dev='...'/> sub-element, such as "xvda").  Valid names
can be found by calling virDomainGetXMLDesc() and inspecting
elements within //domain/devices/disk.

The maximum bandwidth (in MiB/s) that will be used to do the copy can be
specified with the bandwidth parameter.  If set to 0, libvirt will choose a
suitable default.  Some hypervisors do not support this feature and will
return an error if bandwidth is not 0; in this case, it might still be
possible for a later call to virDomainBlockJobSetSpeed() to succeed.
The actual speed can be determined with virDomainGetBlockJobInfo().

When @base is NULL and @flags is 0, this is identical to
virDomainBlockPull().]]></info>
      <return type='int' info='0 if the operation has started, -1 on failure.'/>
      <arg name='dom' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='disk' type='const char *' info='path to the block device, or device shorthand'/>
      <arg name='base' type='const char *' info='path to backing file to keep, or NULL for no backing file'/>
      <arg name='bandwidth' type='unsigned long' info='(optional) specify copy bandwidth limit in MiB/s'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainBlockRebaseFlags'/>
    </function>
    <function name='virDomainBlockResize' file='libvirt' module='libvirt'>
      <info><![CDATA[Resize a block device of domain while the domain is running.  If
@flags is 0, then @size is in kibibytes (blocks of 1024 bytes);
since 0.9.11, if @flags includes VIR_DOMAIN_BLOCK_RESIZE_BYTES,
@size is in bytes instead.  @size is taken directly as the new
size.  Depending on the file format, the hypervisor may round up
to the next alignment boundary.

The @disk parameter is either an unambiguous source name of the
block device (the <source file='...'/> sub-element, such as
"/path/to/image"), or (since 0.9.5) the device target shorthand
(the <target dev='...'/> sub-element, such as "xvda").  Valid names
can be found by calling virDomainGetXMLDesc() and inspecting
elements within //domain/devices/disk.

Note that this call may fail if the underlying virtualization hypervisor
does not support it; this call requires privileged access to the
hypervisor.]]></info>
      <return type='int' info='0 in case of success or -1 in case of failure.'/>
      <arg name='dom' type='virDomainPtr' info='pointer to the domain object'/>
      <arg name='disk' type='const char *' info='path to the block image, or shorthand'/>
      <arg name='size' type='unsigned long long' info='new size of the block image, see below for unit'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainBlockResizeFlags'/>
    </function>
    <function name='virDomainBlockStats' file='libvirt' module='libvirt'>
      <info><![CDATA[This function returns block device (disk) stats for block
devices attached to the domain.

The @disk parameter is either the device target shorthand (the
<target dev='...'/> sub-element, such as "xvda"), or (since 0.9.8)
an unambiguous source name of the block device (the <source
file='...'/> sub-element, such as "/path/to/image").  Valid names
can be found by calling virDomainGetXMLDesc() and inspecting
elements within //domain/devices/disk. Some drivers might also
accept the empty string for the @disk parameter, and then yield
summary stats for the entire domain.

Domains may have more than one block device.  To get stats for
each you should make multiple calls to this function.

Individual fields within the stats structure may be returned
as -1, which indicates that the hypervisor does not support
that particular statistic.]]></info>
      <return type='int' info='0 in case of success or -1 in case of failure.'/>
      <arg name='dom' type='virDomainPtr' info='pointer to the domain object'/>
      <arg name='disk' type='const char *' info='path to the block device, or device shorthand'/>
      <arg name='stats' type='virDomainBlockStatsPtr' info='block device stats (returned)'/>
      <arg name='size' type='size_t' info='size of stats structure'/>
    </function>
    <function name='virDomainBlockStatsFlags' file='libvirt' module='libvirt'>
      <info><![CDATA[This function is to get block stats parameters for block
devices attached to the domain.

The @disk parameter is either the device target shorthand (the
<target dev='...'/> sub-element, such as "xvda"), or (since 0.9.8)
an unambiguous source name of the block device (the <source
file='...'/> sub-element, such as "/path/to/image").  Valid names
can be found by calling virDomainGetXMLDesc() and inspecting
elements within //domain/devices/disk. Some drivers might also
accept the empty string for the @disk parameter, and then yield
summary stats for the entire domain.

Domains may have more than one block device.  To get stats for
each you should make multiple calls to this function.

On input, @nparams gives the size of the @params array; on output,
@nparams gives how many slots were filled with parameter
information, which might be less but will not exceed the input
value.

As a special case, calling with @params as NULL and @nparams as 0 on
input will cause @nparams on output to contain the number of parameters
supported by the hypervisor. (Note that block devices of different types
might support different parameters, so it might be necessary to compute
@nparams for each block device). The caller should then allocate @params
array, i.e. (sizeof(@virTypedParameter) * @nparams) bytes and call the API
again. See virDomainGetMemoryParameters() for more details.]]></info>
      <return type='int' info='-1 in case of error, 0 in case of success.'/>
      <arg name='dom' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='disk' type='const char *' info='path to the block device, or device shorthand'/>
      <arg name='params' type='virTypedParameterPtr' info='pointer to block stats parameter object (return value)'/>
      <arg name='nparams' type='int *' info='pointer to number of block stats; input and output'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virTypedParameterFlags'/>
    </function>
    <function name='virDomainCoreDump' file='libvirt' module='libvirt'>
      <info><![CDATA[This method will dump the core of a domain on a given file for analysis.
Note that for remote Xen Daemon the file path will be interpreted in
the remote host. Hypervisors may require  the user to manually ensure
proper permissions on the file named by @to.

If @flags includes VIR_DUMP_CRASH, then leave the guest shut off with
a crashed state after the dump completes.  If @flags includes
VIR_DUMP_LIVE, then make the core dump while continuing to allow
the guest to run; otherwise, the guest is suspended during the dump.
VIR_DUMP_RESET flag forces reset of the quest after dump.
The above three flags are mutually exclusive.

Additionally, if @flags includes VIR_DUMP_BYPASS_CACHE, then libvirt
will attempt to bypass the file system cache while creating the file,
or fail if it cannot do so for the given system; this can allow less
pressure on file system cache, but also risks slowing saves to NFS.

For more control over the output format, see virDomainCoreDumpWithFormat().]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='to' type='const char *' info='path for the core file'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainCoreDumpFlags'/>
    </function>
    <function name='virDomainCoreDumpWithFormat' file='libvirt' module='libvirt'>
      <info><![CDATA[This method will dump the core of a domain on a given file for analysis.
Note that for remote Xen Daemon the file path will be interpreted in
the remote host. Hypervisors may require  the user to manually ensure
proper permissions on the file named by @to.

@dumpformat controls which format the dump will have; use of
VIR_DOMAIN_CORE_DUMP_FORMAT_RAW mirrors what virDomainCoreDump() will
perform.  Not all hypervisors are able to support all formats.

If @flags includes VIR_DUMP_CRASH, then leave the guest shut off with
a crashed state after the dump completes.  If @flags includes
VIR_DUMP_LIVE, then make the core dump while continuing to allow
the guest to run; otherwise, the guest is suspended during the dump.
VIR_DUMP_RESET flag forces reset of the quest after dump.
The above three flags are mutually exclusive.

Additionally, if @flags includes VIR_DUMP_BYPASS_CACHE, then libvirt
will attempt to bypass the file system cache while creating the file,
or fail if it cannot do so for the given system; this can allow less
pressure on file system cache, but also risks slowing saves to NFS.]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='to' type='const char *' info='path for the core file'/>
      <arg name='dumpformat' type='unsigned int' info='format of domain memory&apos;s dump'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainCoreDumpFlags'/>
    </function>
    <function name='virDomainCreate' file='libvirt' module='libvirt'>
      <info><![CDATA[Launch a defined domain. If the call succeeds the domain moves from the
defined to the running domains pools.  The domain will be paused only
if restoring from managed state created from a paused domain.  For more
control, see virDomainCreateWithFlags().]]></info>
      <return type='int' info='0 in case of success, -1 in case of error'/>
      <arg name='domain' type='virDomainPtr' info='pointer to a defined domain'/>
    </function>
    <function name='virDomainCreateLinux' file='libvirt' module='libvirt'>
      <info><![CDATA[Deprecated after 0.4.6.
Renamed to virDomainCreateXML() providing identical functionality.
This existing name will left indefinitely for API compatibility.]]></info>
      <return type='virDomainPtr' info='a new domain object or NULL in case of failure'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='xmlDesc' type='const char *' info='string containing an XML description of the domain'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virDomainCreateWithFiles' file='libvirt' module='libvirt'>
      <info><![CDATA[Launch a defined domain. If the call succeeds the domain moves from the
defined to the running domains pools.

@files provides an array of file descriptors which will be
made available to the 'init' process of the guest. The file
handles exposed to the guest will be renumbered to start
from 3 (ie immediately following stderr). This is only
supported for guests which use container based virtualization
technology.

If the VIR_DOMAIN_START_PAUSED flag is set, or if the guest domain
has a managed save image that requested paused state (see
virDomainManagedSave()) the guest domain will be started, but its
CPUs will remain paused. The CPUs can later be manually started
using virDomainResume().  In all other cases, the guest domain will
be running.

If the VIR_DOMAIN_START_AUTODESTROY flag is set, the guest
domain will be automatically destroyed when the virConnectPtr
object is finally released. This will also happen if the
client application crashes / loses its connection to the
libvirtd daemon. Any domains marked for auto destroy will
block attempts at migration, save-to-file, or snapshots.

If the VIR_DOMAIN_START_BYPASS_CACHE flag is set, and there is a
managed save file for this domain (created by virDomainManagedSave()),
then libvirt will attempt to bypass the file system cache while restoring
the file, or fail if it cannot do so for the given system; this can allow
less pressure on file system cache, but also risks slowing loads from NFS.

If the VIR_DOMAIN_START_FORCE_BOOT flag is set, then any managed save
file for this domain is discarded, and the domain boots from scratch.]]></info>
      <return type='int' info='0 in case of success, -1 in case of error'/>
      <arg name='domain' type='virDomainPtr' info='pointer to a defined domain'/>
      <arg name='nfiles' type='unsigned int' info='number of file descriptors passed'/>
      <arg name='files' type='int *' info='list of file descriptors passed'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of supported virDomainCreateFlags'/>
    </function>
    <function name='virDomainCreateWithFlags' file='libvirt' module='libvirt'>
      <info><![CDATA[Launch a defined domain. If the call succeeds the domain moves from the
defined to the running domains pools.

If the VIR_DOMAIN_START_PAUSED flag is set, or if the guest domain
has a managed save image that requested paused state (see
virDomainManagedSave()) the guest domain will be started, but its
CPUs will remain paused. The CPUs can later be manually started
using virDomainResume().  In all other cases, the guest domain will
be running.

If the VIR_DOMAIN_START_AUTODESTROY flag is set, the guest
domain will be automatically destroyed when the virConnectPtr
object is finally released. This will also happen if the
client application crashes / loses its connection to the
libvirtd daemon. Any domains marked for auto destroy will
block attempts at migration, save-to-file, or snapshots.

If the VIR_DOMAIN_START_BYPASS_CACHE flag is set, and there is a
managed save file for this domain (created by virDomainManagedSave()),
then libvirt will attempt to bypass the file system cache while restoring
the file, or fail if it cannot do so for the given system; this can allow
less pressure on file system cache, but also risks slowing loads from NFS.

If the VIR_DOMAIN_START_FORCE_BOOT flag is set, then any managed save
file for this domain is discarded, and the domain boots from scratch.]]></info>
      <return type='int' info='0 in case of success, -1 in case of error'/>
      <arg name='domain' type='virDomainPtr' info='pointer to a defined domain'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of supported virDomainCreateFlags'/>
    </function>
    <function name='virDomainCreateXML' file='libvirt' module='libvirt'>
      <info><![CDATA[Launch a new guest domain, based on an XML description similar
to the one returned by virDomainGetXMLDesc()
This function may require privileged access to the hypervisor.
The domain is not persistent, so its definition will disappear when it
is destroyed, or if the host is restarted (see virDomainDefineXML() to
define persistent domains).

If the VIR_DOMAIN_START_PAUSED flag is set, the guest domain
will be started, but its CPUs will remain paused. The CPUs
can later be manually started using virDomainResume.

If the VIR_DOMAIN_START_AUTODESTROY flag is set, the guest
domain will be automatically destroyed when the virConnectPtr
object is finally released. This will also happen if the
client application crashes / loses its connection to the
libvirtd daemon. Any domains marked for auto destroy will
block attempts at migration, save-to-file, or snapshots.]]></info>
      <return type='virDomainPtr' info='a new domain object or NULL in case of failure'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='xmlDesc' type='const char *' info='string containing an XML description of the domain'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of supported virDomainCreateFlags'/>
    </function>
    <function name='virDomainCreateXMLWithFiles' file='libvirt' module='libvirt'>
      <info><![CDATA[Launch a new guest domain, based on an XML description similar
to the one returned by virDomainGetXMLDesc()
This function may require privileged access to the hypervisor.
The domain is not persistent, so its definition will disappear when it
is destroyed, or if the host is restarted (see virDomainDefineXML() to
define persistent domains).

@files provides an array of file descriptors which will be
made available to the 'init' process of the guest. The file
handles exposed to the guest will be renumbered to start
from 3 (ie immediately following stderr). This is only
supported for guests which use container based virtualization
technology.

If the VIR_DOMAIN_START_PAUSED flag is set, the guest domain
will be started, but its CPUs will remain paused. The CPUs
can later be manually started using virDomainResume.

If the VIR_DOMAIN_START_AUTODESTROY flag is set, the guest
domain will be automatically destroyed when the virConnectPtr
object is finally released. This will also happen if the
client application crashes / loses its connection to the
libvirtd daemon. Any domains marked for auto destroy will
block attempts at migration, save-to-file, or snapshots.]]></info>
      <return type='virDomainPtr' info='a new domain object or NULL in case of failure'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='xmlDesc' type='const char *' info='string containing an XML description of the domain'/>
      <arg name='nfiles' type='unsigned int' info='number of file descriptors passed'/>
      <arg name='files' type='int *' info='list of file descriptors passed'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of supported virDomainCreateFlags'/>
    </function>
    <function name='virDomainDefineXML' file='libvirt' module='libvirt'>
      <info><![CDATA[Define a domain, but does not start it.
This definition is persistent, until explicitly undefined with
virDomainUndefine(). A previous definition for this domain would be
overridden if it already exists.

Some hypervisors may prevent this operation if there is a current
block copy operation on a transient domain with the same id as the
domain being defined; in that case, use virDomainBlockJobAbort() to
stop the block copy first.]]></info>
      <return type='virDomainPtr' info='NULL in case of error, a pointer to the domain otherwise'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='xml' type='const char *' info='the XML description for the domain, preferably in UTF-8'/>
    </function>
    <function name='virDomainDestroy' file='libvirt' module='libvirt'>
      <info><![CDATA[Destroy the domain object. The running instance is shutdown if not down
already and all resources used by it are given back to the hypervisor. This
does not free the associated virDomainPtr object.
This function may require privileged access.

virDomainDestroy first requests that a guest terminate
(e.g. SIGTERM), then waits for it to comply. After a reasonable
timeout, if the guest still exists, virDomainDestroy will
forcefully terminate the guest (e.g. SIGKILL) if necessary (which
may produce undesirable results, for example unflushed disk cache
in the guest). To avoid this possibility, it's recommended to
instead call virDomainDestroyFlags, sending the
VIR_DOMAIN_DESTROY_GRACEFUL flag.

If the domain is transient and has any snapshot metadata (see
virDomainSnapshotNum()), then that metadata will automatically
be deleted when the domain quits.]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
    </function>
    <function name='virDomainDestroyFlags' file='libvirt' module='libvirt'>
      <info><![CDATA[Destroy the domain object. The running instance is shutdown if not down
already and all resources used by it are given back to the hypervisor.
This does not free the associated virDomainPtr object.
This function may require privileged access.

Calling this function with no @flags set (equal to zero) is
equivalent to calling virDomainDestroy, and after a reasonable
timeout will forcefully terminate the guest (e.g. SIGKILL) if
necessary (which may produce undesirable results, for example
unflushed disk cache in the guest). Including
VIR_DOMAIN_DESTROY_GRACEFUL in the flags will prevent the forceful
termination of the guest, and virDomainDestroyFlags will instead
return an error if the guest doesn't terminate by the end of the
timeout; at that time, the management application can decide if
calling again without VIR_DOMAIN_DESTROY_GRACEFUL is appropriate.

Another alternative which may produce cleaner results for the
guest's disks is to use virDomainShutdown() instead, but that
depends on guest support (some hypervisor/guest combinations may
ignore the shutdown request).]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainDestroyFlagsValues'/>
    </function>
    <function name='virDomainDetachDevice' file='libvirt' module='libvirt'>
      <info><![CDATA[Destroy a virtual device attachment to backend.  This function,
having hot-unplug semantics, is only allowed on an active domain.]]></info>
      <return type='int' info='0 in case of success, -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='xml' type='const char *' info='pointer to XML description of one device'/>
    </function>
    <function name='virDomainDetachDeviceFlags' file='libvirt' module='libvirt'>
      <info><![CDATA[Detach a virtual device from a domain, using the flags parameter
to control how the device is detached.  VIR_DOMAIN_AFFECT_CURRENT
specifies that the device allocation is removed based on current domain
state.  VIR_DOMAIN_AFFECT_LIVE specifies that the device shall be
deallocated from the active domain instance only and is not from the
persisted domain configuration.  VIR_DOMAIN_AFFECT_CONFIG
specifies that the device shall be deallocated from the persisted domain
configuration only.  Note that the target hypervisor must return an
error if unable to satisfy flags.  E.g. the hypervisor driver will
return failure if LIVE is specified but it only supports removing the
persisted device allocation.

Some hypervisors may prevent this operation if there is a current
block copy operation on the device being detached; in that case,
use virDomainBlockJobAbort() to stop the block copy first.

Beware that depending on the hypervisor and device type, detaching a device
from a running domain may be asynchronous. That is, calling
virDomainDetachDeviceFlags may just request device removal while the device
is actually removed later (in cooperation with a guest OS). Previously,
this fact was ignored and the device could have been removed from domain
configuration before it was actually removed by the hypervisor causing
various failures on subsequent operations. To check whether the device was
successfully removed, either recheck domain configuration using
virDomainGetXMLDesc() or add handler for VIR_DOMAIN_EVENT_ID_DEVICE_REMOVED
event. In case the device is already gone when virDomainDetachDeviceFlags]]></info>
      <return type='int' info='the event is delivered before this API call ends. To help existing clients work better in most cases, this API will try to transform an asynchronous device removal that finishes shortly after the request into a synchronous removal. In other words, this API may wait a bit for the removal to complete in case it was not synchronous.  Returns 0 in case of success, -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='xml' type='const char *' info='pointer to XML description of one device'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainDeviceModifyFlags'/>
    </function>
    <function name='virDomainFSTrim' file='libvirt' module='libvirt'>
      <info><![CDATA[Calls FITRIM within the guest (hence guest agent may be
required depending on hypervisor used). Either call it on each
mounted filesystem (@mountPoint is NULL) or just on specified
@mountPoint. @minimum hints that free ranges smaller than this
may be ignored (this is a hint and the guest may not respect
it).  By increasing this value, the fstrim operation will
complete more quickly for filesystems with badly fragmented
free space, although not all blocks will be discarded.
If @minimum is not zero, the command may fail.]]></info>
      <return type='int' info='0 on success, -1 otherwise.'/>
      <arg name='dom' type='virDomainPtr' info='a domain object'/>
      <arg name='mountPoint' type='const char *' info='which mount point to trim'/>
      <arg name='minimum' type='unsigned long long' info='Minimum contiguous free range to discard in bytes'/>
      <arg name='flags' type='unsigned int' info='extra flags, not used yet, so callers should always pass 0'/>
    </function>
    <function name='virDomainFree' file='libvirt' module='libvirt'>
      <info><![CDATA[Free the domain object. The running instance is kept alive.
The data structure is freed and should not be used thereafter.]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
    </function>
    <function name='virDomainGetAutostart' file='libvirt' module='libvirt'>
      <info><![CDATA[Provides a boolean value indicating whether the domain
configured to be automatically started when the host
machine boots.]]></info>
      <return type='int' info='-1 in case of error, 0 in case of success'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='autostart' type='int *' info='the value returned'/>
    </function>
    <function name='virDomainGetBlkioParameters' file='libvirt' module='libvirt'>
      <info><![CDATA[Get all blkio parameters.  On input, @nparams gives the size of the
@params array; on output, @nparams gives how many slots were filled
with parameter information, which might be less but will not exceed
the input value.

As a special case, calling with @params as NULL and @nparams as 0 on
input will cause @nparams on output to contain the number of parameters
supported by the hypervisor. The caller should then allocate @params
array, i.e. (sizeof(@virTypedParameter) * @nparams) bytes and call the API
again.

See virDomainGetMemoryParameters() for an equivalent usage example.

This function may require privileged access to the hypervisor. This function
expects the caller to allocate the @params.]]></info>
      <return type='int' info='-1 in case of error, 0 in case of success.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='params' type='virTypedParameterPtr' info='pointer to blkio parameter object (return value, allocated by the caller)'/>
      <arg name='nparams' type='int *' info='pointer to number of blkio parameters; input and output'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainModificationImpact and virTypedParameterFlags'/>
    </function>
    <function name='virDomainGetBlockInfo' file='libvirt' module='libvirt'>
      <info><![CDATA[Extract information about a domain's block device.

The @disk parameter is either an unambiguous source name of the
block device (the <source file='...'/> sub-element, such as
"/path/to/image"), or (since 0.9.5) the device target shorthand
(the <target dev='...'/> sub-element, such as "xvda").  Valid names
can be found by calling virDomainGetXMLDesc() and inspecting
elements within //domain/devices/disk.

For QEMU domains, the allocation and physical virDomainBlockInfo
values returned will generally be the same, except when using a
non raw, block backing device, such as qcow2 for an active domain.
When the persistent domain is not active, QEMU will return the
default which is the same value for allocation and physical.

Active QEMU domains can return an allocation value which is more
representative of the currently used blocks by the device compared
to the physical size of the device. Applications can use/monitor
the allocation value with the understanding that if the domain
becomes inactive during an attempt to get the value, the default
values will be returned. Thus, the application should check
after the call for the domain being inactive if the values are
the same. Optionally, the application could be watching for a
shutdown event and then ignore any values received afterwards.
This can be an issue when a domain is being migrated and the
exact timing of the domain being made inactive and check of
the allocation value results the default being returned. For
a transient domain in the similar situation, this call will return
-1 and an error message indicating the "domain is not running".

The following is some pseudo code illustrating the call sequence:

  ...
  virDomainPtr dom;
  virDomainBlockInfo info;
  char *device;
  ...
  // Either get a list of all domains or a specific domain
  // via a virDomainLookupBy*() call.
  //
  // It's also required to fill in the device pointer, but that's
  // specific to the implementation. For the purposes of this example
  // a qcow2 backed device name string would need to be provided.
  ...
  // If the following call is made on a persistent domain with a
  // qcow2 block backed block device, then it's possible the returned
  // allocation equals the physical value. In that case, the domain
  // that may have been active prior to calling has become inactive,
  // such as is the case during a domain migration. Thus once we
  // get data returned, check for active domain when the values are
  // the same.
  if (virDomainGetBlockInfo(dom, device, &info, 0) < 0)
      goto failure;
  if (info.allocation == info.physical) {
      // If the domain is no longer active,
      // then the defaults are being returned.
      if (!virDomainIsActive())
              goto ignore_return;
  }
  // Do something with the allocation and physical values
  ...]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='disk' type='const char *' info='path to the block device, or device shorthand'/>
      <arg name='info' type='virDomainBlockInfoPtr' info='pointer to a virDomainBlockInfo structure allocated by the user'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virDomainGetBlockIoTune' file='libvirt' module='libvirt'>
      <info><![CDATA[Get all block IO tunable parameters for a given device.  On input,
@nparams gives the size of the @params array; on output, @nparams
gives how many slots were filled with parameter information, which
might be less but will not exceed the input value.

As a special case, calling with @params as NULL and @nparams as 0
on input will cause @nparams on output to contain the number of
parameters supported by the hypervisor, either for the given @disk
(note that block devices of different types might support different
parameters), or if @disk is NULL, for all possible disks. The
caller should then allocate @params array,
i.e. (sizeof(@virTypedParameter) * @nparams) bytes and call the API
again.  See virDomainGetMemoryParameters() for more details.

The @disk parameter is either an unambiguous source name of the
block device (the <source file='...'/> sub-element, such as
"/path/to/image"), or the device target shorthand (the <target
dev='...'/> sub-element, such as "xvda").  Valid names can be found
by calling virDomainGetXMLDesc() and inspecting elements
within //domain/devices/disk.  This parameter cannot be NULL
unless @nparams is 0 on input.]]></info>
      <return type='int' info='-1 in case of error, 0 in case of success.'/>
      <arg name='dom' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='disk' type='const char *' info='path to the block device, or device shorthand'/>
      <arg name='params' type='virTypedParameterPtr' info='Pointer to blkio parameter object (return value, allocated by the caller)'/>
      <arg name='nparams' type='int *' info='Pointer to number of blkio parameters'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainModificationImpact and virTypedParameterFlags'/>
    </function>
    <function name='virDomainGetBlockJobInfo' file='libvirt' module='libvirt'>
      <info><![CDATA[Request block job information for the given disk.  If an operation is active
@info will be updated with the current progress.

The @disk parameter is either an unambiguous source name of the
block device (the <source file='...'/> sub-element, such as
"/path/to/image"), or (since 0.9.5) the device target shorthand
(the <target dev='...'/> sub-element, such as "xvda").  Valid names
can be found by calling virDomainGetXMLDesc() and inspecting
elements within //domain/devices/disk.]]></info>
      <return type='int' info='-1 in case of failure, 0 when nothing found, 1 when info was found.'/>
      <arg name='dom' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='disk' type='const char *' info='path to the block device, or device shorthand'/>
      <arg name='info' type='virDomainBlockJobInfoPtr' info='pointer to a virDomainBlockJobInfo structure'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virDomainGetCPUStats' file='libvirt' module='libvirt'>
      <info><![CDATA[Get statistics relating to CPU usage attributable to a single
domain (in contrast to the statistics returned by
virNodeGetCPUStats() for all processes on the host).  @dom
must be running (an inactive domain has no attributable cpu
usage).  On input, @params must contain at least @nparams * @ncpus
entries, allocated by the caller.

If @start_cpu is -1, then @ncpus must be 1, and the returned
results reflect the statistics attributable to the entire
domain (such as user and system time for the process as a
whole).  Otherwise, @start_cpu represents which cpu to start
with, and @ncpus represents how many consecutive processors to
query, with statistics attributable per processor (such as
per-cpu usage).  If @ncpus is larger than the number of cpus
available to query, then the trailing part of the array will
be unpopulated.

The remote driver imposes a limit of 128 @ncpus and 16 @nparams;
the number of parameters per cpu should not exceed 16, but if you
have a host with more than 128 CPUs, your program should split
the request into multiple calls.

As special cases, if @params is NULL and @nparams is 0 and
@ncpus is 1, and the return value will be how many
statistics are available for the given @start_cpu.  This number
may be different for @start_cpu of -1 than for any non-negative
value, but will be the same for all non-negative @start_cpu.
Likewise, if @params is NULL and @nparams is 0 and @ncpus is 0,
the number of cpus available to query is returned.  From the
host perspective, this would typically match the cpus member
of virNodeGetInfo(), but might be less due to host cpu hotplug.

For now, @flags is unused, and the statistics all relate to the
usage from the host perspective.  It is possible that a future
version will support a flag that queries the cpu usage from the
guest's perspective, where the maximum cpu to query would be
related to virDomainGetVcpusFlags() rather than virNodeGetInfo().
An individual guest vcpu cannot be reliably mapped back to a
specific host cpu unless a single-processor vcpu pinning was used,
but when @start_cpu is -1, any difference in usage between a host
and guest perspective would serve as a measure of hypervisor overhead.

Typical use sequence is below.

getting total stats: set start_cpu as -1, ncpus 1
virDomainGetCPUStats(dom, NULL, 0, -1, 1, 0) => nparams
params = calloc(nparams, sizeof(virTypedParameter))
virDomainGetCPUStats(dom, params, nparams, -1, 1, 0) => total stats.

getting per-cpu stats:
virDomainGetCPUStats(dom, NULL, 0, 0, 0, 0) => ncpus
virDomainGetCPUStats(dom, NULL, 0, 0, 1, 0) => nparams
params = calloc(ncpus * nparams, sizeof(virTypedParameter))
virDomainGetCPUStats(dom, params, nparams, 0, ncpus, 0) => per-cpu stats]]></info>
      <return type='int' info='-1 on failure, or the number of statistics that were populated per cpu on success (this will be less than the total number of populated @params, unless @ncpus was 1; and may be less than @nparams).  The populated parameters start at each stride of @nparams, which means the results may be discontiguous; any unpopulated parameters will be zeroed on success (this includes skipped elements if @nparams is too large, and tail elements if @ncpus is too large).  The caller is responsible for freeing any returned string parameters.'/>
      <arg name='domain' type='virDomainPtr' info='domain to query'/>
      <arg name='params' type='virTypedParameterPtr' info='array to populate on output'/>
      <arg name='nparams' type='unsigned int' info='number of parameters per cpu'/>
      <arg name='start_cpu' type='int' info='which cpu to start with, or -1 for summary'/>
      <arg name='ncpus' type='unsigned int' info='how many cpus to query'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virTypedParameterFlags'/>
    </function>
    <function name='virDomainGetConnect' file='libvirt' module='libvirt'>
      <info><![CDATA[Provides the connection pointer associated with a domain.  The
reference counter on the connection is not increased by this
call.

WARNING: When writing libvirt bindings in other languages, do
not use this function.  Instead, store the connection and
the domain object together.]]></info>
      <return type='virConnectPtr' info='the virConnectPtr or NULL in case of failure.'/>
      <arg name='dom' type='virDomainPtr' info='pointer to a domain'/>
    </function>
    <function name='virDomainGetControlInfo' file='libvirt' module='libvirt'>
      <info><![CDATA[Extract details about current state of control interface to a domain.]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='info' type='virDomainControlInfoPtr' info='pointer to a virDomainControlInfo structure allocated by the user'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virDomainGetDiskErrors' file='libvirt' module='libvirt'>
      <info><![CDATA[The function populates @errors array with all disks that encountered an
I/O error.  Disks with no error will not be returned in the @errors array.
Each disk is identified by its target (the dev attribute of target
subelement in domain XML), such as "vda", and accompanied with the error
that was seen on it.  The caller is also responsible for calling free()
on each disk name returned.

In a special case when @errors is NULL and @maxerrors is 0, the function]]></info>
      <return type='int' info='preferred size of @errors that the caller should use to get all disk errors.  Since calling virDomainGetDiskErrors(dom, NULL, 0, 0) to get preferred size of @errors array and getting the errors are two separate operations, new disks may be hotplugged to the domain and new errors may be encountered between the two calls.  Thus, this function may not return all disk errors because the supplied array is not large enough.  Such errors may, however, be detected by listening to domain events.  Returns number of disks with errors filled in the @errors array or -1 on error.'/>
      <arg name='dom' type='virDomainPtr' info='a domain object'/>
      <arg name='errors' type='virDomainDiskErrorPtr' info='array to populate on output'/>
      <arg name='maxerrors' type='unsigned int' info='size of @errors array'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virDomainGetEmulatorPinInfo' file='libvirt' module='libvirt'>
      <info><![CDATA[Query the CPU affinity setting of all emulator threads of domain, store
it in cpumap.]]></info>
      <return type='int' info='1 in case of success, 0 in case of no emulator threads are pined to pcpus, -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object, or NULL for Domain0'/>
      <arg name='cpumap' type='unsigned char *' info='pointer to a bit map of real CPUs for all emulator threads of this domain (in 8-bit bytes) (OUT) There is only one cpumap for all emulator threads. Must not be NULL.'/>
      <arg name='maplen' type='int' info='the number of bytes in one cpumap, from 1 up to size of CPU map. Must be positive.'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainModificationImpact Must not be VIR_DOMAIN_AFFECT_LIVE and VIR_DOMAIN_AFFECT_CONFIG concurrently.'/>
    </function>
    <function name='virDomainGetHostname' file='libvirt' module='libvirt'>
      <info><![CDATA[Get the hostname for that domain.

Dependent on hypervisor used, this may require a guest agent to be
available.]]></info>
      <return type='char *' info='the hostname which must be freed by the caller, or NULL if there was an error.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virDomainGetID' file='libvirt' module='libvirt'>
      <info><![CDATA[Get the hypervisor ID number for the domain]]></info>
      <return type='unsigned int' info='the domain ID number or (unsigned int) -1 in case of error'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
    </function>
    <function name='virDomainGetInfo' file='libvirt' module='libvirt'>
      <info><![CDATA[Extract information about a domain. Note that if the connection
used to get the domain is limited only a partial set of the information
can be extracted.]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='info' type='virDomainInfoPtr' info='pointer to a virDomainInfo structure allocated by the user'/>
    </function>
    <function name='virDomainGetInterfaceParameters' file='libvirt' module='libvirt'>
      <info><![CDATA[Get all interface parameters. On input, @nparams gives the size of
the @params array; on output, @nparams gives how many slots were
filled with parameter information, which might be less but will not
exceed the input value.

As a special case, calling with @params as NULL and @nparams as 0 on
input will cause @nparams on output to contain the number of parameters
supported by the hypervisor. The caller should then allocate @params
array, i.e. (sizeof(@virTypedParameter) * @nparams) bytes and call the
API again. See virDomainGetMemoryParameters() for an equivalent usage
example.

This function may require privileged access to the hypervisor. This function
expects the caller to allocate the @params.]]></info>
      <return type='int' info='-1 in case of error, 0 in case of success.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='device' type='const char *' info='the interface name or mac address'/>
      <arg name='params' type='virTypedParameterPtr' info='pointer to interface parameter objects (return value, allocated by the caller)'/>
      <arg name='nparams' type='int *' info='pointer to number of interface parameter; input and output'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainModificationImpact and virTypedParameterFlags'/>
    </function>
    <function name='virDomainGetJobInfo' file='libvirt' module='libvirt'>
      <info><![CDATA[Extract information about progress of a background job on a domain.
Will return an error if the domain is not active.

This function returns a limited amount of information in comparison
to virDomainGetJobStats().]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='info' type='virDomainJobInfoPtr' info='pointer to a virDomainJobInfo structure allocated by the user'/>
    </function>
    <function name='virDomainGetJobStats' file='libvirt' module='libvirt'>
      <info><![CDATA[Extract information about progress of a background job on a domain.
Will return an error if the domain is not active. The function returns
a superset of progress information provided by virDomainGetJobInfo.
Possible fields returned in @params are defined by VIR_DOMAIN_JOB_*
macros and new fields will likely be introduced in the future so callers
may receive fields that they do not understand in case they talk to a
newer server.]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='type' type='int *' info='where to store the job type (one of virDomainJobType)'/>
      <arg name='params' type='virTypedParameterPtr *' info='where to store job statistics'/>
      <arg name='nparams' type='int *' info='number of items in @params'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virDomainGetMaxMemory' file='libvirt' module='libvirt'>
      <info><![CDATA[Retrieve the maximum amount of physical memory allocated to a
domain. If domain is NULL, then this get the amount of memory reserved
to Domain0 i.e. the domain where the application runs.]]></info>
      <return type='unsigned long' info='the memory size in kibibytes (blocks of 1024 bytes), or 0 in case of error.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object or NULL'/>
    </function>
    <function name='virDomainGetMaxVcpus' file='libvirt' module='libvirt'>
      <info><![CDATA[Provides the maximum number of virtual CPUs supported for
the guest VM. If the guest is inactive, this is basically
the same as virConnectGetMaxVcpus(). If the guest is running
this will reflect the maximum number of virtual CPUs the
guest was booted with.  For more details, see virDomainGetVcpusFlags().]]></info>
      <return type='int' info='the maximum of virtual CPU or -1 in case of error.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
    </function>
    <function name='virDomainGetMemoryParameters' file='libvirt' module='libvirt'>
      <info><![CDATA[Get all memory parameters.  On input, @nparams gives the size of the
@params array; on output, @nparams gives how many slots were filled
with parameter information, which might be less but will not exceed
the input value.

As a special case, calling with @params as NULL and @nparams as 0 on
input will cause @nparams on output to contain the number of parameters
supported by the hypervisor. The caller should then allocate @params
array, i.e. (sizeof(@virTypedParameter) * @nparams) bytes and call the API
again.

Here is a sample code snippet:

  if (virDomainGetMemoryParameters(dom, NULL, &nparams, 0) == 0 &&
      nparams != 0) {
      if ((params = malloc(sizeof(*params) * nparams)) == NULL)
          goto error;
      memset(params, 0, sizeof(*params) * nparams);
      if (virDomainGetMemoryParameters(dom, params, &nparams, 0))
          goto error;
  }

This function may require privileged access to the hypervisor. This function
expects the caller to allocate the @params.]]></info>
      <return type='int' info='-1 in case of error, 0 in case of success.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='params' type='virTypedParameterPtr' info='pointer to memory parameter object (return value, allocated by the caller)'/>
      <arg name='nparams' type='int *' info='pointer to number of memory parameters; input and output'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainModificationImpact and virTypedParameterFlags'/>
    </function>
    <function name='virDomainGetMetadata' file='libvirt' module='libvirt'>
      <info><![CDATA[Retrieves the appropriate domain element given by @type.
If VIR_DOMAIN_METADATA_ELEMENT is requested parameter @uri
must be set to the name of the namespace the requested elements
belong to, otherwise must be NULL.

If an element of the domain XML is not present, the resulting
error will be VIR_ERR_NO_DOMAIN_METADATA.  This method forms
a shortcut for seeing information from virDomainSetMetadata()
without having to go through virDomainGetXMLDesc().

@flags controls whether the live domain or persistent
configuration will be queried.]]></info>
      <return type='char *' info='the metadata string on success (caller must free), or NULL in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='type' type='int' info='type of description, from virDomainMetadataType'/>
      <arg name='uri' type='const char *' info='XML namespace identifier'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainModificationImpact'/>
    </function>
    <function name='virDomainGetName' file='libvirt' module='libvirt'>
      <info><![CDATA[Get the public name for that domain]]></info>
      <return type='const char *' info='a pointer to the name or NULL, the string need not be deallocated its lifetime will be the same as the domain object.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
    </function>
    <function name='virDomainGetNumaParameters' file='libvirt' module='libvirt'>
      <info><![CDATA[Get all numa parameters.  On input, @nparams gives the size of the
@params array; on output, @nparams gives how many slots were filled
with parameter information, which might be less but will not exceed
the input value.

As a special case, calling with @params as NULL and @nparams as 0 on
input will cause @nparams on output to contain the number of parameters
supported by the hypervisor. The caller should then allocate @params
array, i.e. (sizeof(@virTypedParameter) * @nparams) bytes and call the API
again.

See virDomainGetMemoryParameters() for an equivalent usage example.

This function may require privileged access to the hypervisor. This function
expects the caller to allocate the @params.]]></info>
      <return type='int' info='-1 in case of error, 0 in case of success.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='params' type='virTypedParameterPtr' info='pointer to numa parameter object (return value, allocated by the caller)'/>
      <arg name='nparams' type='int *' info='pointer to number of numa parameters'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainModificationImpact and virTypedParameterFlags'/>
    </function>
    <function name='virDomainGetOSType' file='libvirt' module='libvirt'>
      <info><![CDATA[Get the type of domain operation system.]]></info>
      <return type='char *' info='the new string or NULL in case of error, the string must be freed by the caller.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
    </function>
    <function name='virDomainGetSchedulerParameters' file='libvirt' module='libvirt'>
      <info><![CDATA[Get all scheduler parameters.  On input, @nparams gives the size of the
@params array; on output, @nparams gives how many slots were filled
with parameter information, which might be less but will not exceed
the input value.  @nparams cannot be 0.

It is hypervisor specific whether this returns the live or
persistent state; for more control, use
virDomainGetSchedulerParametersFlags().]]></info>
      <return type='int' info='-1 in case of error, 0 in case of success.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='params' type='virTypedParameterPtr' info='pointer to scheduler parameter objects (return value)'/>
      <arg name='nparams' type='int *' info='pointer to number of scheduler parameter objects (this value should generally be as large as the returned value nparams of virDomainGetSchedulerType()); input and output'/>
    </function>
    <function name='virDomainGetSchedulerParametersFlags' file='libvirt' module='libvirt'>
      <info><![CDATA[Get all scheduler parameters.  On input, @nparams gives the size of the
@params array; on output, @nparams gives how many slots were filled
with parameter information, which might be less but will not exceed
the input value.  @nparams cannot be 0.

The value of @flags can be exactly VIR_DOMAIN_AFFECT_CURRENT,
VIR_DOMAIN_AFFECT_LIVE, or VIR_DOMAIN_AFFECT_CONFIG.

Here is a sample code snippet:

  char *ret = virDomainGetSchedulerType(dom, &nparams);
  if (ret && nparams != 0) {
      if ((params = malloc(sizeof(*params) * nparams)) == NULL)
          goto error;
      memset(params, 0, sizeof(*params) * nparams);
      if (virDomainGetSchedulerParametersFlags(dom, params, &nparams, 0))
          goto error;
  }]]></info>
      <return type='int' info='-1 in case of error, 0 in case of success.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='params' type='virTypedParameterPtr' info='pointer to scheduler parameter object (return value)'/>
      <arg name='nparams' type='int *' info='pointer to number of scheduler parameter (this value should be same than the returned value nparams of virDomainGetSchedulerType()); input and output'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainModificationImpact and virTypedParameterFlags'/>
    </function>
    <function name='virDomainGetSchedulerType' file='libvirt' module='libvirt'>
      <info><![CDATA[Get the scheduler type and the number of scheduler parameters.]]></info>
      <return type='char *' info='NULL in case of error. The caller must free the returned string.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='nparams' type='int *' info='pointer to number of scheduler parameters, can be NULL (return value)'/>
    </function>
    <function name='virDomainGetSecurityLabel' file='libvirt' module='libvirt'>
      <info><![CDATA[Extract security label of an active domain. The 'label' field
in the @seclabel argument will be initialized to the empty
string if the domain is not running under a security model.]]></info>
      <return type='int' info='0 in case of success, -1 in case of failure'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='seclabel' type='virSecurityLabelPtr' info='pointer to a virSecurityLabel structure'/>
    </function>
    <function name='virDomainGetSecurityLabelList' file='libvirt' module='libvirt'>
      <info><![CDATA[Extract the security labels of an active domain. The 'label' field
in the @seclabels argument will be initialized to the empty
string if the domain is not running under a security model.]]></info>
      <return type='int' info='number of elemnets in @seclabels on success, -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='seclabels' type='virSecurityLabelPtr *' info='will be auto-allocated and filled with domains&apos; security labels. Caller must free memory on return.'/>
    </function>
    <function name='virDomainGetState' file='libvirt' module='libvirt'>
      <info><![CDATA[Extract domain state. Each state can be accompanied with a reason (if known)
which led to the state.]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='state' type='int *' info='returned state of the domain (one of virDomainState)'/>
      <arg name='reason' type='int *' info='returned reason which led to @state (one of virDomain*Reason corresponding to the current state); it is allowed to be NULL'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virDomainGetUUID' file='libvirt' module='libvirt'>
      <info><![CDATA[Get the UUID for a domain]]></info>
      <return type='int' info='-1 in case of error, 0 in case of success'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='uuid' type='unsigned char *' info='pointer to a VIR_UUID_BUFLEN bytes array'/>
    </function>
    <function name='virDomainGetUUIDString' file='libvirt' module='libvirt'>
      <info><![CDATA[Get the UUID for a domain as string. For more information about
UUID see RFC4122.]]></info>
      <return type='int' info='-1 in case of error, 0 in case of success'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='buf' type='char *' info='pointer to a VIR_UUID_STRING_BUFLEN bytes array'/>
    </function>
    <function name='virDomainGetVcpuPinInfo' file='libvirt' module='libvirt'>
      <info><![CDATA[Query the CPU affinity setting of all virtual CPUs of domain, store it
in cpumaps.]]></info>
      <return type='int' info='the number of virtual CPUs in case of success, -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object, or NULL for Domain0'/>
      <arg name='ncpumaps' type='int' info='the number of cpumap (listed first to match virDomainGetVcpus)'/>
      <arg name='cpumaps' type='unsigned char *' info='pointer to a bit map of real CPUs for all vcpus of this domain (in 8-bit bytes) (OUT) It&apos;s assumed there is &lt;ncpumaps&gt; cpumap in cpumaps array. The memory allocated to cpumaps must be (ncpumaps * maplen) bytes (ie: calloc(ncpumaps, maplen)). One cpumap inside cpumaps has the format described in virDomainPinVcpu() API. Must not be NULL.'/>
      <arg name='maplen' type='int' info='the number of bytes in one cpumap, from 1 up to size of CPU map. Must be positive.'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainModificationImpact Must not be VIR_DOMAIN_AFFECT_LIVE and VIR_DOMAIN_AFFECT_CONFIG concurrently.'/>
    </function>
    <function name='virDomainGetVcpus' file='libvirt' module='libvirt'>
      <info><![CDATA[Extract information about virtual CPUs of domain, store it in info array
and also in cpumaps if this pointer isn't NULL.  This call may fail
on an inactive domain.

See also virDomainGetVcpuPinInfo for querying just cpumaps, including on
an inactive domain.]]></info>
      <return type='int' info='the number of info filled in case of success, -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object, or NULL for Domain0'/>
      <arg name='info' type='virVcpuInfoPtr' info='pointer to an array of virVcpuInfo structures (OUT)'/>
      <arg name='maxinfo' type='int' info='number of structures in info array'/>
      <arg name='cpumaps' type='unsigned char *' info='pointer to a bit map of real CPUs for all vcpus of this domain (in 8-bit bytes) (OUT) If cpumaps is NULL, then no cpumap information is returned by the API. It&apos;s assumed there is &lt;maxinfo&gt; cpumap in cpumaps array. The memory allocated to cpumaps must be (maxinfo * maplen) bytes (ie: calloc(maxinfo, maplen)). One cpumap inside cpumaps has the format described in virDomainPinVcpu() API.'/>
      <arg name='maplen' type='int' info='number of bytes in one cpumap, from 1 up to size of CPU map in underlying virtualization system (Xen...). Must be zero when cpumaps is NULL and positive when it is non-NULL.'/>
    </function>
    <function name='virDomainGetVcpusFlags' file='libvirt' module='libvirt'>
      <info><![CDATA[Query the number of virtual CPUs used by the domain.  Note that
this call may fail if the underlying virtualization hypervisor does
not support it.  This function may require privileged access to the
hypervisor.

If @flags includes VIR_DOMAIN_AFFECT_LIVE, this will query a
running domain (which will fail if domain is not active); if
it includes VIR_DOMAIN_AFFECT_CONFIG, this will query the XML
description of the domain.  It is an error to set both flags.
If neither flag is set (that is, VIR_DOMAIN_AFFECT_CURRENT),
then the configuration queried depends on whether the domain
is currently running.

If @flags includes VIR_DOMAIN_VCPU_MAXIMUM, then the maximum
virtual CPU limit is queried.  Otherwise, this call queries the
current virtual CPU count.

If @flags includes VIR_DOMAIN_VCPU_GUEST, then the state of the processors
is queried in the guest instead of the hypervisor. This flag is only usable
on live domains. Guest agent may be needed for this flag to be available.]]></info>
      <return type='int' info='the number of vCPUs in case of success, -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object, or NULL for Domain0'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainVcpuFlags'/>
    </function>
    <function name='virDomainGetXMLDesc' file='libvirt' module='libvirt'>
      <info><![CDATA[Provide an XML description of the domain. The description may be reused
later to relaunch the domain with virDomainCreateXML().

No security-sensitive data will be included unless @flags contains
VIR_DOMAIN_XML_SECURE; this flag is rejected on read-only
connections.  If @flags includes VIR_DOMAIN_XML_INACTIVE, then the
XML represents the configuration that will be used on the next boot
of a persistent domain; otherwise, the configuration represents the
currently running domain.  If @flags contains
VIR_DOMAIN_XML_UPDATE_CPU, then the portion of the domain XML
describing CPU capabilities is modified to match actual
capabilities of the host.]]></info>
      <return type='char *' info='a 0 terminated UTF-8 encoded XML instance, or NULL in case of error. the caller must free() the returned value.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainXMLFlags'/>
    </function>
    <function name='virDomainHasCurrentSnapshot' file='libvirt' module='libvirt'>
      <info><![CDATA[Determine if the domain has a current snapshot.]]></info>
      <return type='int' info='1 if such snapshot exists, 0 if it doesn&apos;t, -1 on error.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to the domain object'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virDomainHasManagedSaveImage' file='libvirt' module='libvirt'>
      <info><![CDATA[Check if a domain has a managed save image as created by
virDomainManagedSave(). Note that any running domain should not have
such an image, as it should have been removed on restart.]]></info>
      <return type='int' info='0 if no image is present, 1 if an image is present, and -1 in case of error'/>
      <arg name='dom' type='virDomainPtr' info='pointer to the domain'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virDomainInjectNMI' file='libvirt' module='libvirt'>
      <info><![CDATA[Send NMI to the guest]]></info>
      <return type='int' info='0 in case of success, -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object, or NULL for Domain0'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virDomainInterfaceStats' file='libvirt' module='libvirt'>
      <info><![CDATA[This function returns network interface stats for interfaces
attached to the domain.

The path parameter is the name of the network interface.

Domains may have more than one network interface.  To get stats for
each you should make multiple calls to this function.

Individual fields within the stats structure may be returned
as -1, which indicates that the hypervisor does not support
that particular statistic.]]></info>
      <return type='int' info='0 in case of success or -1 in case of failure.'/>
      <arg name='dom' type='virDomainPtr' info='pointer to the domain object'/>
      <arg name='path' type='const char *' info='path to the interface'/>
      <arg name='stats' type='virDomainInterfaceStatsPtr' info='network interface stats (returned)'/>
      <arg name='size' type='size_t' info='size of stats structure'/>
    </function>
    <function name='virDomainIsActive' file='libvirt' module='libvirt'>
      <info><![CDATA[Determine if the domain is currently running]]></info>
      <return type='int' info='1 if running, 0 if inactive, -1 on error'/>
      <arg name='dom' type='virDomainPtr' info='pointer to the domain object'/>
    </function>
    <function name='virDomainIsPersistent' file='libvirt' module='libvirt'>
      <info><![CDATA[Determine if the domain has a persistent configuration
which means it will still exist after shutting down]]></info>
      <return type='int' info='1 if persistent, 0 if transient, -1 on error'/>
      <arg name='dom' type='virDomainPtr' info='pointer to the domain object'/>
    </function>
    <function name='virDomainIsUpdated' file='libvirt' module='libvirt'>
      <info><![CDATA[Determine if the domain has been updated.]]></info>
      <return type='int' info='1 if updated, 0 if not, -1 on error'/>
      <arg name='dom' type='virDomainPtr' info='pointer to the domain object'/>
    </function>
    <function name='virDomainListAllSnapshots' file='libvirt' module='libvirt'>
      <info><![CDATA[Collect the list of domain snapshots for the given domain, and allocate
an array to store those objects.  This API solves the race inherent in
virDomainSnapshotListNames().

By default, this command covers all snapshots; it is also possible to
limit things to just snapshots with no parents, when @flags includes
VIR_DOMAIN_SNAPSHOT_LIST_ROOTS.  Additional filters are provided in
groups, where each group contains bits that describe mutually exclusive
attributes of a snapshot, and where all bits within a group describe
all possible snapshots.  Some hypervisors might reject explicit bits
from a group where the hypervisor cannot make a distinction.  For a
group supported by a given hypervisor, the behavior when no bits of a
group are set is identical to the behavior when all bits in that group
are set.  When setting bits from more than one group, it is possible to
select an impossible combination, in that case a hypervisor may return
either 0 or an error.

The first group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_LEAVES and
VIR_DOMAIN_SNAPSHOT_LIST_NO_LEAVES, to filter based on snapshots that
have no further children (a leaf snapshot).

The next group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_METADATA and
VIR_DOMAIN_SNAPSHOT_LIST_NO_METADATA, for filtering snapshots based on
whether they have metadata that would prevent the removal of the last
reference to a domain.

The next group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_INACTIVE,
VIR_DOMAIN_SNAPSHOT_LIST_ACTIVE, and VIR_DOMAIN_SNAPSHOT_LIST_DISK_ONLY,
for filtering snapshots based on what domain state is tracked by the
snapshot.

The next group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_INTERNAL and
VIR_DOMAIN_SNAPSHOT_LIST_EXTERNAL, for filtering snapshots based on
whether the snapshot is stored inside the disk images or as
additional files.]]></info>
      <return type='int' info='the number of domain snapshots found or -1 and sets @snaps to NULL in case of error.  On success, the array stored into @snaps is guaranteed to have an extra allocated element set to NULL but not included in the return count, to make iteration easier.  The caller is responsible for calling virDomainSnapshotFree() on each array element, then calling free() on @snaps.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='snaps' type='virDomainSnapshotPtr **' info='pointer to variable to store the array containing snapshot objects, or NULL if the list is not required (just returns number of snapshots)'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of supported virDomainSnapshotListFlags'/>
    </function>
    <function name='virDomainLookupByID' file='libvirt' module='libvirt'>
      <info><![CDATA[Try to find a domain based on the hypervisor ID number
Note that this won't work for inactive domains which have an ID of -1,
in that case a lookup based on the Name or UUId need to be done instead.]]></info>
      <return type='virDomainPtr' info='a new domain object or NULL in case of failure.  If the domain cannot be found, then VIR_ERR_NO_DOMAIN error is raised.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='id' type='int' info='the domain ID number'/>
    </function>
    <function name='virDomainLookupByName' file='libvirt' module='libvirt'>
      <info><![CDATA[Try to lookup a domain on the given hypervisor based on its name.]]></info>
      <return type='virDomainPtr' info='a new domain object or NULL in case of failure.  If the domain cannot be found, then VIR_ERR_NO_DOMAIN error is raised.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='name' type='const char *' info='name for the domain'/>
    </function>
    <function name='virDomainLookupByUUID' file='libvirt' module='libvirt'>
      <info><![CDATA[Try to lookup a domain on the given hypervisor based on its UUID.]]></info>
      <return type='virDomainPtr' info='a new domain object or NULL in case of failure.  If the domain cannot be found, then VIR_ERR_NO_DOMAIN error is raised.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='uuid' type='const unsigned char *' info='the raw UUID for the domain'/>
    </function>
    <function name='virDomainLookupByUUIDString' file='libvirt' module='libvirt'>
      <info><![CDATA[Try to lookup a domain on the given hypervisor based on its UUID.]]></info>
      <return type='virDomainPtr' info='a new domain object or NULL in case of failure.  If the domain cannot be found, then VIR_ERR_NO_DOMAIN error is raised.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='uuidstr' type='const char *' info='the string UUID for the domain'/>
    </function>
    <function name='virDomainManagedSave' file='libvirt' module='libvirt'>
      <info><![CDATA[This method will suspend a domain and save its memory contents to
a file on disk. After the call, if successful, the domain is not
listed as running anymore.
The difference from virDomainSave() is that libvirt is keeping track of
the saved state itself, and will reuse it once the domain is being
restarted (automatically or via an explicit libvirt call).
As a result any running domain is sure to not have a managed saved image.
This also implies that managed save only works on persistent domains,
since the domain must still exist in order to use virDomainCreate() to
restart it.

If @flags includes VIR_DOMAIN_SAVE_BYPASS_CACHE, then libvirt will
attempt to bypass the file system cache while creating the file, or
fail if it cannot do so for the given system; this can allow less
pressure on file system cache, but also risks slowing saves to NFS.

Normally, the managed saved state will remember whether the domain
was running or paused, and start will resume to the same state.
Specifying VIR_DOMAIN_SAVE_RUNNING or VIR_DOMAIN_SAVE_PAUSED in
@flags will override the default saved into the file.  These two
flags are mutually exclusive.]]></info>
      <return type='int' info='0 in case of success or -1 in case of failure'/>
      <arg name='dom' type='virDomainPtr' info='pointer to the domain'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainSaveRestoreFlags'/>
    </function>
    <function name='virDomainManagedSaveRemove' file='libvirt' module='libvirt'>
      <info><![CDATA[Remove any managed save image for this domain.]]></info>
      <return type='int' info='0 in case of success, and -1 in case of error'/>
      <arg name='dom' type='virDomainPtr' info='pointer to the domain'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virDomainMemoryPeek' file='libvirt' module='libvirt'>
      <info><![CDATA[This function allows you to read the contents of a domain's
memory.

The memory which is read is controlled by the 'start', 'size'
and 'flags' parameters.

If 'flags' is VIR_MEMORY_VIRTUAL then the 'start' and 'size'
parameters are interpreted as virtual memory addresses for
whichever task happens to be running on the domain at the
moment.  Although this sounds haphazard it is in fact what
you want in order to read Linux kernel state, because it
ensures that pointers in the kernel image can be interpreted
coherently.

'buffer' is the return buffer and must be at least 'size' bytes.
'size' may be 0 to test if the call would succeed.

NB. The remote driver imposes a 64K byte limit on 'size'.
For your program to be able to work reliably over a remote
connection you should split large requests to <= 65536 bytes.
However, with 0.9.13 this RPC limit has been raised to 1M byte.
Starting with version 1.0.6 the RPC limit has been raised again.
Now large requests up to 16M byte are supported.]]></info>
      <return type='int' info='0 in case of success or -1 in case of failure. really 64 bits'/>
      <arg name='dom' type='virDomainPtr' info='pointer to the domain object'/>
      <arg name='start' type='unsigned long long' info='start of memory to peek'/>
      <arg name='size' type='size_t' info='size of memory to peek'/>
      <arg name='buffer' type='void *' info='return buffer (must be at least size bytes)'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainMemoryFlags'/>
    </function>
    <function name='virDomainMemoryStats' file='libvirt' module='libvirt'>
      <info><![CDATA[This function provides memory statistics for the domain.

Up to 'nr_stats' elements of 'stats' will be populated with memory statistics
from the domain.  Only statistics supported by the domain, the driver, and
this version of libvirt will be returned.

Memory Statistics:

VIR_DOMAIN_MEMORY_STAT_SWAP_IN:
    The total amount of data read from swap space (in kb).
VIR_DOMAIN_MEMORY_STAT_SWAP_OUT:
    The total amount of memory written out to swap space (in kb).
VIR_DOMAIN_MEMORY_STAT_MAJOR_FAULT:
    The number of page faults that required disk IO to service.
VIR_DOMAIN_MEMORY_STAT_MINOR_FAULT:
    The number of page faults serviced without disk IO.
VIR_DOMAIN_MEMORY_STAT_UNUSED:
    The amount of memory which is not being used for any purpose (in kb).
VIR_DOMAIN_MEMORY_STAT_AVAILABLE:
    The total amount of memory available to the domain's OS (in kb).
VIR_DOMAIN_MEMORY_STAT_ACTUAL_BALLOON:
    Current balloon value (in kb).]]></info>
      <return type='int' info='The number of stats provided or -1 in case of failure.'/>
      <arg name='dom' type='virDomainPtr' info='pointer to the domain object'/>
      <arg name='stats' type='virDomainMemoryStatPtr' info='nr_stats-sized array of stat structures (returned)'/>
      <arg name='nr_stats' type='unsigned int' info='number of memory statistics requested'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virDomainMigrate' file='libvirt' module='libvirt'>
      <info><![CDATA[Migrate the domain object from its current host to the destination
host given by dconn (a connection to the destination host).

Flags may be one of more of the following:
  VIR_MIGRATE_LIVE      Do not pause the VM during migration
  VIR_MIGRATE_PEER2PEER Direct connection between source & destination hosts
  VIR_MIGRATE_TUNNELLED Tunnel migration data over the libvirt RPC channel
  VIR_MIGRATE_PERSIST_DEST If the migration is successful, persist the domain
                           on the destination host.
  VIR_MIGRATE_UNDEFINE_SOURCE If the migration is successful, undefine the
                              domain on the source host.
  VIR_MIGRATE_PAUSED    Leave the domain suspended on the remote side.
  VIR_MIGRATE_NON_SHARED_DISK Migration with non-shared storage with full
                              disk copy
  VIR_MIGRATE_NON_SHARED_INC  Migration with non-shared storage with
                              incremental disk copy
  VIR_MIGRATE_CHANGE_PROTECTION Protect against domain configuration
                                changes during the migration process (set
                                automatically when supported).
  VIR_MIGRATE_UNSAFE    Force migration even if it is considered unsafe.
  VIR_MIGRATE_OFFLINE Migrate offline

VIR_MIGRATE_TUNNELLED requires that VIR_MIGRATE_PEER2PEER be set.
Applications using the VIR_MIGRATE_PEER2PEER flag will probably
prefer to invoke virDomainMigrateToURI, avoiding the need to
open connection to the destination host themselves.

If a hypervisor supports renaming domains during migration,
then you may set the dname parameter to the new name (otherwise
it keeps the same name).  If this is not supported by the
hypervisor, dname must be NULL or else you will get an error.

If the VIR_MIGRATE_PEER2PEER flag is set, the uri parameter
must be a valid libvirt connection URI, by which the source
libvirt driver can connect to the destination libvirt. If
omitted, the dconn connection object will be queried for its
current URI.

If the VIR_MIGRATE_PEER2PEER flag is NOT set, the URI parameter
takes a hypervisor specific format. The hypervisor capabilities
XML includes details of the support URI schemes. If omitted
the dconn will be asked for a default URI.

If you want to copy non-shared storage within migration you
can use either VIR_MIGRATE_NON_SHARED_DISK or
VIR_MIGRATE_NON_SHARED_INC as they are mutually exclusive.

In either case it is typically only necessary to specify a
URI if the destination host has multiple interfaces and a
specific interface is required to transmit migration data.

The maximum bandwidth (in MiB/s) that will be used to do migration
can be specified with the bandwidth parameter.  If set to 0,
libvirt will choose a suitable default.  Some hypervisors do
not support this feature and will return an error if bandwidth
is not 0.

To see which features are supported by the current hypervisor,
see virConnectGetCapabilities, /capabilities/host/migration_features.

There are many limitations on migration imposed by the underlying
technology - for example it may not be possible to migrate between
different processors even with the same architecture, or between
different types of hypervisor.]]></info>
      <return type='virDomainPtr' info='the new domain object if the migration was successful, or NULL in case of error.  Note that the new domain object exists in the scope of the destination connection (dconn).'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='dconn' type='virConnectPtr' info='destination host (a connection object)'/>
      <arg name='flags' type='unsigned long' info='bitwise-OR of virDomainMigrateFlags'/>
      <arg name='dname' type='const char *' info='(optional) rename domain to this at destination'/>
      <arg name='uri' type='const char *' info='(optional) dest hostname/URI as seen from the source host'/>
      <arg name='bandwidth' type='unsigned long' info='(optional) specify migration bandwidth limit in MiB/s'/>
    </function>
    <function name='virDomainMigrate2' file='libvirt' module='libvirt'>
      <info><![CDATA[Migrate the domain object from its current host to the destination
host given by dconn (a connection to the destination host).

Flags may be one of more of the following:
  VIR_MIGRATE_LIVE      Do not pause the VM during migration
  VIR_MIGRATE_PEER2PEER Direct connection between source & destination hosts
  VIR_MIGRATE_TUNNELLED Tunnel migration data over the libvirt RPC channel
  VIR_MIGRATE_PERSIST_DEST If the migration is successful, persist the domain
                           on the destination host.
  VIR_MIGRATE_UNDEFINE_SOURCE If the migration is successful, undefine the
                              domain on the source host.
  VIR_MIGRATE_PAUSED    Leave the domain suspended on the remote side.
  VIR_MIGRATE_NON_SHARED_DISK Migration with non-shared storage with full
                              disk copy
  VIR_MIGRATE_NON_SHARED_INC  Migration with non-shared storage with
                              incremental disk copy
  VIR_MIGRATE_CHANGE_PROTECTION Protect against domain configuration
                                changes during the migration process (set
                                automatically when supported).
  VIR_MIGRATE_UNSAFE    Force migration even if it is considered unsafe.
  VIR_MIGRATE_OFFLINE Migrate offline

VIR_MIGRATE_TUNNELLED requires that VIR_MIGRATE_PEER2PEER be set.
Applications using the VIR_MIGRATE_PEER2PEER flag will probably
prefer to invoke virDomainMigrateToURI, avoiding the need to
open connection to the destination host themselves.

If a hypervisor supports renaming domains during migration,
then you may set the dname parameter to the new name (otherwise
it keeps the same name).  If this is not supported by the
hypervisor, dname must be NULL or else you will get an error.

If the VIR_MIGRATE_PEER2PEER flag is set, the uri parameter
must be a valid libvirt connection URI, by which the source
libvirt driver can connect to the destination libvirt. If
omitted, the dconn connection object will be queried for its
current URI.

If the VIR_MIGRATE_PEER2PEER flag is NOT set, the URI parameter
takes a hypervisor specific format. The hypervisor capabilities
XML includes details of the support URI schemes. If omitted
the dconn will be asked for a default URI.

If you want to copy non-shared storage within migration you
can use either VIR_MIGRATE_NON_SHARED_DISK or
VIR_MIGRATE_NON_SHARED_INC as they are mutually exclusive.

In either case it is typically only necessary to specify a
URI if the destination host has multiple interfaces and a
specific interface is required to transmit migration data.

The maximum bandwidth (in MiB/s) that will be used to do migration
can be specified with the bandwidth parameter.  If set to 0,
libvirt will choose a suitable default.  Some hypervisors do
not support this feature and will return an error if bandwidth
is not 0.

To see which features are supported by the current hypervisor,
see virConnectGetCapabilities, /capabilities/host/migration_features.

There are many limitations on migration imposed by the underlying
technology - for example it may not be possible to migrate between
different processors even with the same architecture, or between
different types of hypervisor.

If the hypervisor supports it, @dxml can be used to alter
host-specific portions of the domain XML that will be used on
the destination.  For example, it is possible to alter the
backing filename that is associated with a disk device, in order
to account for naming differences between source and destination
in accessing the underlying storage.  The migration will fail
if @dxml would cause any guest-visible changes.  Pass NULL
if no changes are needed to the XML between source and destination.
@dxml cannot be used to rename the domain during migration (use
@dname for that purpose).  Domain name in @dxml must match the
original domain name.]]></info>
      <return type='virDomainPtr' info='the new domain object if the migration was successful, or NULL in case of error.  Note that the new domain object exists in the scope of the destination connection (dconn).'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='dconn' type='virConnectPtr' info='destination host (a connection object)'/>
      <arg name='dxml' type='const char *' info='(optional) XML config for launching guest on target'/>
      <arg name='flags' type='unsigned long' info='bitwise-OR of virDomainMigrateFlags'/>
      <arg name='dname' type='const char *' info='(optional) rename domain to this at destination'/>
      <arg name='uri' type='const char *' info='(optional) dest hostname/URI as seen from the source host'/>
      <arg name='bandwidth' type='unsigned long' info='(optional) specify migration bandwidth limit in MiB/s'/>
    </function>
    <function name='virDomainMigrate3' file='libvirt' module='libvirt'>
      <info><![CDATA[Migrate the domain object from its current host to the destination host
given by dconn (a connection to the destination host).

See virDomainMigrateFlags documentation for description of individual flags.

VIR_MIGRATE_TUNNELLED and VIR_MIGRATE_PEER2PEER are not supported by this
API, use virDomainMigrateToURI3 instead.

If you want to copy non-shared storage within migration you
can use either VIR_MIGRATE_NON_SHARED_DISK or
VIR_MIGRATE_NON_SHARED_INC as they are mutually exclusive.

There are many limitations on migration imposed by the underlying
technology - for example it may not be possible to migrate between
different processors even with the same architecture, or between
different types of hypervisor.]]></info>
      <return type='virDomainPtr' info='the new domain object if the migration was successful, or NULL in case of error.  Note that the new domain object exists in the scope of the destination connection (dconn).'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='dconn' type='virConnectPtr' info='destination host (a connection object)'/>
      <arg name='params' type='virTypedParameterPtr' info='(optional) migration parameters'/>
      <arg name='nparams' type='unsigned int' info='(optional) number of migration parameters in @params'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainMigrateFlags'/>
    </function>
    <function name='virDomainMigrateGetCompressionCache' file='libvirt' module='libvirt'>
      <info><![CDATA[Gets current size of the cache (in bytes) used for compressing repeatedly
transferred memory pages during live migration.]]></info>
      <return type='int' info='0 in case of success, -1 otherwise.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='cacheSize' type='unsigned long long *' info='return value of current size of the cache (in bytes)'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virDomainMigrateGetMaxSpeed' file='libvirt' module='libvirt'>
      <info><![CDATA[Get the current maximum bandwidth (in MiB/s) that will be used if the
domain is migrated.  Not all hypervisors will support a bandwidth limit.]]></info>
      <return type='int' info='0 in case of success, -1 otherwise.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='bandwidth' type='unsigned long *' info='return value of current migration bandwidth limit in MiB/s'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virDomainMigrateSetCompressionCache' file='libvirt' module='libvirt'>
      <info><![CDATA[Sets size of the cache (in bytes) used for compressing repeatedly
transferred memory pages during live migration. It's supposed to be called
while the domain is being live-migrated as a reaction to migration progress
and increasing number of compression cache misses obtained from
virDomainGetJobStats.]]></info>
      <return type='int' info='0 in case of success, -1 otherwise.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='cacheSize' type='unsigned long long' info='size of the cache (in bytes) used for compression'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virDomainMigrateSetMaxDowntime' file='libvirt' module='libvirt'>
      <info><![CDATA[Sets maximum tolerable time for which the domain is allowed to be paused
at the end of live migration. It's supposed to be called while the domain is
being live-migrated as a reaction to migration progress.]]></info>
      <return type='int' info='0 in case of success, -1 otherwise.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='downtime' type='unsigned long long' info='maximum tolerable downtime for live migration, in milliseconds'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virDomainMigrateSetMaxSpeed' file='libvirt' module='libvirt'>
      <info><![CDATA[The maximum bandwidth (in MiB/s) that will be used to do migration
can be specified with the bandwidth parameter. Not all hypervisors
will support a bandwidth cap]]></info>
      <return type='int' info='0 in case of success, -1 otherwise.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='bandwidth' type='unsigned long' info='migration bandwidth limit in MiB/s'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virDomainMigrateToURI' file='libvirt' module='libvirt'>
      <info><![CDATA[Migrate the domain object from its current host to the destination
host given by duri.

Flags may be one of more of the following:
  VIR_MIGRATE_LIVE      Do not pause the VM during migration
  VIR_MIGRATE_PEER2PEER Direct connection between source & destination hosts
  VIR_MIGRATE_TUNNELLED Tunnel migration data over the libvirt RPC channel
  VIR_MIGRATE_PERSIST_DEST If the migration is successful, persist the domain
                           on the destination host.
  VIR_MIGRATE_UNDEFINE_SOURCE If the migration is successful, undefine the
                              domain on the source host.
  VIR_MIGRATE_PAUSED    Leave the domain suspended on the remote side.
  VIR_MIGRATE_NON_SHARED_DISK Migration with non-shared storage with full
                              disk copy
  VIR_MIGRATE_NON_SHARED_INC  Migration with non-shared storage with
                              incremental disk copy
  VIR_MIGRATE_CHANGE_PROTECTION Protect against domain configuration
                                changes during the migration process (set
                                automatically when supported).
  VIR_MIGRATE_UNSAFE    Force migration even if it is considered unsafe.
  VIR_MIGRATE_OFFLINE Migrate offline

The operation of this API hinges on the VIR_MIGRATE_PEER2PEER flag.
If the VIR_MIGRATE_PEER2PEER flag is NOT set, the duri parameter
takes a hypervisor specific format. The uri_transports element of the
hypervisor capabilities XML includes details of the supported URI
schemes. Not all hypervisors will support this mode of migration, so
if the VIR_MIGRATE_PEER2PEER flag is not set, then it may be necessary
to use the alternative virDomainMigrate API providing and explicit
virConnectPtr for the destination host.

If the VIR_MIGRATE_PEER2PEER flag IS set, the duri parameter
must be a valid libvirt connection URI, by which the source
libvirt driver can connect to the destination libvirt.

VIR_MIGRATE_TUNNELLED requires that VIR_MIGRATE_PEER2PEER be set.

If you want to copy non-shared storage within migration you
can use either VIR_MIGRATE_NON_SHARED_DISK or
VIR_MIGRATE_NON_SHARED_INC as they are mutually exclusive.

If a hypervisor supports renaming domains during migration,
the dname parameter specifies the new name for the domain.
Setting dname to NULL keeps the domain name the same.  If domain
renaming is not supported by the hypervisor, dname must be NULL or
else an error will be returned.

The maximum bandwidth (in MiB/s) that will be used to do migration
can be specified with the bandwidth parameter.  If set to 0,
libvirt will choose a suitable default.  Some hypervisors do
not support this feature and will return an error if bandwidth
is not 0.

To see which features are supported by the current hypervisor,
see virConnectGetCapabilities, /capabilities/host/migration_features.

There are many limitations on migration imposed by the underlying
technology - for example it may not be possible to migrate between
different processors even with the same architecture, or between
different types of hypervisor.]]></info>
      <return type='int' info='0 if the migration succeeded, -1 upon error.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='duri' type='const char *' info='mandatory URI for the destination host'/>
      <arg name='flags' type='unsigned long' info='bitwise-OR of virDomainMigrateFlags'/>
      <arg name='dname' type='const char *' info='(optional) rename domain to this at destination'/>
      <arg name='bandwidth' type='unsigned long' info='(optional) specify migration bandwidth limit in MiB/s'/>
    </function>
    <function name='virDomainMigrateToURI2' file='libvirt' module='libvirt'>
      <info><![CDATA[Migrate the domain object from its current host to the destination
host given by duri.

Flags may be one of more of the following:
  VIR_MIGRATE_LIVE      Do not pause the VM during migration
  VIR_MIGRATE_PEER2PEER Direct connection between source & destination hosts
  VIR_MIGRATE_TUNNELLED Tunnel migration data over the libvirt RPC channel
  VIR_MIGRATE_PERSIST_DEST If the migration is successful, persist the domain
                           on the destination host.
  VIR_MIGRATE_UNDEFINE_SOURCE If the migration is successful, undefine the
                              domain on the source host.
  VIR_MIGRATE_PAUSED    Leave the domain suspended on the remote side.
  VIR_MIGRATE_NON_SHARED_DISK Migration with non-shared storage with full
                              disk copy
  VIR_MIGRATE_NON_SHARED_INC  Migration with non-shared storage with
                              incremental disk copy
  VIR_MIGRATE_CHANGE_PROTECTION Protect against domain configuration
                                changes during the migration process (set
                                automatically when supported).
  VIR_MIGRATE_UNSAFE    Force migration even if it is considered unsafe.
  VIR_MIGRATE_OFFLINE Migrate offline

The operation of this API hinges on the VIR_MIGRATE_PEER2PEER flag.

If the VIR_MIGRATE_PEER2PEER flag is set, the @dconnuri parameter
must be a valid libvirt connection URI, by which the source
libvirt driver can connect to the destination libvirt. If the
VIR_MIGRATE_PEER2PEER flag is NOT set, then @dconnuri must be
NULL.

If the VIR_MIGRATE_TUNNELLED flag is NOT set, then the @miguri
parameter allows specification of a URI to use to initiate the
VM migration. It takes a hypervisor specific format. The uri_transports
element of the hypervisor capabilities XML includes details of the
supported URI schemes.

VIR_MIGRATE_TUNNELLED requires that VIR_MIGRATE_PEER2PEER be set.

If you want to copy non-shared storage within migration you
can use either VIR_MIGRATE_NON_SHARED_DISK or
VIR_MIGRATE_NON_SHARED_INC as they are mutually exclusive.

If a hypervisor supports changing the configuration of the guest
during migration, the @dxml parameter specifies the new config
for the guest. The configuration must include an identical set
of virtual devices, to ensure a stable guest ABI across migration.
Only parameters related to host side configuration can be
changed in the XML. Hypervisors will validate this and refuse to
allow migration if the provided XML would cause a change in the
guest ABI,

If a hypervisor supports renaming domains during migration,
the dname parameter specifies the new name for the domain.
Setting dname to NULL keeps the domain name the same.  If domain
renaming is not supported by the hypervisor, dname must be NULL or
else an error will be returned.

The maximum bandwidth (in MiB/s) that will be used to do migration
can be specified with the bandwidth parameter.  If set to 0,
libvirt will choose a suitable default.  Some hypervisors do
not support this feature and will return an error if bandwidth
is not 0.

To see which features are supported by the current hypervisor,
see virConnectGetCapabilities, /capabilities/host/migration_features.

There are many limitations on migration imposed by the underlying
technology - for example it may not be possible to migrate between
different processors even with the same architecture, or between
different types of hypervisor.]]></info>
      <return type='int' info='0 if the migration succeeded, -1 upon error.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='dconnuri' type='const char *' info='(optional) URI for target libvirtd if @flags includes VIR_MIGRATE_PEER2PEER'/>
      <arg name='miguri' type='const char *' info='(optional) URI for invoking the migration, not if @flags includs VIR_MIGRATE_TUNNELLED'/>
      <arg name='dxml' type='const char *' info='(optional) XML config for launching guest on target'/>
      <arg name='flags' type='unsigned long' info='bitwise-OR of virDomainMigrateFlags'/>
      <arg name='dname' type='const char *' info='(optional) rename domain to this at destination'/>
      <arg name='bandwidth' type='unsigned long' info='(optional) specify migration bandwidth limit in MiB/s'/>
    </function>
    <function name='virDomainMigrateToURI3' file='libvirt' module='libvirt'>
      <info><![CDATA[Migrate the domain object from its current host to the destination host
given by URI.

See virDomainMigrateFlags documentation for description of individual flags.

The operation of this API hinges on the VIR_MIGRATE_PEER2PEER flag.

If the VIR_MIGRATE_PEER2PEER flag is set, the @dconnuri parameter must be a
valid libvirt connection URI, by which the source libvirt daemon can connect
to the destination libvirt.

If the VIR_MIGRATE_PEER2PEER flag is NOT set, then @dconnuri must be NULL
and VIR_MIGRATE_PARAM_URI migration parameter must be filled in with
hypervisor specific URI used to initiate the migration. This is called
"direct" migration.

VIR_MIGRATE_TUNNELLED requires that VIR_MIGRATE_PEER2PEER be set.

If you want to copy non-shared storage within migration you
can use either VIR_MIGRATE_NON_SHARED_DISK or
VIR_MIGRATE_NON_SHARED_INC as they are mutually exclusive.

There are many limitations on migration imposed by the underlying
technology - for example it may not be possible to migrate between
different processors even with the same architecture, or between
different types of hypervisor.]]></info>
      <return type='int' info='0 if the migration succeeded, -1 upon error.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='dconnuri' type='const char *' info='(optional) URI for target libvirtd if @flags includes VIR_MIGRATE_PEER2PEER'/>
      <arg name='params' type='virTypedParameterPtr' info='(optional) migration parameters'/>
      <arg name='nparams' type='unsigned int' info='(optional) number of migration parameters in @params'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainMigrateFlags'/>
    </function>
    <function name='virDomainOpenChannel' file='libvirt' module='libvirt'>
      <info><![CDATA[This opens the host interface associated with a channel device on a
guest, if the host interface is supported.  If @name is given, it
can match either the device alias (e.g. "channel0"), or the virtio
target name (e.g. "org.qemu.guest_agent.0").  If @name is omitted,
then the first channel is opened. The channel is associated with
the passed in @st stream, which should have been opened in
non-blocking mode for bi-directional I/O.

By default, when @flags is 0, the open will fail if libvirt detects
that the channel is already in use by another client; passing
VIR_DOMAIN_CHANNEL_FORCE will cause libvirt to forcefully remove the
other client prior to opening this channel.]]></info>
      <return type='int' info='0 if the channel was opened, -1 on error'/>
      <arg name='dom' type='virDomainPtr' info='a domain object'/>
      <arg name='name' type='const char *' info='the channel name, or NULL'/>
      <arg name='st' type='virStreamPtr' info='a stream to associate with the channel'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainChannelFlags'/>
    </function>
    <function name='virDomainOpenConsole' file='libvirt' module='libvirt'>
      <info><![CDATA[This opens the backend associated with a console, serial or
parallel port device on a guest, if the backend is supported.
If the @dev_name is omitted, then the first console or serial
device is opened. The console is associated with the passed
in @st stream, which should have been opened in non-blocking
mode for bi-directional I/O.

By default, when @flags is 0, the open will fail if libvirt
detects that the console is already in use by another client;
passing VIR_DOMAIN_CONSOLE_FORCE will cause libvirt to forcefully
remove the other client prior to opening this console.

If flag VIR_DOMAIN_CONSOLE_SAFE the console is opened only in the
case where the hypervisor driver supports safe (mutually exclusive)
console handling.

Older servers did not support either flag, and also did not forbid
simultaneous clients on a console, with potentially confusing results.
When passing @flags of 0 in order to support a wider range of server
versions, it is up to the client to ensure mutual exclusion.]]></info>
      <return type='int' info='0 if the console was opened, -1 on error'/>
      <arg name='dom' type='virDomainPtr' info='a domain object'/>
      <arg name='dev_name' type='const char *' info='the console, serial or parallel port device alias, or NULL'/>
      <arg name='st' type='virStreamPtr' info='a stream to associate with the console'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainConsoleFlags'/>
    </function>
    <function name='virDomainOpenGraphics' file='libvirt' module='libvirt'>
      <info><![CDATA[This will attempt to connect the file descriptor @fd, to
the graphics backend of @dom. If @dom has multiple graphics
backends configured, then @idx will determine which one is
opened, starting from @idx 0.

To disable any authentication, pass the VIR_DOMAIN_OPEN_GRAPHICS_SKIPAUTH
constant for @flags.

The caller should use an anonymous socketpair to open
@fd before invocation.

This method can only be used when connected to a local
libvirt hypervisor, over a UNIX domain socket. Attempts
to use this method over a TCP connection will always fail]]></info>
      <return type='int' info='0 on success, -1 on failure'/>
      <arg name='dom' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='idx' type='unsigned int' info='index of graphics config to open'/>
      <arg name='fd' type='int' info='file descriptor to attach graphics to'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainOpenGraphicsFlags'/>
    </function>
    <function name='virDomainPMSuspendForDuration' file='libvirt' module='libvirt'>
      <info><![CDATA[Attempt to have the guest enter the given @target power management
suspension level.  If @duration is non-zero, also schedule the guest to
resume normal operation after that many seconds, if nothing else has
resumed it earlier.  Some hypervisors require that @duration be 0, for
an indefinite suspension.

Dependent on hypervisor used, this may require a
guest agent to be available, e.g. QEMU.

Beware that at least for QEMU, the domain's process will be terminated
when VIR_NODE_SUSPEND_TARGET_DISK is used and a new process will be
launched when libvirt is asked to wake up the domain. As a result of
this, any runtime changes, such as device hotplug or memory settings,
are lost unless such changes were made with VIR_DOMAIN_AFFECT_CONFIG
flag.]]></info>
      <return type='int' info='0 on success, -1 on failure.'/>
      <arg name='dom' type='virDomainPtr' info='a domain object'/>
      <arg name='target' type='unsigned int' info='a value from virNodeSuspendTarget'/>
      <arg name='duration' type='unsigned long long' info='duration in seconds to suspend, or 0 for indefinite'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virDomainPMWakeup' file='libvirt' module='libvirt'>
      <info><![CDATA[Inject a wakeup into the guest that previously used
virDomainPMSuspendForDuration, rather than waiting for the
previously requested duration (if any) to elapse.]]></info>
      <return type='int' info='0 on success, -1 on failure.'/>
      <arg name='dom' type='virDomainPtr' info='a domain object'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virDomainPinEmulator' file='libvirt' module='libvirt'>
      <info><![CDATA[Dynamically change the real CPUs which can be allocated to all emulator
threads. This function may require privileged access to the hypervisor.

@flags may include VIR_DOMAIN_AFFECT_LIVE or VIR_DOMAIN_AFFECT_CONFIG.
Both flags may be set.
If VIR_DOMAIN_AFFECT_LIVE is set, the change affects a running domain
and may fail if domain is not alive.
If VIR_DOMAIN_AFFECT_CONFIG is set, the change affects persistent state,
and will fail for transient domains. If neither flag is specified (that is,
@flags is VIR_DOMAIN_AFFECT_CURRENT), then an inactive domain modifies
persistent setup, while an active domain is hypervisor-dependent on whether
just live or both live and persistent state is changed.
Not all hypervisors can support all flag combinations.

See also virDomainGetEmulatorPinInfo for querying this information.]]></info>
      <return type='int' info='0 in case of success, -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object, or NULL for Domain0'/>
      <arg name='cpumap' type='unsigned char *' info='pointer to a bit map of real CPUs (in 8-bit bytes) (IN) Each bit set to 1 means that corresponding CPU is usable. Bytes are stored in little-endian order: CPU0-7, 8-15... In each byte, lowest CPU number is least significant bit.'/>
      <arg name='maplen' type='int' info='number of bytes in cpumap, from 1 up to size of CPU map in underlying virtualization system (Xen...). If maplen &lt; size, missing bytes are set to zero. If maplen &gt; size, failure code is returned.'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainModificationImpact'/>
    </function>
    <function name='virDomainPinVcpu' file='libvirt' module='libvirt'>
      <info><![CDATA[Dynamically change the real CPUs which can be allocated to a virtual CPU.
This function may require privileged access to the hypervisor.

This command only changes the runtime configuration of the domain,
so can only be called on an active domain.]]></info>
      <return type='int' info='0 in case of success, -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object, or NULL for Domain0'/>
      <arg name='vcpu' type='unsigned int' info='virtual CPU number'/>
      <arg name='cpumap' type='unsigned char *' info='pointer to a bit map of real CPUs (in 8-bit bytes) (IN) Each bit set to 1 means that corresponding CPU is usable. Bytes are stored in little-endian order: CPU0-7, 8-15... In each byte, lowest CPU number is least significant bit.'/>
      <arg name='maplen' type='int' info='number of bytes in cpumap, from 1 up to size of CPU map in underlying virtualization system (Xen...). If maplen &lt; size, missing bytes are set to zero. If maplen &gt; size, failure code is returned.'/>
    </function>
    <function name='virDomainPinVcpuFlags' file='libvirt' module='libvirt'>
      <info><![CDATA[Dynamically change the real CPUs which can be allocated to a virtual CPU.
This function may require privileged access to the hypervisor.

@flags may include VIR_DOMAIN_AFFECT_LIVE or VIR_DOMAIN_AFFECT_CONFIG.
Both flags may be set.
If VIR_DOMAIN_AFFECT_LIVE is set, the change affects a running domain
and may fail if domain is not alive.
If VIR_DOMAIN_AFFECT_CONFIG is set, the change affects persistent state,
and will fail for transient domains. If neither flag is specified (that is,
@flags is VIR_DOMAIN_AFFECT_CURRENT), then an inactive domain modifies
persistent setup, while an active domain is hypervisor-dependent on whether
just live or both live and persistent state is changed.
Not all hypervisors can support all flag combinations.

See also virDomainGetVcpuPinInfo for querying this information.]]></info>
      <return type='int' info='0 in case of success, -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object, or NULL for Domain0'/>
      <arg name='vcpu' type='unsigned int' info='virtual CPU number'/>
      <arg name='cpumap' type='unsigned char *' info='pointer to a bit map of real CPUs (in 8-bit bytes) (IN) Each bit set to 1 means that corresponding CPU is usable. Bytes are stored in little-endian order: CPU0-7, 8-15... In each byte, lowest CPU number is least significant bit.'/>
      <arg name='maplen' type='int' info='number of bytes in cpumap, from 1 up to size of CPU map in underlying virtualization system (Xen...). If maplen &lt; size, missing bytes are set to zero. If maplen &gt; size, failure code is returned.'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainModificationImpact'/>
    </function>
    <function name='virDomainReboot' file='libvirt' module='libvirt'>
      <info><![CDATA[Reboot a domain, the domain object is still usable thereafter, but
the domain OS is being stopped for a restart.
Note that the guest OS may ignore the request.
Additionally, the hypervisor may check and support the domain
'on_reboot' XML setting resulting in a domain that shuts down instead
of rebooting.

If @flags is set to zero, then the hypervisor will choose the
method of shutdown it considers best. To have greater control
pass one or more of the virDomainRebootFlagValues. The order
in which the hypervisor tries each shutdown method is undefined,
and a hypervisor is not required to support all methods.

To use guest agent (VIR_DOMAIN_REBOOT_GUEST_AGENT) the domain XML
must have <channel> configured.

Due to implementation limitations in some drivers (the qemu driver,
for instance) it is not advised to migrate or save a guest that is
rebooting as a result of this API. Migrating such a guest can lead
to a plain shutdown on the destination.]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainRebootFlagValues'/>
    </function>
    <function name='virDomainRef' file='libvirt' module='libvirt'>
      <info><![CDATA[Increment the reference count on the domain. For each
additional call to this method, there shall be a corresponding
call to virDomainFree to release the reference count, once
the caller no longer needs the reference to this object.

This method is typically useful for applications where multiple
threads are using a connection, and it is required that the
connection remain open until all threads have finished using
it. ie, each new thread using a domain would increment
the reference count.]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='the domain to hold a reference on'/>
    </function>
    <function name='virDomainReset' file='libvirt' module='libvirt'>
      <info><![CDATA[Reset a domain immediately without any guest OS shutdown.
Reset emulates the power reset button on a machine, where all
hardware sees the RST line set and reinitializes internal state.

Note that there is a risk of data loss caused by reset without any
guest OS shutdown.]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virDomainRestore' file='libvirt' module='libvirt'>
      <info><![CDATA[This method will restore a domain saved to disk by virDomainSave().

See virDomainRestoreFlags() for more control.]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='from' type='const char *' info='path to the input file'/>
    </function>
    <function name='virDomainRestoreFlags' file='libvirt' module='libvirt'>
      <info><![CDATA[This method will restore a domain saved to disk by virDomainSave().

If the hypervisor supports it, @dxml can be used to alter
host-specific portions of the domain XML that will be used when
restoring an image.  For example, it is possible to alter the
backing filename that is associated with a disk device, in order to
prepare for file renaming done as part of backing up the disk
device while the domain is stopped.

If @flags includes VIR_DOMAIN_SAVE_BYPASS_CACHE, then libvirt will
attempt to bypass the file system cache while restoring the file, or
fail if it cannot do so for the given system; this can allow less
pressure on file system cache, but also risks slowing restores from NFS.

Normally, the saved state file will remember whether the domain was
running or paused, and restore defaults to the same state.
Specifying VIR_DOMAIN_SAVE_RUNNING or VIR_DOMAIN_SAVE_PAUSED in
@flags will override the default read from the file.  These two
flags are mutually exclusive.]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='from' type='const char *' info='path to the input file'/>
      <arg name='dxml' type='const char *' info='(optional) XML config for adjusting guest xml used on restore'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainSaveRestoreFlags'/>
    </function>
    <function name='virDomainResume' file='libvirt' module='libvirt'>
      <info><![CDATA[Resume a suspended domain, the process is restarted from the state where
it was frozen by calling virDomainSuspend().
This function may require privileged access
Moreover, resume may not be supported if domain is in some
special state like VIR_DOMAIN_PMSUSPENDED.]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
    </function>
    <function name='virDomainRevertToSnapshot' file='libvirt' module='libvirt'>
      <info><![CDATA[Revert the domain to a given snapshot.

Normally, the domain will revert to the same state the domain was
in while the snapshot was taken (whether inactive, running, or
paused), except that disk snapshots default to reverting to
inactive state.  Including VIR_DOMAIN_SNAPSHOT_REVERT_RUNNING in
@flags overrides the snapshot state to guarantee a running domain
after the revert; or including VIR_DOMAIN_SNAPSHOT_REVERT_PAUSED in
@flags guarantees a paused domain after the revert.  These two
flags are mutually exclusive.  While a persistent domain does not
need either flag, it is not possible to revert a transient domain
into an inactive state, so transient domains require the use of one
of these two flags.

Reverting to any snapshot discards all configuration changes made since
the last snapshot.  Additionally, reverting to a snapshot from a running
domain is a form of data loss, since it discards whatever is in the
guest's RAM at the time.  Since the very nature of keeping snapshots
implies the intent to roll back state, no additional confirmation is
normally required for these lossy effects.

However, there are two particular situations where reverting will
be refused by default, and where @flags must include
VIR_DOMAIN_SNAPSHOT_REVERT_FORCE to acknowledge the risks.  1) Any
attempt to revert to a snapshot that lacks the metadata to perform
ABI compatibility checks (generally the case for snapshots that
lack a full <domain> when listed by virDomainSnapshotGetXMLDesc(),
such as those created prior to libvirt 0.9.5).  2) Any attempt to
revert a running domain to an active state that requires starting a
new hypervisor instance rather than reusing the existing hypervisor
(since this would terminate all connections to the domain, such as
such as VNC or Spice graphics) - this condition arises from active
snapshots that are provably ABI incomaptible, as well as from
inactive snapshots with a @flags request to start the domain after
the revert.]]></info>
      <return type='int' info='0 if the creation is successful, -1 on error.'/>
      <arg name='snapshot' type='virDomainSnapshotPtr' info='a domain snapshot object'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainSnapshotRevertFlags'/>
    </function>
    <function name='virDomainSave' file='libvirt' module='libvirt'>
      <info><![CDATA[This method will suspend a domain and save its memory contents to
a file on disk. After the call, if successful, the domain is not
listed as running anymore (this ends the life of a transient domain).
Use virDomainRestore() to restore a domain after saving.

See virDomainSaveFlags() for more control.  Also, a save file can
be inspected or modified slightly with virDomainSaveImageGetXMLDesc()
and virDomainSaveImageDefineXML().]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='to' type='const char *' info='path for the output file'/>
    </function>
    <function name='virDomainSaveFlags' file='libvirt' module='libvirt'>
      <info><![CDATA[This method will suspend a domain and save its memory contents to
a file on disk. After the call, if successful, the domain is not
listed as running anymore (this ends the life of a transient domain).
Use virDomainRestore() to restore a domain after saving.

If the hypervisor supports it, @dxml can be used to alter
host-specific portions of the domain XML that will be used when
restoring an image.  For example, it is possible to alter the
backing filename that is associated with a disk device, in order to
prepare for file renaming done as part of backing up the disk
device while the domain is stopped.

If @flags includes VIR_DOMAIN_SAVE_BYPASS_CACHE, then libvirt will
attempt to bypass the file system cache while creating the file, or
fail if it cannot do so for the given system; this can allow less
pressure on file system cache, but also risks slowing saves to NFS.

Normally, the saved state file will remember whether the domain was
running or paused, and restore defaults to the same state.
Specifying VIR_DOMAIN_SAVE_RUNNING or VIR_DOMAIN_SAVE_PAUSED in
@flags will override what state gets saved into the file.  These
two flags are mutually exclusive.

A save file can be inspected or modified slightly with
virDomainSaveImageGetXMLDesc() and virDomainSaveImageDefineXML().

Some hypervisors may prevent this operation if there is a current
block copy operation; in that case, use virDomainBlockJobAbort()
to stop the block copy first.]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='to' type='const char *' info='path for the output file'/>
      <arg name='dxml' type='const char *' info='(optional) XML config for adjusting guest xml used on restore'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainSaveRestoreFlags'/>
    </function>
    <function name='virDomainSaveImageDefineXML' file='libvirt' module='libvirt'>
      <info><![CDATA[This updates the definition of a domain stored in a saved state
file.  @file must be a file created previously by virDomainSave()
or virDomainSaveFlags().

@dxml can be used to alter host-specific portions of the domain XML
that will be used when restoring an image.  For example, it is
possible to alter the backing filename that is associated with a
disk device, to match renaming done as part of backing up the disk
device while the domain is stopped.

Normally, the saved state file will remember whether the domain was
running or paused, and restore defaults to the same state.
Specifying VIR_DOMAIN_SAVE_RUNNING or VIR_DOMAIN_SAVE_PAUSED in
@flags will override the default saved into the file; omitting both
leaves the file's default unchanged.  These two flags are mutually
exclusive.]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='file' type='const char *' info='path to saved state file'/>
      <arg name='dxml' type='const char *' info='XML config for adjusting guest xml used on restore'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainSaveRestoreFlags'/>
    </function>
    <function name='virDomainSaveImageGetXMLDesc' file='libvirt' module='libvirt'>
      <info><![CDATA[This method will extract the XML describing the domain at the time
a saved state file was created.  @file must be a file created
previously by virDomainSave() or virDomainSaveFlags().

No security-sensitive data will be included unless @flags contains
VIR_DOMAIN_XML_SECURE; this flag is rejected on read-only
connections.  For this API, @flags should not contain either
VIR_DOMAIN_XML_INACTIVE or VIR_DOMAIN_XML_UPDATE_CPU.]]></info>
      <return type='char *' info='a 0 terminated UTF-8 encoded XML instance, or NULL in case of error.  The caller must free() the returned value.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='file' type='const char *' info='path to saved state file'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of subset of virDomainXMLFlags'/>
    </function>
    <function name='virDomainScreenshot' file='libvirt' module='libvirt'>
      <info><![CDATA[Take a screenshot of current domain console as a stream. The image format
is hypervisor specific. Moreover, some hypervisors supports multiple
displays per domain. These can be distinguished by @screen argument.

This call sets up a stream; subsequent use of stream API is necessary
to transfer actual data, determine how much data is successfully
transferred, and detect any errors.

The screen ID is the sequential number of screen. In case of multiple
graphics cards, heads are enumerated before devices, e.g. having
two graphics cards, both with four heads, screen ID 5 addresses
the second head on the second card.]]></info>
      <return type='char *' info='a string representing the mime-type of the image format, or NULL upon error. The caller must free() the returned value.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='stream' type='virStreamPtr' info='stream to use as output'/>
      <arg name='screen' type='unsigned int' info='monitor ID to take screenshot from'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virDomainSendKey' file='libvirt' module='libvirt'>
      <info><![CDATA[Send key(s) to the guest.]]></info>
      <return type='int' info='0 in case of success, -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object, or NULL for Domain0'/>
      <arg name='codeset' type='unsigned int' info='the code set of keycodes, from virKeycodeSet'/>
      <arg name='holdtime' type='unsigned int' info='the duration (in milliseconds) that the keys will be held'/>
      <arg name='keycodes' type='unsigned int *' info='array of keycodes'/>
      <arg name='nkeycodes' type='int' info='number of keycodes, up to VIR_DOMAIN_SEND_KEY_MAX_KEYS'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virDomainSendProcessSignal' file='libvirt' module='libvirt'>
      <info><![CDATA[Send a signal to the designated process in the guest

The signal numbers must be taken from the virDomainProcessSignal
enum. These will be translated to the corresponding signal
number for the guest OS, by the guest agent delivering the
signal. If there is no mapping from virDomainProcessSignal to
the native OS signals, this API will report an error.

If @pid_value is an integer greater than zero, it is
treated as a process ID. If @pid_value is an integer
less than zero, it is treated as a process group ID.
All the @pid_value numbers are from the container/guest
namespace. The value zero is not valid.

Not all hypervisors will support sending signals to
arbitrary processes or process groups. If this API is
implemented the minimum requirement is to be able to
use @pid_value == 1 (i.e. kill init). No other value is
required to be supported.

If the @signum is VIR_DOMAIN_PROCESS_SIGNAL_NOP then this
API will simply report whether the process is running in
the container/guest.]]></info>
      <return type='int' info='0 in case of success, -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='pid_value' type='long long' info='a positive integer process ID, or negative integer process group ID'/>
      <arg name='signum' type='unsigned int' info='a signal from the virDomainProcessSignal enum'/>
      <arg name='flags' type='unsigned int' info='one of the virDomainProcessSignalFlag values'/>
    </function>
    <function name='virDomainSetAutostart' file='libvirt' module='libvirt'>
      <info><![CDATA[Configure the domain to be automatically started
when the host machine boots.]]></info>
      <return type='int' info='-1 in case of error, 0 in case of success'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='autostart' type='int' info='whether the domain should be automatically started 0 or 1'/>
    </function>
    <function name='virDomainSetBlkioParameters' file='libvirt' module='libvirt'>
      <info><![CDATA[Change all or a subset of the blkio tunables.
This function may require privileged access to the hypervisor.]]></info>
      <return type='int' info='-1 in case of error, 0 in case of success.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='params' type='virTypedParameterPtr' info='pointer to blkio parameter objects'/>
      <arg name='nparams' type='int' info='number of blkio parameters (this value can be the same or less than the number of parameters supported)'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainModificationImpact'/>
    </function>
    <function name='virDomainSetBlockIoTune' file='libvirt' module='libvirt'>
      <info><![CDATA[Change all or a subset of the per-device block IO tunables.

The @disk parameter is either an unambiguous source name of the
block device (the <source file='...'/> sub-element, such as
"/path/to/image"), or the device target shorthand (the <target
dev='...'/> sub-element, such as "xvda").  Valid names can be found
by calling virDomainGetXMLDesc() and inspecting elements
within //domain/devices/disk.]]></info>
      <return type='int' info='-1 in case of error, 0 in case of success.'/>
      <arg name='dom' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='disk' type='const char *' info='path to the block device, or device shorthand'/>
      <arg name='params' type='virTypedParameterPtr' info='Pointer to blkio parameter objects'/>
      <arg name='nparams' type='int' info='Number of blkio parameters (this value can be the same or less than the number of parameters supported)'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainModificationImpact'/>
    </function>
    <function name='virDomainSetInterfaceParameters' file='libvirt' module='libvirt'>
      <info><![CDATA[Change a subset or all parameters of interface; currently this
includes bandwidth parameters.  The value of @flags should be
either VIR_DOMAIN_AFFECT_CURRENT, or a bitwise-or of values
VIR_DOMAIN_AFFECT_LIVE and VIR_DOMAIN_AFFECT_CONFIG, although
hypervisors vary in which flags are supported.

This function may require privileged access to the hypervisor.]]></info>
      <return type='int' info='-1 in case of error, 0 in case of success.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='device' type='const char *' info='the interface name or mac address'/>
      <arg name='params' type='virTypedParameterPtr' info='pointer to interface parameter objects'/>
      <arg name='nparams' type='int' info='number of interface parameter (this value can be the same or less than the number of parameters supported)'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainModificationImpact'/>
    </function>
    <function name='virDomainSetMaxMemory' file='libvirt' module='libvirt'>
      <info><![CDATA[Dynamically change the maximum amount of physical memory allocated to a
domain. If domain is NULL, then this change the amount of memory reserved
to Domain0 i.e. the domain where the application runs.
This function may require privileged access to the hypervisor.

This command is hypervisor-specific for whether active, persistent,
or both configurations are changed; for more control, use
virDomainSetMemoryFlags().]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object or NULL'/>
      <arg name='memory' type='unsigned long' info='the memory size in kibibytes (blocks of 1024 bytes)'/>
    </function>
    <function name='virDomainSetMemory' file='libvirt' module='libvirt'>
      <info><![CDATA[Dynamically change the target amount of physical memory allocated to a
domain. If domain is NULL, then this change the amount of memory reserved
to Domain0 i.e. the domain where the application runs.
This function may require privileged access to the hypervisor.

This command only changes the runtime configuration of the domain,
so can only be called on an active domain.]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object or NULL'/>
      <arg name='memory' type='unsigned long' info='the memory size in kibibytes (blocks of 1024 bytes)'/>
    </function>
    <function name='virDomainSetMemoryFlags' file='libvirt' module='libvirt'>
      <info><![CDATA[Dynamically change the target amount of physical memory allocated to a
domain. If domain is NULL, then this change the amount of memory reserved
to Domain0 i.e. the domain where the application runs.
This function may require privileged access to the hypervisor.

@flags may include VIR_DOMAIN_AFFECT_LIVE or VIR_DOMAIN_AFFECT_CONFIG.
Both flags may be set. If VIR_DOMAIN_AFFECT_LIVE is set, the change affects
a running domain and will fail if domain is not active.
If VIR_DOMAIN_AFFECT_CONFIG is set, the change affects persistent state,
and will fail for transient domains. If neither flag is specified
(that is, @flags is VIR_DOMAIN_AFFECT_CURRENT), then an inactive domain
modifies persistent setup, while an active domain is hypervisor-dependent
on whether just live or both live and persistent state is changed.
If VIR_DOMAIN_MEM_MAXIMUM is set, the change affects domain's maximum memory
size rather than current memory size.
Not all hypervisors can support all flag combinations.]]></info>
      <return type='int' info='0 in case of success, -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object or NULL'/>
      <arg name='memory' type='unsigned long' info='the memory size in kibibytes (blocks of 1024 bytes)'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainMemoryModFlags'/>
    </function>
    <function name='virDomainSetMemoryParameters' file='libvirt' module='libvirt'>
      <info><![CDATA[Change all or a subset of the memory tunables.
This function may require privileged access to the hypervisor.]]></info>
      <return type='int' info='-1 in case of error, 0 in case of success.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='params' type='virTypedParameterPtr' info='pointer to memory parameter objects'/>
      <arg name='nparams' type='int' info='number of memory parameter (this value can be the same or less than the number of parameters supported)'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainModificationImpact'/>
    </function>
    <function name='virDomainSetMemoryStatsPeriod' file='libvirt' module='libvirt'>
      <info><![CDATA[Dynamically change the domain memory balloon driver statistics collection
period. Use 0 to disable and a positive value to enable.

@flags may include VIR_DOMAIN_AFFECT_LIVE or VIR_DOMAIN_AFFECT_CONFIG.
Both flags may be set. If VIR_DOMAIN_AFFECT_LIVE is set, the change affects
a running domain and will fail if domain is not active.
If VIR_DOMAIN_AFFECT_CONFIG is set, the change affects persistent state,
and will fail for transient domains. If neither flag is specified
(that is, @flags is VIR_DOMAIN_AFFECT_CURRENT), then an inactive domain
modifies persistent setup, while an active domain is hypervisor-dependent
on whether just live or both live and persistent state is changed.

Not all hypervisors can support all flag combinations.]]></info>
      <return type='int' info='0 in case of success, -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object or NULL'/>
      <arg name='period' type='int' info='the period in seconds for stats collection'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainMemoryModFlags'/>
    </function>
    <function name='virDomainSetMetadata' file='libvirt' module='libvirt'>
      <info><![CDATA[Sets the appropriate domain element given by @type to the
value of @description.  A @type of VIR_DOMAIN_METADATA_DESCRIPTION
is free-form text; VIR_DOMAIN_METADATA_TITLE is free-form, but no
newlines are permitted, and should be short (although the length is
not enforced). For these two options @key and @uri are irrelevant and
must be set to NULL.

For type VIR_DOMAIN_METADATA_ELEMENT @metadata  must be well-formed
XML belonging to namespace defined by @uri with local name @key.

Passing NULL for @metadata says to remove that element from the
domain XML (passing the empty string leaves the element present).

The resulting metadata will be present in virDomainGetXMLDesc(),
as well as quick access through virDomainGetMetadata().

@flags controls whether the live domain, persistent configuration,
or both will be modified.]]></info>
      <return type='int' info='0 on success, -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='type' type='int' info='type of description, from virDomainMetadataType'/>
      <arg name='metadata' type='const char *' info='new metadata text'/>
      <arg name='key' type='const char *' info='XML namespace key, or NULL'/>
      <arg name='uri' type='const char *' info='XML namespace URI, or NULL'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainModificationImpact'/>
    </function>
    <function name='virDomainSetNumaParameters' file='libvirt' module='libvirt'>
      <info><![CDATA[Change all or a subset of the numa tunables.
This function may require privileged access to the hypervisor.]]></info>
      <return type='int' info='-1 in case of error, 0 in case of success.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='params' type='virTypedParameterPtr' info='pointer to numa parameter objects'/>
      <arg name='nparams' type='int' info='number of numa parameters (this value can be the same or less than the number of parameters supported)'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainModificationImpact'/>
    </function>
    <function name='virDomainSetSchedulerParameters' file='libvirt' module='libvirt'>
      <info><![CDATA[Change all or a subset or the scheduler parameters.  It is
hypervisor-specific whether this sets live, persistent, or both
settings; for more control, use
virDomainSetSchedulerParametersFlags.]]></info>
      <return type='int' info='-1 in case of error, 0 in case of success.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='params' type='virTypedParameterPtr' info='pointer to scheduler parameter objects'/>
      <arg name='nparams' type='int' info='number of scheduler parameter objects (this value can be the same or less than the returned value nparams of virDomainGetSchedulerType)'/>
    </function>
    <function name='virDomainSetSchedulerParametersFlags' file='libvirt' module='libvirt'>
      <info><![CDATA[Change a subset or all scheduler parameters.  The value of @flags
should be either VIR_DOMAIN_AFFECT_CURRENT, or a bitwise-or of
values from VIR_DOMAIN_AFFECT_LIVE and
VIR_DOMAIN_AFFECT_CURRENT, although hypervisors vary in which
flags are supported.]]></info>
      <return type='int' info='-1 in case of error, 0 in case of success.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='params' type='virTypedParameterPtr' info='pointer to scheduler parameter objects'/>
      <arg name='nparams' type='int' info='number of scheduler parameter objects (this value can be the same or less than the returned value nparams of virDomainGetSchedulerType)'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainModificationImpact'/>
    </function>
    <function name='virDomainSetVcpus' file='libvirt' module='libvirt'>
      <info><![CDATA[Dynamically change the number of virtual CPUs used by the domain.
Note that this call may fail if the underlying virtualization hypervisor
does not support it or if growing the number is arbitrary limited.
This function may require privileged access to the hypervisor.

This command only changes the runtime configuration of the domain,
so can only be called on an active domain.  It is hypervisor-dependent
whether it also affects persistent configuration; for more control,
use virDomainSetVcpusFlags().]]></info>
      <return type='int' info='0 in case of success, -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object, or NULL for Domain0'/>
      <arg name='nvcpus' type='unsigned int' info='the new number of virtual CPUs for this domain'/>
    </function>
    <function name='virDomainSetVcpusFlags' file='libvirt' module='libvirt'>
      <info><![CDATA[Dynamically change the number of virtual CPUs used by the domain.
Note that this call may fail if the underlying virtualization hypervisor
does not support it or if growing the number is arbitrary limited.
This function may require privileged access to the hypervisor.

@flags may include VIR_DOMAIN_AFFECT_LIVE to affect a running
domain (which may fail if domain is not active), or
VIR_DOMAIN_AFFECT_CONFIG to affect the next boot via the XML
description of the domain.  Both flags may be set.
If neither flag is specified (that is, @flags is VIR_DOMAIN_AFFECT_CURRENT),
then an inactive domain modifies persistent setup, while an active domain
is hypervisor-dependent on whether just live or both live and persistent
state is changed.

If @flags includes VIR_DOMAIN_VCPU_MAXIMUM, then
VIR_DOMAIN_AFFECT_LIVE must be clear, and only the maximum virtual
CPU limit is altered; generally, this value must be less than or
equal to virConnectGetMaxVcpus().  Otherwise, this call affects the
current virtual CPU limit, which must be less than or equal to the
maximum limit.

If @flags includes VIR_DOMAIN_VCPU_GUEST, then the state of processors is
modified inside the guest instead of the hypervisor. This flag can only
be used with live guests and is incompatible with VIR_DOMAIN_VCPU_MAXIMUM.
The usage of this flag may require a guest agent configured.

Not all hypervisors can support all flag combinations.]]></info>
      <return type='int' info='0 in case of success, -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object, or NULL for Domain0'/>
      <arg name='nvcpus' type='unsigned int' info='the new number of virtual CPUs for this domain, must be at least 1'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainVcpuFlags'/>
    </function>
    <function name='virDomainShutdown' file='libvirt' module='libvirt'>
      <info><![CDATA[Shutdown a domain, the domain object is still usable thereafter, but
the domain OS is being stopped. Note that the guest OS may ignore the
request. Additionally, the hypervisor may check and support the domain
'on_poweroff' XML setting resulting in a domain that reboots instead of
shutting down. For guests that react to a shutdown request, the differences
from virDomainDestroy() are that the guests disk storage will be in a
stable state rather than having the (virtual) power cord pulled, and
this command returns as soon as the shutdown request is issued rather
than blocking until the guest is no longer running.

If the domain is transient and has any snapshot metadata (see
virDomainSnapshotNum()), then that metadata will automatically
be deleted when the domain quits.]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
    </function>
    <function name='virDomainShutdownFlags' file='libvirt' module='libvirt'>
      <info><![CDATA[Shutdown a domain, the domain object is still usable thereafter but
the domain OS is being stopped. Note that the guest OS may ignore the
request. Additionally, the hypervisor may check and support the domain
'on_poweroff' XML setting resulting in a domain that reboots instead of
shutting down. For guests that react to a shutdown request, the differences
from virDomainDestroy() are that the guest's disk storage will be in a
stable state rather than having the (virtual) power cord pulled, and
this command returns as soon as the shutdown request is issued rather
than blocking until the guest is no longer running.

If the domain is transient and has any snapshot metadata (see
virDomainSnapshotNum()), then that metadata will automatically
be deleted when the domain quits.

If @flags is set to zero, then the hypervisor will choose the
method of shutdown it considers best. To have greater control
pass one or more of the virDomainShutdownFlagValues. The order
in which the hypervisor tries each shutdown method is undefined,
and a hypervisor is not required to support all methods.

To use guest agent (VIR_DOMAIN_SHUTDOWN_GUEST_AGENT) the domain XML
must have <channel> configured.]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainShutdownFlagValues'/>
    </function>
    <function name='virDomainSnapshotCreateXML' file='libvirt' module='libvirt'>
      <info><![CDATA[Creates a new snapshot of a domain based on the snapshot xml
contained in xmlDesc.

If @flags is 0, the domain can be active, in which case the
snapshot will be a system checkpoint (both disk state and runtime
VM state such as RAM contents), where reverting to the snapshot is
the same as resuming from hibernation (TCP connections may have
timed out, but everything else picks up where it left off); or
the domain can be inactive, in which case the snapshot includes
just the disk state prior to booting.  The newly created snapshot
becomes current (see virDomainSnapshotCurrent()), and is a child
of any previous current snapshot.

If @flags includes VIR_DOMAIN_SNAPSHOT_CREATE_REDEFINE, then this
is a request to reinstate snapshot metadata that was previously
discarded, rather than creating a new snapshot.  This can be used
to recreate a snapshot hierarchy on a destination, then remove it
on the source, in order to allow migration (since migration
normally fails if snapshot metadata still remains on the source
machine).  When redefining snapshot metadata, the current snapshot
will not be altered unless the VIR_DOMAIN_SNAPSHOT_CREATE_CURRENT
flag is also present.  It is an error to request the
VIR_DOMAIN_SNAPSHOT_CREATE_CURRENT flag without
VIR_DOMAIN_SNAPSHOT_CREATE_REDEFINE.  On some hypervisors,
redefining an existing snapshot can be used to alter host-specific
portions of the domain XML to be used during revert (such as
backing filenames associated with disk devices), but must not alter
guest-visible layout.  When redefining a snapshot name that does
not exist, the hypervisor may validate that reverting to the
snapshot appears to be possible (for example, disk images have
snapshot contents by the requested name).  Not all hypervisors
support these flags.

If @flags includes VIR_DOMAIN_SNAPSHOT_CREATE_NO_METADATA, then the
domain's disk images are modified according to @xmlDesc, but then
the just-created snapshot has its metadata deleted.  This flag is
incompatible with VIR_DOMAIN_SNAPSHOT_CREATE_REDEFINE.

If @flags includes VIR_DOMAIN_SNAPSHOT_CREATE_HALT, then the domain
will be inactive after the snapshot completes, regardless of whether
it was active before; otherwise, a running domain will still be
running after the snapshot.  This flag is invalid on transient domains,
and is incompatible with VIR_DOMAIN_SNAPSHOT_CREATE_REDEFINE.

If @flags includes VIR_DOMAIN_SNAPSHOT_CREATE_LIVE, then the domain
is not paused while creating the snapshot. This increases the size
of the memory dump file, but reduces downtime of the guest while
taking the snapshot. Some hypervisors only support this flag during
external checkpoints.

If @flags includes VIR_DOMAIN_SNAPSHOT_CREATE_DISK_ONLY, then the
snapshot will be limited to the disks described in @xmlDesc, and no
VM state will be saved.  For an active guest, the disk image may be
inconsistent (as if power had been pulled), and specifying this
with the VIR_DOMAIN_SNAPSHOT_CREATE_HALT flag risks data loss.

If @flags includes VIR_DOMAIN_SNAPSHOT_CREATE_QUIESCE, then the
libvirt will attempt to use guest agent to freeze and thaw all
file systems in use within domain OS. However, if the guest agent
is not present, an error is thrown. Moreover, this flag requires
VIR_DOMAIN_SNAPSHOT_CREATE_DISK_ONLY to be passed as well.

By default, if the snapshot involves external files, and any of the
destination files already exist as a non-empty regular file, the
snapshot is rejected to avoid losing contents of those files.
However, if @flags includes VIR_DOMAIN_SNAPSHOT_CREATE_REUSE_EXT,
then the destination files must already exist and contain content
identical to the source files (this allows a management app to
pre-create files with relative backing file names, rather than the
default of creating with absolute backing file names).

Be aware that although libvirt prefers to report errors up front with
no other effect, some hypervisors have certain types of failures where
the overall command can easily fail even though the guest configuration
was partially altered (for example, if a disk snapshot request for two
disks fails on the second disk, but the first disk alteration cannot be
rolled back).  If this API call fails, it is therefore normally
necessary to follow up with virDomainGetXMLDesc() and check each disk
to determine if any partial changes occurred.  However, if @flags
contains VIR_DOMAIN_SNAPSHOT_CREATE_ATOMIC, then libvirt guarantees
that this command will not alter any disks unless the entire set of
changes can be done atomically, making failure recovery simpler (note
that it is still possible to fail after disks have changed, but only
in the much rarer cases of running out of memory or disk space).

Some hypervisors may prevent this operation if there is a current
block copy operation; in that case, use virDomainBlockJobAbort()
to stop the block copy first.]]></info>
      <return type='virDomainSnapshotPtr' info='an (opaque) virDomainSnapshotPtr on success, NULL on failure.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='xmlDesc' type='const char *' info='string containing an XML description of the domain'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainSnapshotCreateFlags'/>
    </function>
    <function name='virDomainSnapshotCurrent' file='libvirt' module='libvirt'>
      <info><![CDATA[Get the current snapshot for a domain, if any.]]></info>
      <return type='virDomainSnapshotPtr' info='a domain snapshot object or NULL in case of failure.  If the current domain snapshot cannot be found, then the VIR_ERR_NO_DOMAIN_SNAPSHOT error is raised.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virDomainSnapshotDelete' file='libvirt' module='libvirt'>
      <info><![CDATA[Delete the snapshot.

If @flags is 0, then just this snapshot is deleted, and changes
from this snapshot are automatically merged into children
snapshots.  If @flags includes VIR_DOMAIN_SNAPSHOT_DELETE_CHILDREN,
then this snapshot and any descendant snapshots are deleted.  If
@flags includes VIR_DOMAIN_SNAPSHOT_DELETE_CHILDREN_ONLY, then any
descendant snapshots are deleted, but this snapshot remains.  These
two flags are mutually exclusive.

If @flags includes VIR_DOMAIN_SNAPSHOT_DELETE_METADATA_ONLY, then
any snapshot metadata tracked by libvirt is removed while keeping
the snapshot contents intact; if a hypervisor does not require any
libvirt metadata to track snapshots, then this flag is silently
ignored.]]></info>
      <return type='int' info='0 if the selected snapshot(s) were successfully deleted, -1 on error.'/>
      <arg name='snapshot' type='virDomainSnapshotPtr' info='a domain snapshot object'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of supported virDomainSnapshotDeleteFlags'/>
    </function>
    <function name='virDomainSnapshotFree' file='libvirt' module='libvirt'>
      <info><![CDATA[Free the domain snapshot object.  The snapshot itself is not modified.
The data structure is freed and should not be used thereafter.]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='snapshot' type='virDomainSnapshotPtr' info='a domain snapshot object'/>
    </function>
    <function name='virDomainSnapshotGetConnect' file='libvirt' module='libvirt'>
      <info><![CDATA[Provides the connection pointer associated with a snapshot.  The
reference counter on the connection is not increased by this
call.

WARNING: When writing libvirt bindings in other languages, do not use this
function.  Instead, store the connection and the snapshot object together.]]></info>
      <return type='virConnectPtr' info='the connection or NULL.'/>
      <arg name='snapshot' type='virDomainSnapshotPtr' info='a snapshot object'/>
    </function>
    <function name='virDomainSnapshotGetDomain' file='libvirt' module='libvirt'>
      <info><![CDATA[Provides the domain pointer associated with a snapshot.  The
reference counter on the domain is not increased by this
call.

WARNING: When writing libvirt bindings in other languages, do not use this
function.  Instead, store the domain and the snapshot object together.]]></info>
      <return type='virDomainPtr' info='the domain or NULL.'/>
      <arg name='snapshot' type='virDomainSnapshotPtr' info='a snapshot object'/>
    </function>
    <function name='virDomainSnapshotGetName' file='libvirt' module='libvirt'>
      <info><![CDATA[Get the public name for that snapshot]]></info>
      <return type='const char *' info='a pointer to the name or NULL, the string need not be deallocated as its lifetime will be the same as the snapshot object.'/>
      <arg name='snapshot' type='virDomainSnapshotPtr' info='a snapshot object'/>
    </function>
    <function name='virDomainSnapshotGetParent' file='libvirt' module='libvirt'>
      <info><![CDATA[Get the parent snapshot for @snapshot, if any.]]></info>
      <return type='virDomainSnapshotPtr' info='a domain snapshot object or NULL in case of failure.  If the given snapshot is a root (no parent), then the VIR_ERR_NO_DOMAIN_SNAPSHOT error is raised.'/>
      <arg name='snapshot' type='virDomainSnapshotPtr' info='a snapshot object'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virDomainSnapshotGetXMLDesc' file='libvirt' module='libvirt'>
      <info><![CDATA[Provide an XML description of the domain snapshot.

No security-sensitive data will be included unless @flags contains
VIR_DOMAIN_XML_SECURE; this flag is rejected on read-only
connections.  For this API, @flags should not contain either
VIR_DOMAIN_XML_INACTIVE or VIR_DOMAIN_XML_UPDATE_CPU.]]></info>
      <return type='char *' info='a 0 terminated UTF-8 encoded XML instance, or NULL in case of error. the caller must free() the returned value.'/>
      <arg name='snapshot' type='virDomainSnapshotPtr' info='a domain snapshot object'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of subset of virDomainXMLFlags'/>
    </function>
    <function name='virDomainSnapshotHasMetadata' file='libvirt' module='libvirt'>
      <info><![CDATA[Determine if the given snapshot is associated with libvirt metadata
that would prevent the deletion of the domain.]]></info>
      <return type='int' info='1 if the snapshot has metadata, 0 if the snapshot exists without help from libvirt, or -1 on error.'/>
      <arg name='snapshot' type='virDomainSnapshotPtr' info='a snapshot object'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virDomainSnapshotIsCurrent' file='libvirt' module='libvirt'>
      <info><![CDATA[Determine if the given snapshot is the domain's current snapshot.  See
also virDomainHasCurrentSnapshot().]]></info>
      <return type='int' info='1 if current, 0 if not current, or -1 on error.'/>
      <arg name='snapshot' type='virDomainSnapshotPtr' info='a snapshot object'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virDomainSnapshotListAllChildren' file='libvirt' module='libvirt'>
      <info><![CDATA[Collect the list of domain snapshots that are children of the given
snapshot, and allocate an array to store those objects.  This API solves
the race inherent in virDomainSnapshotListChildrenNames().

By default, this command covers only direct children; it is also possible
to expand things to cover all descendants, when @flags includes
VIR_DOMAIN_SNAPSHOT_LIST_DESCENDANTS.  Also, some filters are provided in
groups, where each group contains bits that describe mutually exclusive
attributes of a snapshot, and where all bits within a group describe
all possible snapshots.  Some hypervisors might reject explicit bits
from a group where the hypervisor cannot make a distinction.  For a
group supported by a given hypervisor, the behavior when no bits of a
group are set is identical to the behavior when all bits in that group
are set.  When setting bits from more than one group, it is possible to
select an impossible combination, in that case a hypervisor may return
either 0 or an error.

The first group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_LEAVES and
VIR_DOMAIN_SNAPSHOT_LIST_NO_LEAVES, to filter based on snapshots that
have no further children (a leaf snapshot).

The next group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_METADATA and
VIR_DOMAIN_SNAPSHOT_LIST_NO_METADATA, for filtering snapshots based on
whether they have metadata that would prevent the removal of the last
reference to a domain.

The next group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_INACTIVE,
VIR_DOMAIN_SNAPSHOT_LIST_ACTIVE, and VIR_DOMAIN_SNAPSHOT_LIST_DISK_ONLY,
for filtering snapshots based on what domain state is tracked by the
snapshot.

The next group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_INTERNAL and
VIR_DOMAIN_SNAPSHOT_LIST_EXTERNAL, for filtering snapshots based on
whether the snapshot is stored inside the disk images or as
additional files.]]></info>
      <return type='int' info='the number of domain snapshots found or -1 and sets @snaps to NULL in case of error.  On success, the array stored into @snaps is guaranteed to have an extra allocated element set to NULL but not included in the return count, to make iteration easier.  The caller is responsible for calling virDomainSnapshotFree() on each array element, then calling free() on @snaps.'/>
      <arg name='snapshot' type='virDomainSnapshotPtr' info='a domain snapshot object'/>
      <arg name='snaps' type='virDomainSnapshotPtr **' info='pointer to variable to store the array containing snapshot objects, or NULL if the list is not required (just returns number of snapshots)'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of supported virDomainSnapshotListFlags'/>
    </function>
    <function name='virDomainSnapshotListChildrenNames' file='libvirt' module='libvirt'>
      <info><![CDATA[Collect the list of domain snapshots that are children of the given
snapshot, and store their names in @names.  The value to use for
@nameslen can be determined by virDomainSnapshotNumChildren() with
the same @flags.

By default, this command covers only direct children; it is also possible
to expand things to cover all descendants, when @flags includes
VIR_DOMAIN_SNAPSHOT_LIST_DESCENDANTS.  Also, some filters are provided in
groups, where each group contains bits that describe mutually exclusive
attributes of a snapshot, and where all bits within a group describe
all possible snapshots.  Some hypervisors might reject explicit bits
from a group where the hypervisor cannot make a distinction.  For a
group supported by a given hypervisor, the behavior when no bits of a
group are set is identical to the behavior when all bits in that group
are set.  When setting bits from more than one group, it is possible to
select an impossible combination, in that case a hypervisor may return
either 0 or an error.

The first group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_LEAVES and
VIR_DOMAIN_SNAPSHOT_LIST_NO_LEAVES, to filter based on snapshots that
have no further children (a leaf snapshot).

The next group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_METADATA and
VIR_DOMAIN_SNAPSHOT_LIST_NO_METADATA, for filtering snapshots based on
whether they have metadata that would prevent the removal of the last
reference to a domain.

The next group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_INACTIVE,
VIR_DOMAIN_SNAPSHOT_LIST_ACTIVE, and VIR_DOMAIN_SNAPSHOT_LIST_DISK_ONLY,
for filtering snapshots based on what domain state is tracked by the
snapshot.

The next group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_INTERNAL and
VIR_DOMAIN_SNAPSHOT_LIST_EXTERNAL, for filtering snapshots based on
whether the snapshot is stored inside the disk images or as
additional files.]]></info>
      <return type='int' info='the number of domain snapshots found or -1 in case of error. Note that this command is inherently racy: another connection can define a new snapshot between a call to virDomainSnapshotNumChildren() and this call.  You are only guaranteed that all currently defined snapshots were listed if the return is less than @nameslen.  Likewise, you should be prepared for virDomainSnapshotLookupByName() to fail when converting a name from this call into a snapshot object, if another connection deletes the snapshot in the meantime.  For more control over the results, see virDomainSnapshotListAllChildren().  Returns the number of domain snapshots found or -1 in case of error. The caller is responsible to call free() for each member of the array.'/>
      <arg name='snapshot' type='virDomainSnapshotPtr' info='a domain snapshot object'/>
      <arg name='names' type='char **' info='array to collect the list of names of snapshots'/>
      <arg name='nameslen' type='int' info='size of @names'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of supported virDomainSnapshotListFlags'/>
    </function>
    <function name='virDomainSnapshotListNames' file='libvirt' module='libvirt'>
      <info><![CDATA[Collect the list of domain snapshots for the given domain, and store
their names in @names.  The value to use for @nameslen can be determined
by virDomainSnapshotNum() with the same @flags.

By default, this command covers all snapshots; it is also possible to
limit things to just snapshots with no parents, when @flags includes
VIR_DOMAIN_SNAPSHOT_LIST_ROOTS.  Additional filters are provided in
groups, where each group contains bits that describe mutually exclusive
attributes of a snapshot, and where all bits within a group describe
all possible snapshots.  Some hypervisors might reject explicit bits
from a group where the hypervisor cannot make a distinction.  For a
group supported by a given hypervisor, the behavior when no bits of a
group are set is identical to the behavior when all bits in that group
are set.  When setting bits from more than one group, it is possible to
select an impossible combination, in that case a hypervisor may return
either 0 or an error.

The first group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_LEAVES and
VIR_DOMAIN_SNAPSHOT_LIST_NO_LEAVES, to filter based on snapshots that
have no further children (a leaf snapshot).

The next group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_METADATA and
VIR_DOMAIN_SNAPSHOT_LIST_NO_METADATA, for filtering snapshots based on
whether they have metadata that would prevent the removal of the last
reference to a domain.

The next group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_INACTIVE,
VIR_DOMAIN_SNAPSHOT_LIST_ACTIVE, and VIR_DOMAIN_SNAPSHOT_LIST_DISK_ONLY,
for filtering snapshots based on what domain state is tracked by the
snapshot.

The next group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_INTERNAL and
VIR_DOMAIN_SNAPSHOT_LIST_EXTERNAL, for filtering snapshots based on
whether the snapshot is stored inside the disk images or as
additional files.

Note that this command is inherently racy: another connection can
define a new snapshot between a call to virDomainSnapshotNum() and
this call.  You are only guaranteed that all currently defined
snapshots were listed if the return is less than @nameslen.  Likewise,
you should be prepared for virDomainSnapshotLookupByName() to fail when
converting a name from this call into a snapshot object, if another
connection deletes the snapshot in the meantime.  For more control over
the results, see virDomainListAllSnapshots().]]></info>
      <return type='int' info='the number of domain snapshots found or -1 in case of error. The caller is responsible to call free() for each member of the array.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='names' type='char **' info='array to collect the list of names of snapshots'/>
      <arg name='nameslen' type='int' info='size of @names'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of supported virDomainSnapshotListFlags'/>
    </function>
    <function name='virDomainSnapshotLookupByName' file='libvirt' module='libvirt'>
      <info><![CDATA[Try to lookup a domain snapshot based on its name.]]></info>
      <return type='virDomainSnapshotPtr' info='a domain snapshot object or NULL in case of failure.  If the domain snapshot cannot be found, then the VIR_ERR_NO_DOMAIN_SNAPSHOT error is raised.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='name' type='const char *' info='name for the domain snapshot'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virDomainSnapshotNum' file='libvirt' module='libvirt'>
      <info><![CDATA[Provides the number of domain snapshots for this domain.

By default, this command covers all snapshots; it is also possible to
limit things to just snapshots with no parents, when @flags includes
VIR_DOMAIN_SNAPSHOT_LIST_ROOTS.  Additional filters are provided in
groups, where each group contains bits that describe mutually exclusive
attributes of a snapshot, and where all bits within a group describe
all possible snapshots.  Some hypervisors might reject explicit bits
from a group where the hypervisor cannot make a distinction.  For a
group supported by a given hypervisor, the behavior when no bits of a
group are set is identical to the behavior when all bits in that group
are set.  When setting bits from more than one group, it is possible to
select an impossible combination, in that case a hypervisor may return
either 0 or an error.

The first group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_LEAVES and
VIR_DOMAIN_SNAPSHOT_LIST_NO_LEAVES, to filter based on snapshots that
have no further children (a leaf snapshot).

The next group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_METADATA and
VIR_DOMAIN_SNAPSHOT_LIST_NO_METADATA, for filtering snapshots based on
whether they have metadata that would prevent the removal of the last
reference to a domain.

The next group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_INACTIVE,
VIR_DOMAIN_SNAPSHOT_LIST_ACTIVE, and VIR_DOMAIN_SNAPSHOT_LIST_DISK_ONLY,
for filtering snapshots based on what domain state is tracked by the
snapshot.

The next group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_INTERNAL and
VIR_DOMAIN_SNAPSHOT_LIST_EXTERNAL, for filtering snapshots based on
whether the snapshot is stored inside the disk images or as
additional files.]]></info>
      <return type='int' info='the number of domain snapshots found or -1 in case of error.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of supported virDomainSnapshotListFlags'/>
    </function>
    <function name='virDomainSnapshotNumChildren' file='libvirt' module='libvirt'>
      <info><![CDATA[Provides the number of child snapshots for this domain snapshot.

By default, this command covers only direct children; it is also possible
to expand things to cover all descendants, when @flags includes
VIR_DOMAIN_SNAPSHOT_LIST_DESCENDANTS.  Also, some filters are provided in
groups, where each group contains bits that describe mutually exclusive
attributes of a snapshot, and where all bits within a group describe
all possible snapshots.  Some hypervisors might reject explicit bits
from a group where the hypervisor cannot make a distinction.  For a
group supported by a given hypervisor, the behavior when no bits of a
group are set is identical to the behavior when all bits in that group
are set.  When setting bits from more than one group, it is possible to
select an impossible combination, in that case a hypervisor may return
either 0 or an error.

The first group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_LEAVES and
VIR_DOMAIN_SNAPSHOT_LIST_NO_LEAVES, to filter based on snapshots that
have no further children (a leaf snapshot).

The next group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_METADATA and
VIR_DOMAIN_SNAPSHOT_LIST_NO_METADATA, for filtering snapshots based on
whether they have metadata that would prevent the removal of the last
reference to a domain.

The next group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_INACTIVE,
VIR_DOMAIN_SNAPSHOT_LIST_ACTIVE, and VIR_DOMAIN_SNAPSHOT_LIST_DISK_ONLY,
for filtering snapshots based on what domain state is tracked by the
snapshot.

The next group of @flags is VIR_DOMAIN_SNAPSHOT_LIST_INTERNAL and
VIR_DOMAIN_SNAPSHOT_LIST_EXTERNAL, for filtering snapshots based on
whether the snapshot is stored inside the disk images or as
additional files.]]></info>
      <return type='int' info='the number of domain snapshots found or -1 in case of error.'/>
      <arg name='snapshot' type='virDomainSnapshotPtr' info='a domain snapshot object'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of supported virDomainSnapshotListFlags'/>
    </function>
    <function name='virDomainSnapshotRef' file='libvirt' module='libvirt'>
      <info><![CDATA[Increment the reference count on the snapshot. For each
additional call to this method, there shall be a corresponding
call to virDomainSnapshotFree to release the reference count, once
the caller no longer needs the reference to this object.

This method is typically useful for applications where multiple
threads are using a connection, and it is required that the
connection and domain remain open until all threads have finished
using the snapshot. ie, each new thread using a snapshot would
increment the reference count.]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='snapshot' type='virDomainSnapshotPtr' info='the snapshot to hold a reference on'/>
    </function>
    <function name='virDomainSuspend' file='libvirt' module='libvirt'>
      <info><![CDATA[Suspends an active domain, the process is frozen without further access
to CPU resources and I/O but the memory used by the domain at the
hypervisor level will stay allocated. Use virDomainResume() to reactivate
the domain.
This function may require privileged access.
Moreover, suspend may not be supported if domain is in some
special state like VIR_DOMAIN_PMSUSPENDED.]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
    </function>
    <function name='virDomainUndefine' file='libvirt' module='libvirt'>
      <info><![CDATA[Undefine a domain. If the domain is running, it's converted to
transient domain, without stopping it. If the domain is inactive,
the domain configuration is removed.

If the domain has a managed save image (see
virDomainHasManagedSaveImage()), or if it is inactive and has any
snapshot metadata (see virDomainSnapshotNum()), then the undefine will
fail. See virDomainUndefineFlags() for more control.]]></info>
      <return type='int' info='0 in case of success, -1 in case of error'/>
      <arg name='domain' type='virDomainPtr' info='pointer to a defined domain'/>
    </function>
    <function name='virDomainUndefineFlags' file='libvirt' module='libvirt'>
      <info><![CDATA[Undefine a domain. If the domain is running, it's converted to
transient domain, without stopping it. If the domain is inactive,
the domain configuration is removed.

If the domain has a managed save image (see virDomainHasManagedSaveImage()),
then including VIR_DOMAIN_UNDEFINE_MANAGED_SAVE in @flags will also remove
that file, and omitting the flag will cause the undefine process to fail.

If the domain is inactive and has any snapshot metadata (see
virDomainSnapshotNum()), then including
VIR_DOMAIN_UNDEFINE_SNAPSHOTS_METADATA in @flags will also remove
that metadata.  Omitting the flag will cause the undefine of an
inactive domain to fail.  Active snapshots will retain snapshot
metadata until the (now-transient) domain halts, regardless of
whether this flag is present.  On hypervisors where snapshots do
not use libvirt metadata, this flag has no effect.]]></info>
      <return type='int' info='0 in case of success, -1 in case of error'/>
      <arg name='domain' type='virDomainPtr' info='pointer to a defined domain'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of supported virDomainUndefineFlagsValues'/>
    </function>
    <function name='virDomainUpdateDeviceFlags' file='libvirt' module='libvirt'>
      <info><![CDATA[Change a virtual device on a domain, using the flags parameter
to control how the device is changed.  VIR_DOMAIN_AFFECT_CURRENT
specifies that the device change is made based on current domain
state.  VIR_DOMAIN_AFFECT_LIVE specifies that the device shall be
changed on the active domain instance only and is not added to the
persisted domain configuration. VIR_DOMAIN_AFFECT_CONFIG
specifies that the device shall be changed on the persisted domain
configuration only.  Note that the target hypervisor must return an
error if unable to satisfy flags.  E.g. the hypervisor driver will
return failure if LIVE is specified but it only supports modifying the
persisted device allocation.

This method is used for actions such changing CDROM/Floppy device
media, altering the graphics configuration such as password,
reconfiguring the NIC device backend connectivity, etc.]]></info>
      <return type='int' info='0 in case of success, -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='xml' type='const char *' info='pointer to XML description of one device'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainDeviceModifyFlags'/>
    </function>
    <functype name='virErrorFunc' file='virterror' module='virterror'>
      <info><![CDATA[Signature of a function to use when there is an error raised by the library.]]></info>
      <return type='void'/>
      <arg name='userData' type='void *' info='user provided data for the error callback'/>
      <arg name='error' type='virErrorPtr' info='the error being raised.'/>
    </functype>
    <function name='virEventAddHandle' file='libvirt' module='virevent'>
      <info><![CDATA[Register a callback for monitoring file handle events.  This function
requires that an event loop has previously been registered with
virEventRegisterImpl() or virEventRegisterDefaultImpl().]]></info>
      <return type='int' info='-1 if the file handle cannot be registered, otherwise a handle watch number to be used for updating and unregistering for events.'/>
      <arg name='fd' type='int' info='file handle to monitor for events'/>
      <arg name='events' type='int' info='bitset of events to watch from virEventHandleType constants'/>
      <arg name='cb' type='virEventHandleCallback' info='callback to invoke when an event occurs'/>
      <arg name='opaque' type='void *' info='user data to pass to callback'/>
      <arg name='ff' type='virFreeCallback' info='callback to free opaque when handle is removed'/>
    </function>
    <functype name='virEventAddHandleFunc' file='libvirt' module='libvirt'>
      <info><![CDATA[Part of the EventImpl, this callback adds a file handle callback to
listen for specific events. The same file handle can be registered
multiple times provided the requested event sets are non-overlapping

If the opaque user data requires free'ing when the handle
is unregistered, then a 2nd callback can be supplied for
this purpose. This callback needs to be invoked from a clean stack.
If 'ff' callbacks are invoked directly from the virEventRemoveHandleFunc
they will likely deadlock in libvirt.]]></info>
      <return type='int' info='-1 if the file handle cannot be registered, otherwise a handle watch number to be used for updating and unregistering for events'/>
      <arg name='fd' type='int' info='file descriptor to listen on'/>
      <arg name='event' type='int' info='bitset of events on which to fire the callback'/>
      <arg name='cb' type='virEventHandleCallback' info='the callback to be called when an event occurrs'/>
      <arg name='opaque' type='void *' info='user data to pass to the callback'/>
      <arg name='ff' type='virFreeCallback' info='the callback invoked to free opaque data blob'/>
    </functype>
    <function name='virEventAddTimeout' file='libvirt' module='virevent'>
      <info><![CDATA[Register a callback for a timer event.  This function
requires that an event loop has previously been registered with
virEventRegisterImpl() or virEventRegisterDefaultImpl().

Setting @timeout to -1 will disable the timer. Setting @timeout
to zero will cause it to fire on every event loop iteration.]]></info>
      <return type='int' info='-1 if the timer cannot be registered, a positive integer timer id upon success.'/>
      <arg name='timeout' type='int' info='time between events in milliseconds'/>
      <arg name='cb' type='virEventTimeoutCallback' info='callback to invoke when an event occurs'/>
      <arg name='opaque' type='void *' info='user data to pass to callback'/>
      <arg name='ff' type='virFreeCallback' info='callback to free opaque when timeout is removed'/>
    </function>
    <functype name='virEventAddTimeoutFunc' file='libvirt' module='libvirt'>
      <info><![CDATA[Part of the EventImpl, this user-defined callback handles adding an
event timeout.

If the opaque user data requires free'ing when the handle
is unregistered, then a 2nd callback can be supplied for
this purpose.]]></info>
      <return type='int' info='a timer value'/>
      <arg name='timeout' type='int' info='The timeout to monitor'/>
      <arg name='cb' type='virEventTimeoutCallback' info='the callback to call when timeout has expired'/>
      <arg name='opaque' type='void *' info='user data to pass to the callback'/>
      <arg name='ff' type='virFreeCallback' info='the callback invoked to free opaque data blob'/>
    </functype>
    <functype name='virEventHandleCallback' file='libvirt' module='libvirt'>
      <info><![CDATA[Callback for receiving file handle events. The callback will
be invoked once for each event which is pending.]]></info>
      <return type='void'/>
      <arg name='watch' type='int' info='watch on which the event occurred'/>
      <arg name='fd' type='int' info='file handle on which the event occurred'/>
      <arg name='events' type='int' info='bitset of events from virEventHandleType constants'/>
      <arg name='opaque' type='void *' info='user data registered with handle'/>
    </functype>
    <function name='virEventRegisterDefaultImpl' file='libvirt' module='virevent'>
      <info><![CDATA[Registers a default event implementation based on the
poll() system call. This is a generic implementation
that can be used by any client application which does
not have a need to integrate with an external event
loop impl.

Once registered, the application has to invoke virEventRunDefaultImpl() in
a loop to process events.  Failure to do so may result in connections being
closed unexpectedly as a result of keepalive timeout.  The default
event loop fully supports handle and timeout events, but only
wakes up on events registered by libvirt API calls such as
virEventAddHandle() or virConnectDomainEventRegisterAny().]]></info>
      <return type='int' info='0 on success, -1 on failure.'/>
    </function>
    <function name='virEventRegisterImpl' file='libvirt' module='virevent'>
      <info><![CDATA[Registers an event implementation, to allow integration
with an external event loop. Applications would use this
to integrate with the libglib2 event loop, or libevent
or the QT event loop.

Use of the virEventAddHandle() and similar APIs require that the
corresponding handler is registered.  Use of the
virConnectDomainEventRegisterAny() and similar APIs requires that
the three timeout handlers are registered.  Likewise, the three
timeout handlers must be registered if the remote server has been
configured to send keepalive messages, or if the client intends
to call virConnectSetKeepAlive(), to avoid either side from
unexpectedly closing the connection due to inactivity.

If an application does not need to integrate with an
existing event loop implementation, then the
virEventRegisterDefaultImpl() method can be used to setup
the generic libvirt implementation.]]></info>
      <return type='void'/>
      <arg name='addHandle' type='virEventAddHandleFunc' info='the callback to add fd handles'/>
      <arg name='updateHandle' type='virEventUpdateHandleFunc' info='the callback to update fd handles'/>
      <arg name='removeHandle' type='virEventRemoveHandleFunc' info='the callback to remove fd handles'/>
      <arg name='addTimeout' type='virEventAddTimeoutFunc' info='the callback to add a timeout'/>
      <arg name='updateTimeout' type='virEventUpdateTimeoutFunc' info='the callback to update a timeout'/>
      <arg name='removeTimeout' type='virEventRemoveTimeoutFunc' info='the callback to remove a timeout'/>
    </function>
    <function name='virEventRemoveHandle' file='libvirt' module='virevent'>
      <info><![CDATA[Unregister a callback from a file handle.  This function
requires that an event loop has previously been registered with
virEventRegisterImpl() or virEventRegisterDefaultImpl().]]></info>
      <return type='int' info='-1 if the file handle was not registered, 0 upon success.'/>
      <arg name='watch' type='int' info='watch whose file handle to remove'/>
    </function>
    <functype name='virEventRemoveHandleFunc' file='libvirt' module='libvirt'>
      <info><![CDATA[Part of the EventImpl, this user-provided callback is notified when
an fd is no longer being listened on.

If a virEventHandleFreeFunc was supplied when the handle was
registered, it will be invoked some time during, or after this
function call, when it is safe to release the user data.]]></info>
      <return type='int' info='-1 if the file handle was not registered, 0 upon success'/>
      <arg name='watch' type='int' info='file descriptor watch to stop listening on'/>
    </functype>
    <function name='virEventRemoveTimeout' file='libvirt' module='virevent'>
      <info><![CDATA[Unregister a callback for a timer.  This function
requires that an event loop has previously been registered with
virEventRegisterImpl() or virEventRegisterDefaultImpl().]]></info>
      <return type='int' info='-1 if the timer was not registered, 0 upon success.'/>
      <arg name='timer' type='int' info='the timer id to remove'/>
    </function>
    <functype name='virEventRemoveTimeoutFunc' file='libvirt' module='libvirt'>
      <info><![CDATA[Part of the EventImpl, this user-defined callback removes a timer

If a virEventTimeoutFreeFunc was supplied when the handle was
registered, it will be invoked some time during, or after this
function call, when it is safe to release the user data.]]></info>
      <return type='int' info='0 on success, -1 on failure'/>
      <arg name='timer' type='int' info='the timer to remove'/>
    </functype>
    <function name='virEventRunDefaultImpl' file='libvirt' module='virevent'>
      <info><![CDATA[Run one iteration of the event loop. Applications
will generally want to have a thread which invokes
this method in an infinite loop.  Furthermore, it is wise
to set up a pipe-to-self handler (via virEventAddHandle())
or a timeout (via virEventAddTimeout()) before calling this
function, as it will block forever if there are no
registered events.

  static bool quit = false;

  while (!quit) {
    if (virEventRunDefaultImpl() < 0)
      ...print error...
  }]]></info>
      <return type='int' info='0 on success, -1 on failure.'/>
    </function>
    <functype name='virEventTimeoutCallback' file='libvirt' module='libvirt'>
      <info><![CDATA[callback for receiving timer events]]></info>
      <return type='void'/>
      <arg name='timer' type='int' info='timer id emitting the event'/>
      <arg name='opaque' type='void *' info='user data registered with handle'/>
    </functype>
    <function name='virEventUpdateHandle' file='libvirt' module='virevent'>
      <info><![CDATA[Change event set for a monitored file handle.  This function
requires that an event loop has previously been registered with
virEventRegisterImpl() or virEventRegisterDefaultImpl().

Will not fail if fd exists.]]></info>
      <return type='void'/>
      <arg name='watch' type='int' info='watch whose file handle to update'/>
      <arg name='events' type='int' info='bitset of events to watch from virEventHandleType constants'/>
    </function>
    <functype name='virEventUpdateHandleFunc' file='libvirt' module='libvirt'>
      <info><![CDATA[Part of the EventImpl, this user-provided callback is notified when
events to listen on change]]></info>
      <return type='void'/>
      <arg name='watch' type='int' info='file descriptor watch to modify'/>
      <arg name='event' type='int' info='new events to listen on'/>
    </functype>
    <function name='virEventUpdateTimeout' file='libvirt' module='virevent'>
      <info><![CDATA[Change frequency for a timer.  This function
requires that an event loop has previously been registered with
virEventRegisterImpl() or virEventRegisterDefaultImpl().

Setting frequency to -1 will disable the timer. Setting the frequency
to zero will cause it to fire on every event loop iteration.

Will not fail if timer exists.]]></info>
      <return type='void'/>
      <arg name='timer' type='int' info='timer id to change'/>
      <arg name='timeout' type='int' info='time between events in milliseconds'/>
    </function>
    <functype name='virEventUpdateTimeoutFunc' file='libvirt' module='libvirt'>
      <info><![CDATA[Part of the EventImpl, this user-defined callback updates an
event timeout.]]></info>
      <return type='void'/>
      <arg name='timer' type='int' info='the timer to modify'/>
      <arg name='timeout' type='int' info='the new timeout value'/>
    </functype>
    <functype name='virFreeCallback' file='libvirt' module='libvirt'>
      <info><![CDATA[Type for a callback cleanup function to be paired with a callback.  This
function will be called as a final chance to clean up the @opaque
registered with the primary callback, at the time when the primary
callback is deregistered.

It is forbidden to call any other libvirt APIs from an
implementation of this callback, since it can be invoked
from a context which is not re-entrant safe. Failure to
abide by this requirement may lead to application deadlocks
or crashes.]]></info>
      <return type='void'/>
      <arg name='opaque' type='void *' info='opaque user data provided at registration'/>
    </functype>
    <function name='virFreeError' file='virterror' module='virerror'>
      <info><![CDATA[Resets and frees the given error.]]></info>
      <return type='void'/>
      <arg name='err' type='virErrorPtr' info='error to free'/>
    </function>
    <function name='virGetLastError' file='virterror' module='virerror'>
      <info><![CDATA[Provide a pointer to the last error caught at the library level

The error object is kept in thread local storage, so separate
threads can safely access this concurrently.]]></info>
      <return type='virErrorPtr' info='a pointer to the last error or NULL if none occurred.'/>
    </function>
    <function name='virGetLastErrorMessage' file='virterror' module='virerror'>
      <info><![CDATA[Get the most recent error message]]></info>
      <return type='const char *' info='the most recent error message string in this thread, or a generic message if none is set'/>
    </function>
    <function name='virGetVersion' file='libvirt' module='libvirt'>
      <info><![CDATA[Provides version information. @libVer is the version of the
library and will always be set unless an error occurs, in which case
an error code will be returned. @typeVer exists for historical
compatibility; if it is not NULL it will duplicate @libVer (it was
originally intended to return hypervisor information based on @type,
but due to the design of remote clients this is not reliable). To
get the version of the running hypervisor use the virConnectGetVersion()
function instead. To get the libvirt library version used by a
connection use the virConnectGetLibVersion() instead.

This function includes a call to virInitialize() when necessary.]]></info>
      <return type='int' info='-1 in case of failure, 0 otherwise, and values for @libVer and @typeVer have the format major * 1,000,000 + minor * 1,000 + release.'/>
      <arg name='libVer' type='unsigned long *' info='return value for the library version (OUT)'/>
      <arg name='type' type='const char *' info='ignored; pass NULL'/>
      <arg name='typeVer' type='unsigned long *' info='pass NULL; for historical purposes duplicates @libVer if non-NULL'/>
    </function>
    <function name='virInitialize' file='libvirt' module='libvirt'>
      <info><![CDATA[Initialize the library.

This method is invoked automatically by any of the virConnectOpen() API
calls, and by virGetVersion(). Since release 1.0.0, there is no need to
call this method even in a multithreaded application, since
initialization is performed in a thread safe manner; but applications
using an older version of the library should manually call this before
setting up competing threads that attempt virConnectOpen in parallel.

The only other time it would be necessary to call virInitialize is if the
application did not invoke virConnectOpen as its first API call, such
as when calling virEventRegisterImpl() before setting up connections,
or when using virSetErrorFunc() to alter error reporting of the first
connection attempt.]]></info>
      <return type='int' info='0 in case of success, -1 in case of error'/>
    </function>
    <function name='virInterfaceChangeBegin' file='libvirt' module='libvirt'>
      <info><![CDATA[This function creates a restore point to which one can return
later by calling virInterfaceChangeRollback(). This function should
be called before any transaction with interface configuration.
Once it is known that a new configuration works, it can be committed via
virInterfaceChangeCommit(), which frees the restore point.

If virInterfaceChangeBegin() is called when a transaction is
already opened, this function will fail, and a
VIR_ERR_INVALID_OPERATION will be logged.]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to hypervisor connection'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virInterfaceChangeCommit' file='libvirt' module='libvirt'>
      <info><![CDATA[This commits the changes made to interfaces and frees the restore point
created by virInterfaceChangeBegin().

If virInterfaceChangeCommit() is called when a transaction is not
opened, this function will fail, and a VIR_ERR_INVALID_OPERATION
will be logged.]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to hypervisor connection'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virInterfaceChangeRollback' file='libvirt' module='libvirt'>
      <info><![CDATA[This cancels changes made to interfaces settings by restoring previous
state created by virInterfaceChangeBegin().

If virInterfaceChangeRollback() is called when a transaction is not
opened, this function will fail, and a VIR_ERR_INVALID_OPERATION
will be logged.]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to hypervisor connection'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virInterfaceCreate' file='libvirt' module='libvirt'>
      <info><![CDATA[Activate an interface (i.e. call "ifup").

If there was an open network config transaction at the time this
interface was defined (that is, if virInterfaceChangeBegin() had
been called), the interface will be brought back down (and then
undefined) if virInterfaceChangeRollback() is called.]]></info>
      <return type='int' info='0 in case of success, -1 in case of error'/>
      <arg name='iface' type='virInterfacePtr' info='pointer to a defined interface'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virInterfaceDefineXML' file='libvirt' module='libvirt'>
      <info><![CDATA[Define an interface (or modify existing interface configuration).

Normally this change in the interface configuration is immediately
permanent/persistent, but if virInterfaceChangeBegin() has been
previously called (i.e. if an interface config transaction is
open), the new interface definition will only become permanent if
virInterfaceChangeCommit() is called prior to the next reboot of
the system running libvirtd. Prior to that time, it can be
explicitly removed using virInterfaceChangeRollback(), or will be
automatically removed during the next reboot of the system running
libvirtd.]]></info>
      <return type='virInterfacePtr' info='NULL in case of error, a pointer to the interface otherwise'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='xml' type='const char *' info='the XML description for the interface, preferably in UTF-8'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virInterfaceDestroy' file='libvirt' module='libvirt'>
      <info><![CDATA[deactivate an interface (ie call "ifdown")
This does not remove the interface from the config, and
does not free the associated virInterfacePtr object.

If there is an open network config transaction at the time this
interface is destroyed (that is, if virInterfaceChangeBegin() had
been called), and if the interface is later undefined and then
virInterfaceChangeRollback() is called, the restoral of the
interface definition will also bring the interface back up.]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='iface' type='virInterfacePtr' info='an interface object'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virInterfaceFree' file='libvirt' module='libvirt'>
      <info><![CDATA[Free the interface object. The interface itself is unaltered.
The data structure is freed and should not be used thereafter.]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='iface' type='virInterfacePtr' info='an interface object'/>
    </function>
    <function name='virInterfaceGetConnect' file='libvirt' module='libvirt'>
      <info><![CDATA[Provides the connection pointer associated with an interface.  The
reference counter on the connection is not increased by this
call.

WARNING: When writing libvirt bindings in other languages, do
not use this function.  Instead, store the connection and
the interface object together.]]></info>
      <return type='virConnectPtr' info='the virConnectPtr or NULL in case of failure.'/>
      <arg name='iface' type='virInterfacePtr' info='pointer to an interface'/>
    </function>
    <function name='virInterfaceGetMACString' file='libvirt' module='libvirt'>
      <info><![CDATA[Get the MAC for an interface as string. For more information about
MAC see RFC4122.]]></info>
      <return type='const char *' info='a pointer to the MAC address (in null-terminated ASCII format) or NULL, the string need not be deallocated its lifetime will be the same as the interface object.'/>
      <arg name='iface' type='virInterfacePtr' info='an interface object'/>
    </function>
    <function name='virInterfaceGetName' file='libvirt' module='libvirt'>
      <info><![CDATA[Get the public name for that interface]]></info>
      <return type='const char *' info='a pointer to the name or NULL, the string need not be deallocated its lifetime will be the same as the interface object.'/>
      <arg name='iface' type='virInterfacePtr' info='an interface object'/>
    </function>
    <function name='virInterfaceGetXMLDesc' file='libvirt' module='libvirt'>
      <info><![CDATA[VIR_INTERFACE_XML_INACTIVE - return the static configuration,
                                  suitable for use redefining the
                                  interface via virInterfaceDefineXML()

Provide an XML description of the interface. If
VIR_INTERFACE_XML_INACTIVE is set, the description may be reused
later to redefine the interface with virInterfaceDefineXML(). If it
is not set, the ip address and netmask will be the current live
setting of the interface, not the settings from the config files.]]></info>
      <return type='char *' info='a 0 terminated UTF-8 encoded XML instance, or NULL in case of error. the caller must free() the returned value.'/>
      <arg name='iface' type='virInterfacePtr' info='an interface object'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of extraction flags. Current valid bits:'/>
    </function>
    <function name='virInterfaceIsActive' file='libvirt' module='libvirt'>
      <info><![CDATA[Determine if the interface is currently running]]></info>
      <return type='int' info='1 if running, 0 if inactive, -1 on error'/>
      <arg name='iface' type='virInterfacePtr' info='pointer to the interface object'/>
    </function>
    <function name='virInterfaceLookupByMACString' file='libvirt' module='libvirt'>
      <info><![CDATA[Try to lookup an interface on the given hypervisor based on its MAC.]]></info>
      <return type='virInterfacePtr' info='a new interface object or NULL in case of failure.  If the interface cannot be found, then VIR_ERR_NO_INTERFACE error is raised.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='macstr' type='const char *' info='the MAC for the interface (null-terminated ASCII format)'/>
    </function>
    <function name='virInterfaceLookupByName' file='libvirt' module='libvirt'>
      <info><![CDATA[Try to lookup an interface on the given hypervisor based on its name.]]></info>
      <return type='virInterfacePtr' info='a new interface object or NULL in case of failure.  If the interface cannot be found, then VIR_ERR_NO_INTERFACE error is raised.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='name' type='const char *' info='name for the interface'/>
    </function>
    <function name='virInterfaceRef' file='libvirt' module='libvirt'>
      <info><![CDATA[Increment the reference count on the interface. For each
additional call to this method, there shall be a corresponding
call to virInterfaceFree to release the reference count, once
the caller no longer needs the reference to this object.

This method is typically useful for applications where multiple
threads are using a connection, and it is required that the
connection remain open until all threads have finished using
it. ie, each new thread using an interface would increment
the reference count.]]></info>
      <return type='int' info='0 in case of success, -1 in case of failure.'/>
      <arg name='iface' type='virInterfacePtr' info='the interface to hold a reference on'/>
    </function>
    <function name='virInterfaceUndefine' file='libvirt' module='libvirt'>
      <info><![CDATA[Undefine an interface, ie remove it from the config.
This does not free the associated virInterfacePtr object.

Normally this change in the interface configuration is
permanent/persistent, but if virInterfaceChangeBegin() has been
previously called (i.e. if an interface config transaction is
open), the removal of the interface definition will only become
permanent if virInterfaceChangeCommit() is called prior to the next
reboot of the system running libvirtd. Prior to that time, the
definition can be explicitly restored using
virInterfaceChangeRollback(), or will be automatically restored
during the next reboot of the system running libvirtd.]]></info>
      <return type='int' info='0 in case of success, -1 in case of error'/>
      <arg name='iface' type='virInterfacePtr' info='pointer to a defined interface'/>
    </function>
    <function name='virNWFilterDefineXML' file='libvirt' module='libvirt'>
      <info><![CDATA[Define a new network filter, based on an XML description
similar to the one returned by virNWFilterGetXMLDesc()]]></info>
      <return type='virNWFilterPtr' info='a new nwfilter object or NULL in case of failure'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='xmlDesc' type='const char *' info='an XML description of the nwfilter'/>
    </function>
    <function name='virNWFilterFree' file='libvirt' module='libvirt'>
      <info><![CDATA[Free the nwfilter object. The running instance is kept alive.
The data structure is freed and should not be used thereafter.]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='nwfilter' type='virNWFilterPtr' info='a nwfilter object'/>
    </function>
    <function name='virNWFilterGetName' file='libvirt' module='libvirt'>
      <info><![CDATA[Get the public name for the network filter]]></info>
      <return type='const char *' info='a pointer to the name or NULL, the string need not be deallocated its lifetime will be the same as the nwfilter object.'/>
      <arg name='nwfilter' type='virNWFilterPtr' info='a nwfilter object'/>
    </function>
    <function name='virNWFilterGetUUID' file='libvirt' module='libvirt'>
      <info><![CDATA[Get the UUID for a network filter]]></info>
      <return type='int' info='-1 in case of error, 0 in case of success'/>
      <arg name='nwfilter' type='virNWFilterPtr' info='a nwfilter object'/>
      <arg name='uuid' type='unsigned char *' info='pointer to a VIR_UUID_BUFLEN bytes array'/>
    </function>
    <function name='virNWFilterGetUUIDString' file='libvirt' module='libvirt'>
      <info><![CDATA[Get the UUID for a network filter as string. For more information about
UUID see RFC4122.]]></info>
      <return type='int' info='-1 in case of error, 0 in case of success'/>
      <arg name='nwfilter' type='virNWFilterPtr' info='a nwfilter object'/>
      <arg name='buf' type='char *' info='pointer to a VIR_UUID_STRING_BUFLEN bytes array'/>
    </function>
    <function name='virNWFilterGetXMLDesc' file='libvirt' module='libvirt'>
      <info><![CDATA[Provide an XML description of the network filter. The description may be
reused later to redefine the network filter with virNWFilterCreateXML().]]></info>
      <return type='char *' info='a 0 terminated UTF-8 encoded XML instance, or NULL in case of error. the caller must free() the returned value.'/>
      <arg name='nwfilter' type='virNWFilterPtr' info='a nwfilter object'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virNWFilterLookupByName' file='libvirt' module='libvirt'>
      <info><![CDATA[Try to lookup a network filter on the given hypervisor based on its name.]]></info>
      <return type='virNWFilterPtr' info='a new nwfilter object or NULL in case of failure.  If the network filter cannot be found, then VIR_ERR_NO_NWFILTER error is raised.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='name' type='const char *' info='name for the network filter'/>
    </function>
    <function name='virNWFilterLookupByUUID' file='libvirt' module='libvirt'>
      <info><![CDATA[Try to lookup a network filter on the given hypervisor based on its UUID.]]></info>
      <return type='virNWFilterPtr' info='a new nwfilter object or NULL in case of failure.  If the nwfdilter cannot be found, then VIR_ERR_NO_NWFILTER error is raised.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='uuid' type='const unsigned char *' info='the raw UUID for the network filter'/>
    </function>
    <function name='virNWFilterLookupByUUIDString' file='libvirt' module='libvirt'>
      <info><![CDATA[Try to lookup an nwfilter on the given hypervisor based on its UUID.]]></info>
      <return type='virNWFilterPtr' info='a new nwfilter object or NULL in case of failure.  If the nwfilter cannot be found, then VIR_ERR_NO_NWFILTER error is raised.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='uuidstr' type='const char *' info='the string UUID for the nwfilter'/>
    </function>
    <function name='virNWFilterRef' file='libvirt' module='libvirt'>
      <info><![CDATA[Increment the reference count on the nwfilter. For each
additional call to this method, there shall be a corresponding
call to virNWFilterFree to release the reference count, once
the caller no longer needs the reference to this object.

This method is typically useful for applications where multiple
threads are using a connection, and it is required that the
connection remain open until all threads have finished using
it. ie, each new thread using an nwfilter would increment
the reference count.]]></info>
      <return type='int' info='0 in case of success, -1 in case of failure.'/>
      <arg name='nwfilter' type='virNWFilterPtr' info='the nwfilter to hold a reference on'/>
    </function>
    <function name='virNWFilterUndefine' file='libvirt' module='libvirt'>
      <info><![CDATA[Undefine the nwfilter object. This call will not succeed if
a running VM is referencing the filter. This does not free the
associated virNWFilterPtr object.]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='nwfilter' type='virNWFilterPtr' info='a nwfilter object'/>
    </function>
    <function name='virNetworkCreate' file='libvirt' module='libvirt'>
      <info><![CDATA[Create and start a defined network. If the call succeed the network
moves from the defined to the running networks pools.]]></info>
      <return type='int' info='0 in case of success, -1 in case of error'/>
      <arg name='network' type='virNetworkPtr' info='pointer to a defined network'/>
    </function>
    <function name='virNetworkCreateXML' file='libvirt' module='libvirt'>
      <info><![CDATA[Create and start a new virtual network, based on an XML description
similar to the one returned by virNetworkGetXMLDesc()]]></info>
      <return type='virNetworkPtr' info='a new network object or NULL in case of failure'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='xmlDesc' type='const char *' info='an XML description of the network'/>
    </function>
    <function name='virNetworkDefineXML' file='libvirt' module='libvirt'>
      <info><![CDATA[Define a network, but does not create it]]></info>
      <return type='virNetworkPtr' info='NULL in case of error, a pointer to the network otherwise'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='xml' type='const char *' info='the XML description for the network, preferably in UTF-8'/>
    </function>
    <function name='virNetworkDestroy' file='libvirt' module='libvirt'>
      <info><![CDATA[Destroy the network object. The running instance is shutdown if not down
already and all resources used by it are given back to the hypervisor. This
does not free the associated virNetworkPtr object.
This function may require privileged access]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='network' type='virNetworkPtr' info='a network object'/>
    </function>
    <function name='virNetworkFree' file='libvirt' module='libvirt'>
      <info><![CDATA[Free the network object. The running instance is kept alive.
The data structure is freed and should not be used thereafter.]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='network' type='virNetworkPtr' info='a network object'/>
    </function>
    <function name='virNetworkGetAutostart' file='libvirt' module='libvirt'>
      <info><![CDATA[Provides a boolean value indicating whether the network
configured to be automatically started when the host
machine boots.]]></info>
      <return type='int' info='-1 in case of error, 0 in case of success'/>
      <arg name='network' type='virNetworkPtr' info='a network object'/>
      <arg name='autostart' type='int *' info='the value returned'/>
    </function>
    <function name='virNetworkGetBridgeName' file='libvirt' module='libvirt'>
      <info><![CDATA[Provides a bridge interface name to which a domain may connect
a network interface in order to join the network.]]></info>
      <return type='char *' info='a 0 terminated interface name, or NULL in case of error. the caller must free() the returned value.'/>
      <arg name='network' type='virNetworkPtr' info='a network object'/>
    </function>
    <function name='virNetworkGetConnect' file='libvirt' module='libvirt'>
      <info><![CDATA[Provides the connection pointer associated with a network.  The
reference counter on the connection is not increased by this
call.

WARNING: When writing libvirt bindings in other languages, do
not use this function.  Instead, store the connection and
the network object together.]]></info>
      <return type='virConnectPtr' info='the virConnectPtr or NULL in case of failure.'/>
      <arg name='net' type='virNetworkPtr' info='pointer to a network'/>
    </function>
    <function name='virNetworkGetName' file='libvirt' module='libvirt'>
      <info><![CDATA[Get the public name for that network]]></info>
      <return type='const char *' info='a pointer to the name or NULL, the string need not be deallocated its lifetime will be the same as the network object.'/>
      <arg name='network' type='virNetworkPtr' info='a network object'/>
    </function>
    <function name='virNetworkGetUUID' file='libvirt' module='libvirt'>
      <info><![CDATA[Get the UUID for a network]]></info>
      <return type='int' info='-1 in case of error, 0 in case of success'/>
      <arg name='network' type='virNetworkPtr' info='a network object'/>
      <arg name='uuid' type='unsigned char *' info='pointer to a VIR_UUID_BUFLEN bytes array'/>
    </function>
    <function name='virNetworkGetUUIDString' file='libvirt' module='libvirt'>
      <info><![CDATA[Get the UUID for a network as string. For more information about
UUID see RFC4122.]]></info>
      <return type='int' info='-1 in case of error, 0 in case of success'/>
      <arg name='network' type='virNetworkPtr' info='a network object'/>
      <arg name='buf' type='char *' info='pointer to a VIR_UUID_STRING_BUFLEN bytes array'/>
    </function>
    <function name='virNetworkGetXMLDesc' file='libvirt' module='libvirt'>
      <info><![CDATA[Provide an XML description of the network. The description may be reused
later to relaunch the network with virNetworkCreateXML().

Normally, if a network included a physical function, the output includes
all virtual functions tied to that physical interface.  If @flags includes
VIR_NETWORK_XML_INACTIVE, then the expansion of virtual interfaces is
not performed.]]></info>
      <return type='char *' info='a 0 terminated UTF-8 encoded XML instance, or NULL in case of error. the caller must free() the returned value.'/>
      <arg name='network' type='virNetworkPtr' info='a network object'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virNetworkXMLFlags'/>
    </function>
    <function name='virNetworkIsActive' file='libvirt' module='libvirt'>
      <info><![CDATA[Determine if the network is currently running]]></info>
      <return type='int' info='1 if running, 0 if inactive, -1 on error'/>
      <arg name='net' type='virNetworkPtr' info='pointer to the network object'/>
    </function>
    <function name='virNetworkIsPersistent' file='libvirt' module='libvirt'>
      <info><![CDATA[Determine if the network has a persistent configuration
which means it will still exist after shutting down]]></info>
      <return type='int' info='1 if persistent, 0 if transient, -1 on error'/>
      <arg name='net' type='virNetworkPtr' info='pointer to the network object'/>
    </function>
    <function name='virNetworkLookupByName' file='libvirt' module='libvirt'>
      <info><![CDATA[Try to lookup a network on the given hypervisor based on its name.]]></info>
      <return type='virNetworkPtr' info='a new network object or NULL in case of failure.  If the network cannot be found, then VIR_ERR_NO_NETWORK error is raised.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='name' type='const char *' info='name for the network'/>
    </function>
    <function name='virNetworkLookupByUUID' file='libvirt' module='libvirt'>
      <info><![CDATA[Try to lookup a network on the given hypervisor based on its UUID.]]></info>
      <return type='virNetworkPtr' info='a new network object or NULL in case of failure.  If the network cannot be found, then VIR_ERR_NO_NETWORK error is raised.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='uuid' type='const unsigned char *' info='the raw UUID for the network'/>
    </function>
    <function name='virNetworkLookupByUUIDString' file='libvirt' module='libvirt'>
      <info><![CDATA[Try to lookup a network on the given hypervisor based on its UUID.]]></info>
      <return type='virNetworkPtr' info='a new network object or NULL in case of failure.  If the network cannot be found, then VIR_ERR_NO_NETWORK error is raised.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='uuidstr' type='const char *' info='the string UUID for the network'/>
    </function>
    <function name='virNetworkRef' file='libvirt' module='libvirt'>
      <info><![CDATA[Increment the reference count on the network. For each
additional call to this method, there shall be a corresponding
call to virNetworkFree to release the reference count, once
the caller no longer needs the reference to this object.

This method is typically useful for applications where multiple
threads are using a connection, and it is required that the
connection remain open until all threads have finished using
it. ie, each new thread using a network would increment
the reference count.]]></info>
      <return type='int' info='0 in case of success, -1 in case of failure.'/>
      <arg name='network' type='virNetworkPtr' info='the network to hold a reference on'/>
    </function>
    <function name='virNetworkSetAutostart' file='libvirt' module='libvirt'>
      <info><![CDATA[Configure the network to be automatically started
when the host machine boots.]]></info>
      <return type='int' info='-1 in case of error, 0 in case of success'/>
      <arg name='network' type='virNetworkPtr' info='a network object'/>
      <arg name='autostart' type='int' info='whether the network should be automatically started 0 or 1'/>
    </function>
    <function name='virNetworkUndefine' file='libvirt' module='libvirt'>
      <info><![CDATA[Undefine a network but does not stop it if it is running]]></info>
      <return type='int' info='0 in case of success, -1 in case of error'/>
      <arg name='network' type='virNetworkPtr' info='pointer to a defined network'/>
    </function>
    <function name='virNetworkUpdate' file='libvirt' module='libvirt'>
      <info><![CDATA[Update the definition of an existing network, either its live
running state, its persistent configuration, or both.]]></info>
      <return type='int' info='0 in case of success, -1 in case of error virNetworkUpdateCommand virNetworkUpdateSection'/>
      <arg name='network' type='virNetworkPtr' info='pointer to a defined network'/>
      <arg name='command' type='unsigned int' info='what action to perform (add/delete/modify) (see virNetworkUpdateCommand for descriptions)'/>
      <arg name='section' type='unsigned int' info='which section of the network to update (see virNetworkUpdateSection for descriptions)'/>
      <arg name='parentIndex' type='int' info='which parent element, if there are multiple parents of the same type (e.g. which &lt;ip&gt; element when modifying a &lt;dhcp&gt;/&lt;host&gt; element), or &quot;-1&quot; for &quot;don&apos;t care&quot; or &quot;automatically find appropriate one&quot;.'/>
      <arg name='xml' type='const char *' info='the XML description for the network, preferably in UTF-8'/>
      <arg name='flags' type='unsigned int' info='bitwise OR of virNetworkUpdateFlags.'/>
    </function>
    <function name='virNodeDeviceCreateXML' file='libvirt' module='libvirt'>
      <info><![CDATA[Create a new device on the VM host machine, for example, virtual
HBAs created using vport_create.]]></info>
      <return type='virNodeDevicePtr' info='a node device object if successful, NULL in case of failure'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='xmlDesc' type='const char *' info='string containing an XML description of the device to be created'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virNodeDeviceDestroy' file='libvirt' module='libvirt'>
      <info><![CDATA[Destroy the device object. The virtual device (only works for vHBA
currently) is removed from the host operating system.  This function
may require privileged access.]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='dev' type='virNodeDevicePtr' info='a device object'/>
    </function>
    <function name='virNodeDeviceDetachFlags' file='libvirt' module='libvirt'>
      <info><![CDATA[Detach the node device from the node itself so that it may be
assigned to a guest domain.

Depending on the hypervisor, this may involve operations such as
unbinding any device drivers from the device, binding the device to
a dummy device driver and resetting the device. Different backend
drivers expect the device to be bound to different dummy
devices. For example, QEMU's "kvm" backend driver (the default)
expects the device to be bound to "pci-stub", but its "vfio"
backend driver expects the device to be bound to "vfio-pci".

If the device is currently in use by the node, this method may
fail.

Once the device is not assigned to any guest, it may be re-attached
to the node using the virNodeDeviceReAttach() method.]]></info>
      <return type='int' info='0 in case of success, -1 in case of failure.'/>
      <arg name='dev' type='virNodeDevicePtr' info='pointer to the node device'/>
      <arg name='driverName' type='const char *' info='name of backend driver that will be used for later device assignment to a domain. NULL means &quot;use the hypervisor default driver&quot;'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virNodeDeviceDettach' file='libvirt' module='libvirt'>
      <info><![CDATA[Dettach the node device from the node itself so that it may be
assigned to a guest domain.

Depending on the hypervisor, this may involve operations such
as unbinding any device drivers from the device, binding the
device to a dummy device driver and resetting the device.

If the device is currently in use by the node, this method may
fail.

Once the device is not assigned to any guest, it may be re-attached
to the node using the virNodeDeviceReattach() method.

If the caller needs control over which backend driver will be used
during PCI device assignment (to use something other than the
default, for example VFIO), the newer virNodeDeviceDetachFlags()
API should be used instead.]]></info>
      <return type='int' info='0 in case of success, -1 in case of failure.'/>
      <arg name='dev' type='virNodeDevicePtr' info='pointer to the node device'/>
    </function>
    <function name='virNodeDeviceFree' file='libvirt' module='libvirt'>
      <info><![CDATA[Drops a reference to the node device, freeing it if
this was the last reference.]]></info>
      <return type='int' info='the 0 for success, -1 for error.'/>
      <arg name='dev' type='virNodeDevicePtr' info='pointer to the node device'/>
    </function>
    <function name='virNodeDeviceGetName' file='libvirt' module='libvirt'>
      <info><![CDATA[Just return the device name]]></info>
      <return type='const char *' info='the device name or NULL in case of error'/>
      <arg name='dev' type='virNodeDevicePtr' info='the device'/>
    </function>
    <function name='virNodeDeviceGetParent' file='libvirt' module='libvirt'>
      <info><![CDATA[Accessor for the parent of the device]]></info>
      <return type='const char *' info='the name of the device&apos;s parent, or NULL if an error occurred or when the device has no parent.'/>
      <arg name='dev' type='virNodeDevicePtr' info='the device'/>
    </function>
    <function name='virNodeDeviceGetXMLDesc' file='libvirt' module='libvirt'>
      <info><![CDATA[Fetch an XML document describing all aspects of
the device.]]></info>
      <return type='char *' info='the XML document, or NULL on error'/>
      <arg name='dev' type='virNodeDevicePtr' info='pointer to the node device'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virNodeDeviceListCaps' file='libvirt' module='libvirt'>
      <info><![CDATA[Lists the names of the capabilities supported by the device.]]></info>
      <return type='int' info='the number of capability names listed in @names or -1 in case of error.'/>
      <arg name='dev' type='virNodeDevicePtr' info='the device'/>
      <arg name='names' type='char ** const' info='array to collect the list of capability names'/>
      <arg name='maxnames' type='int' info='size of @names'/>
    </function>
    <function name='virNodeDeviceLookupByName' file='libvirt' module='libvirt'>
      <info><![CDATA[Lookup a node device by its name.]]></info>
      <return type='virNodeDevicePtr' info='a virNodeDevicePtr if found, NULL otherwise.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='name' type='const char *' info='unique device name'/>
    </function>
    <function name='virNodeDeviceLookupSCSIHostByWWN' file='libvirt' module='libvirt'>
      <info><![CDATA[Lookup SCSI Host which is capable with 'fc_host' by its WWNN and WWPN.]]></info>
      <return type='virNodeDevicePtr' info='a virNodeDevicePtr if found, NULL otherwise.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='wwnn' type='const char *' info='WWNN of the SCSI Host.'/>
      <arg name='wwpn' type='const char *' info='WWPN of the SCSI Host.'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virNodeDeviceNumOfCaps' file='libvirt' module='libvirt'>
      <info><![CDATA[Accessor for the number of capabilities supported by the device.]]></info>
      <return type='int' info='the number of capabilities supported by the device or -1 in case of error.'/>
      <arg name='dev' type='virNodeDevicePtr' info='the device'/>
    </function>
    <function name='virNodeDeviceReAttach' file='libvirt' module='libvirt'>
      <info><![CDATA[Re-attach a previously dettached node device to the node so that it
may be used by the node again.

Depending on the hypervisor, this may involve operations such
as resetting the device, unbinding it from a dummy device driver
and binding it to its appropriate driver.

If the device is currently in use by a guest, this method may fail.]]></info>
      <return type='int' info='0 in case of success, -1 in case of failure.'/>
      <arg name='dev' type='virNodeDevicePtr' info='pointer to the node device'/>
    </function>
    <function name='virNodeDeviceRef' file='libvirt' module='libvirt'>
      <info><![CDATA[Increment the reference count on the dev. For each
additional call to this method, there shall be a corresponding
call to virNodeDeviceFree to release the reference count, once
the caller no longer needs the reference to this object.

This method is typically useful for applications where multiple
threads are using a connection, and it is required that the
connection remain open until all threads have finished using
it. ie, each new thread using a dev would increment
the reference count.]]></info>
      <return type='int' info='0 in case of success, -1 in case of failure.'/>
      <arg name='dev' type='virNodeDevicePtr' info='the dev to hold a reference on'/>
    </function>
    <function name='virNodeDeviceReset' file='libvirt' module='libvirt'>
      <info><![CDATA[Reset a previously dettached node device to the node before or
after assigning it to a guest.

The exact reset semantics depends on the hypervisor and device
type but, for example, KVM will attempt to reset PCI devices with
a Function Level Reset, Secondary Bus Reset or a Power Management
D-State reset.

If the reset will affect other devices which are currently in use,
this function may fail.]]></info>
      <return type='int' info='0 in case of success, -1 in case of failure.'/>
      <arg name='dev' type='virNodeDevicePtr' info='pointer to the node device'/>
    </function>
    <function name='virNodeGetCPUMap' file='libvirt' module='libvirt'>
      <info><![CDATA[Get CPU map of host node CPUs.]]></info>
      <return type='int' info='number of CPUs present on the host node, or -1 if there was an error.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='cpumap' type='unsigned char **' info='optional pointer to a bit map of real CPUs on the host node (in 8-bit bytes) (OUT) In case of success each bit set to 1 means that corresponding CPU is online. Bytes are stored in little-endian order: CPU0-7, 8-15... In each byte, lowest CPU number is least significant bit. The bit map is allocated by virNodeGetCPUMap and needs to be released using free() by the caller.'/>
      <arg name='online' type='unsigned int *' info='optional number of online CPUs in cpumap (OUT) Contains the number of online CPUs if the call was successful.'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virNodeGetCPUStats' file='libvirt' module='libvirt'>
      <info><![CDATA[This function provides individual cpu statistics of the node.
If you want to get total cpu statistics of the node, you must specify
VIR_NODE_CPU_STATS_ALL_CPUS to @cpuNum.
The @params array will be filled with the values equal to the number of
parameters suggested by @nparams

As the value of @nparams is dynamic, call the API setting @nparams to 0 and
@params as NULL, the API returns the number of parameters supported by the
HV by updating @nparams on SUCCESS. The caller should then allocate @params
array, i.e. (sizeof(@virNodeCPUStats) * @nparams) bytes and call
the API again.

Here is a sample code snippet:

  if (virNodeGetCPUStats(conn, cpuNum, NULL, &nparams, 0) == 0 &&
      nparams != 0) {
      if ((params = malloc(sizeof(virNodeCPUStats) * nparams)) == NULL)
          goto error;
      memset(params, 0, sizeof(virNodeCPUStats) * nparams);
      if (virNodeGetCPUStats(conn, cpuNum, params, &nparams, 0))
          goto error;
  }

This function doesn't require privileged access to the hypervisor.
This function expects the caller to allocate the @params.

CPU time Statistics:

VIR_NODE_CPU_STATS_KERNEL:
    The cumulative CPU time which spends by kernel,
    when the node booting up.(nanoseconds)
VIR_NODE_CPU_STATS_USER:
    The cumulative CPU time which spends by user processes,
    when the node booting up.(nanoseconds)
VIR_NODE_CPU_STATS_IDLE:
    The cumulative idle CPU time, when the node booting up.(nanoseconds)
VIR_NODE_CPU_STATS_IOWAIT:
    The cumulative I/O wait CPU time, when the node booting up.(nanoseconds)
VIR_NODE_CPU_STATS_UTILIZATION:
    The CPU utilization. The usage value is in percent and 100%
    represents all CPUs on the server.]]></info>
      <return type='int' info='-1 in case of error, 0 in case of success.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection.'/>
      <arg name='cpuNum' type='int' info='number of node cpu. (VIR_NODE_CPU_STATS_ALL_CPUS means total cpu statistics)'/>
      <arg name='params' type='virNodeCPUStatsPtr' info='pointer to node cpu time parameter objects'/>
      <arg name='nparams' type='int *' info='number of node cpu time parameter (this value should be same or less than the number of parameters supported)'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virNodeGetCellsFreeMemory' file='libvirt' module='libvirt'>
      <info><![CDATA[This call returns the amount of free memory in one or more NUMA cells.
The @freeMems array must be allocated by the caller and will be filled
with the amount of free memory in bytes for each cell requested,
starting with startCell (in freeMems[0]), up to either
(startCell + maxCells), or the number of additional cells in the node,
whichever is smaller.]]></info>
      <return type='int' info='the number of entries filled in freeMems, or -1 in case of error.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='freeMems' type='unsigned long long *' info='pointer to the array of unsigned long long'/>
      <arg name='startCell' type='int' info='index of first cell to return freeMems info on.'/>
      <arg name='maxCells' type='int' info='Maximum number of cells for which freeMems information can be returned.'/>
    </function>
    <function name='virNodeGetFreeMemory' file='libvirt' module='libvirt'>
      <info><![CDATA[provides the free memory available on the Node
Note: most libvirt APIs provide memory sizes in kibibytes, but in this
function the returned value is in bytes. Divide by 1024 as necessary.]]></info>
      <return type='unsigned long long' info='the available free memory in bytes or 0 in case of error'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
    </function>
    <function name='virNodeGetInfo' file='libvirt' module='libvirt'>
      <info><![CDATA[Extract hardware information about the node.]]></info>
      <return type='int' info='0 in case of success and -1 in case of failure.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='info' type='virNodeInfoPtr' info='pointer to a virNodeInfo structure allocated by the user'/>
    </function>
    <function name='virNodeGetMemoryParameters' file='libvirt' module='libvirt'>
      <info><![CDATA[Get all node memory parameters (parameters unsupported by OS will be
omitted).  On input, @nparams gives the size of the @params array;
on output, @nparams gives how many slots were filled with parameter
information, which might be less but will not exceed the input value.

As a special case, calling with @params as NULL and @nparams as 0 on
input will cause @nparams on output to contain the number of parameters
supported by the hypervisor. The caller should then allocate @params
array, i.e. (sizeof(@virTypedParameter) * @nparams) bytes and call the API
again.  See virDomainGetMemoryParameters() for an equivalent usage
example.]]></info>
      <return type='int' info='0 in case of success, and -1 in case of failure.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='params' type='virTypedParameterPtr' info='pointer to memory parameter object (return value, allocated by the caller)'/>
      <arg name='nparams' type='int *' info='pointer to number of memory parameters; input and output'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virNodeGetMemoryStats' file='libvirt' module='libvirt'>
      <info><![CDATA[This function provides memory stats of the node.
If you want to get total memory statistics of the node, you must specify
VIR_NODE_MEMORY_STATS_ALL_CELLS to @cellNum.
The @params array will be filled with the values equal to the number of
stats suggested by @nparams

As the value of @nparams is dynamic, call the API setting @nparams to 0 and
@params as NULL, the API returns the number of parameters supported by the
HV by updating @nparams on SUCCESS. The caller should then allocate @params
array, i.e. (sizeof(@virNodeMemoryStats) * @nparams) bytes and call
the API again.

Here is the sample code snippet:

  if (virNodeGetMemoryStats(conn, cellNum, NULL, &nparams, 0) == 0 &&
      nparams != 0) {
      if ((params = malloc(sizeof(virNodeMemoryStats) * nparams)) == NULL)
          goto error;
      memset(params, cellNum, 0, sizeof(virNodeMemoryStats) * nparams);
      if (virNodeGetMemoryStats(conn, params, &nparams, 0))
          goto error;
  }

This function doesn't require privileged access to the hypervisor.
This function expects the caller to allocate the @params.

Memory Stats:

VIR_NODE_MEMORY_STATS_TOTAL:
    The total memory usage.(KB)
VIR_NODE_MEMORY_STATS_FREE:
    The free memory usage.(KB)
    On linux, this usage includes buffers and cached.
VIR_NODE_MEMORY_STATS_BUFFERS:
    The buffers memory usage.(KB)
VIR_NODE_MEMORY_STATS_CACHED:
    The cached memory usage.(KB)]]></info>
      <return type='int' info='-1 in case of error, 0 in case of success.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection.'/>
      <arg name='cellNum' type='int' info='number of node cell. (VIR_NODE_MEMORY_STATS_ALL_CELLS means total cell statistics)'/>
      <arg name='params' type='virNodeMemoryStatsPtr' info='pointer to node memory stats objects'/>
      <arg name='nparams' type='int *' info='number of node memory stats (this value should be same or less than the number of stats supported)'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virNodeGetSecurityModel' file='libvirt' module='libvirt'>
      <info><![CDATA[Extract the security model of a hypervisor. The 'model' field
in the @secmodel argument may be initialized to the empty
string if the driver has not activated a security model.]]></info>
      <return type='int' info='0 in case of success, -1 in case of failure'/>
      <arg name='conn' type='virConnectPtr' info='a connection object'/>
      <arg name='secmodel' type='virSecurityModelPtr' info='pointer to a virSecurityModel structure'/>
    </function>
    <function name='virNodeListDevices' file='libvirt' module='libvirt'>
      <info><![CDATA[Collect the list of node devices, and store their names in @names

For more control over the results, see virConnectListAllNodeDevices().

If the optional 'cap'  argument is non-NULL, then the count
will be restricted to devices with the specified capability]]></info>
      <return type='int' info='the number of node devices found or -1 in case of error'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='cap' type='const char *' info='capability name'/>
      <arg name='names' type='char ** const' info='array to collect the list of node device names'/>
      <arg name='maxnames' type='int' info='size of @names'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virNodeNumOfDevices' file='libvirt' module='libvirt'>
      <info><![CDATA[Provides the number of node devices.

If the optional 'cap'  argument is non-NULL, then the count
will be restricted to devices with the specified capability]]></info>
      <return type='int' info='the number of node devices or -1 in case of error'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='cap' type='const char *' info='capability name'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virNodeSetMemoryParameters' file='libvirt' module='libvirt'>
      <info><![CDATA[Change all or a subset of the node memory tunables. The function
fails if not all of the tunables are supported.

Note that it's not recommended to use this function while the
outside tuning program is running (such as ksmtuned under Linux),
as they could change the tunables in parallel, which could cause
conflicts.

This function may require privileged access to the hypervisor.]]></info>
      <return type='int' info='0 in case of success, -1 in case of failure.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='params' type='virTypedParameterPtr' info='pointer to scheduler parameter objects'/>
      <arg name='nparams' type='int' info='number of scheduler parameter objects (this value can be the same or less than the returned value nparams of virDomainGetSchedulerType)'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virNodeSuspendForDuration' file='libvirt' module='libvirt'>
      <info><![CDATA[Attempt to suspend the node (host machine) for the given duration of
time in the specified state (Suspend-to-RAM, Suspend-to-Disk or
Hybrid-Suspend). Schedule the node's Real-Time-Clock interrupt to
resume the node after the duration is complete.]]></info>
      <return type='int' info='0 on success (i.e., the node will be suspended after a short delay), -1 on failure (the operation is not supported, or an attempted suspend is already underway).'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='target' type='unsigned int' info='the state to which the host must be suspended to, such as: VIR_NODE_SUSPEND_TARGET_MEM (Suspend-to-RAM) VIR_NODE_SUSPEND_TARGET_DISK (Suspend-to-Disk) VIR_NODE_SUSPEND_TARGET_HYBRID (Hybrid-Suspend, which is a combination of the former modes).'/>
      <arg name='duration' type='unsigned long long' info='the time duration in seconds for which the host has to be suspended'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virResetError' file='virterror' module='virerror'>
      <info><![CDATA[Reset the error being pointed to]]></info>
      <return type='void'/>
      <arg name='err' type='virErrorPtr' info='pointer to the virError to clean up'/>
    </function>
    <function name='virResetLastError' file='virterror' module='virerror'>
      <info><![CDATA[Reset the last error caught at the library level.

The error object is kept in thread local storage, so separate
threads can safely access this concurrently, only resetting
their own error object.]]></info>
      <return type='void'/>
    </function>
    <function name='virSaveLastError' file='virterror' module='virerror'>
      <info><![CDATA[Save the last error into a new error object.  On success, errno is
unchanged; on failure, errno is ENOMEM.]]></info>
      <return type='virErrorPtr' info='a pointer to the copied error or NULL if allocation failed. It is the caller&apos;s responsibility to free the error with virFreeError().'/>
    </function>
    <function name='virSecretDefineXML' file='libvirt' module='libvirt'>
      <info><![CDATA[If XML specifies a UUID, locates the specified secret and replaces all
attributes of the secret specified by UUID by attributes specified in xml
(any attributes not specified in xml are discarded).

Otherwise, creates a new secret with an automatically chosen UUID, and
initializes its attributes from xml.]]></info>
      <return type='virSecretPtr' info='a secret on success, NULL on failure.'/>
      <arg name='conn' type='virConnectPtr' info='virConnect connection'/>
      <arg name='xml' type='const char *' info='XML describing the secret.'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virSecretFree' file='libvirt' module='libvirt'>
      <info><![CDATA[Release the secret handle. The underlying secret continues to exist.]]></info>
      <return type='int' info='0 on success, or -1 on error'/>
      <arg name='secret' type='virSecretPtr' info='pointer to a secret'/>
    </function>
    <function name='virSecretGetConnect' file='libvirt' module='libvirt'>
      <info><![CDATA[Provides the connection pointer associated with a secret.  The reference
counter on the connection is not increased by this call.

WARNING: When writing libvirt bindings in other languages, do not use this
function.  Instead, store the connection and the secret object together.]]></info>
      <return type='virConnectPtr' info='the virConnectPtr or NULL in case of failure.'/>
      <arg name='secret' type='virSecretPtr' info='A virSecret secret'/>
    </function>
    <function name='virSecretGetUUID' file='libvirt' module='libvirt'>
      <info><![CDATA[Fetches the UUID of the secret.]]></info>
      <return type='int' info='0 on success with the uuid buffer being filled, or -1 upon failure.'/>
      <arg name='secret' type='virSecretPtr' info='A virSecret secret'/>
      <arg name='uuid' type='unsigned char *' info='buffer of VIR_UUID_BUFLEN bytes in size'/>
    </function>
    <function name='virSecretGetUUIDString' file='libvirt' module='libvirt'>
      <info><![CDATA[Get the UUID for a secret as string. For more information about
UUID see RFC4122.]]></info>
      <return type='int' info='-1 in case of error, 0 in case of success'/>
      <arg name='secret' type='virSecretPtr' info='a secret object'/>
      <arg name='buf' type='char *' info='pointer to a VIR_UUID_STRING_BUFLEN bytes array'/>
    </function>
    <function name='virSecretGetUsageID' file='libvirt' module='libvirt'>
      <info><![CDATA[Get the unique identifier of the object with which this
secret is to be used. The format of the identifier is
dependant on the usage type of the secret. For a secret
with a usage type of VIR_SECRET_USAGE_TYPE_VOLUME the
identifier will be a fully qualfied path name. The
identifiers are intended to be unique within the set of
all secrets sharing the same usage type. ie, there shall
only ever be one secret for each volume path.]]></info>
      <return type='const char *' info='a string identifying the object using the secret, or NULL upon error'/>
      <arg name='secret' type='virSecretPtr' info='a secret object'/>
    </function>
    <function name='virSecretGetUsageType' file='libvirt' module='libvirt'>
      <info><![CDATA[Get the type of object which uses this secret. The returned
value is one of the constants defined in the virSecretUsageType
enumeration. More values may be added to this enumeration in
the future, so callers should expect to see usage types they
do not explicitly know about.]]></info>
      <return type='int' info='a positive integer identifying the type of object, or -1 upon error.'/>
      <arg name='secret' type='virSecretPtr' info='a secret object'/>
    </function>
    <function name='virSecretGetValue' file='libvirt' module='libvirt'>
      <info><![CDATA[Fetches the value of a secret.]]></info>
      <return type='unsigned char *' info='the secret value on success, NULL on failure.  The caller must free() the secret value.'/>
      <arg name='secret' type='virSecretPtr' info='A virSecret connection'/>
      <arg name='value_size' type='size_t *' info='Place for storing size of the secret value'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virSecretGetXMLDesc' file='libvirt' module='libvirt'>
      <info><![CDATA[Fetches an XML document describing attributes of the secret.]]></info>
      <return type='char *' info='the XML document on success, NULL on failure.  The caller must free() the XML.'/>
      <arg name='secret' type='virSecretPtr' info='A virSecret secret'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virSecretLookupByUUID' file='libvirt' module='libvirt'>
      <info><![CDATA[Try to lookup a secret on the given hypervisor based on its UUID.
Uses the 16 bytes of raw data to describe the UUID]]></info>
      <return type='virSecretPtr' info='a new secret object or NULL in case of failure.  If the secret cannot be found, then VIR_ERR_NO_SECRET error is raised.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='uuid' type='const unsigned char *' info='the raw UUID for the secret'/>
    </function>
    <function name='virSecretLookupByUUIDString' file='libvirt' module='libvirt'>
      <info><![CDATA[Try to lookup a secret on the given hypervisor based on its UUID.
Uses the printable string value to describe the UUID]]></info>
      <return type='virSecretPtr' info='a new secret object or NULL in case of failure.  If the secret cannot be found, then VIR_ERR_NO_SECRET error is raised.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='uuidstr' type='const char *' info='the string UUID for the secret'/>
    </function>
    <function name='virSecretLookupByUsage' file='libvirt' module='libvirt'>
      <info><![CDATA[Try to lookup a secret on the given hypervisor based on its usage
The usageID is unique within the set of secrets sharing the
same usageType value.]]></info>
      <return type='virSecretPtr' info='a new secret object or NULL in case of failure.  If the secret cannot be found, then VIR_ERR_NO_SECRET error is raised.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='usageType' type='int' info='the type of secret usage'/>
      <arg name='usageID' type='const char *' info='identifier of the object using the secret'/>
    </function>
    <function name='virSecretRef' file='libvirt' module='libvirt'>
      <info><![CDATA[Increment the reference count on the secret. For each additional call to
this method, there shall be a corresponding call to virSecretFree to release
the reference count, once the caller no longer needs the reference to this
object.

This method is typically useful for applications where multiple threads are
using a connection, and it is required that the connection remain open until
all threads have finished using it. ie, each new thread using a secret would
increment the reference count.]]></info>
      <return type='int' info='0 in case of success, -1 in case of failure.'/>
      <arg name='secret' type='virSecretPtr' info='the secret to hold a reference on'/>
    </function>
    <function name='virSecretSetValue' file='libvirt' module='libvirt'>
      <info><![CDATA[Sets the value of a secret.]]></info>
      <return type='int' info='0 on success, -1 on failure.'/>
      <arg name='secret' type='virSecretPtr' info='A virSecret secret'/>
      <arg name='value' type='const unsigned char *' info='Value of the secret'/>
      <arg name='value_size' type='size_t' info='Size of the value'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virSecretUndefine' file='libvirt' module='libvirt'>
      <info><![CDATA[Deletes the specified secret.  This does not free the associated
virSecretPtr object.]]></info>
      <return type='int' info='0 on success, -1 on failure.'/>
      <arg name='secret' type='virSecretPtr' info='A virSecret secret'/>
    </function>
    <function name='virSetErrorFunc' file='virterror' module='virerror'>
      <info><![CDATA[Set a library global error handling function, if @handler is NULL,
it will reset to default printing on stderr. The error raised there
are those for which no handler at the connection level could caught.]]></info>
      <return type='void'/>
      <arg name='userData' type='void *' info='pointer to the user data provided in the handler callback'/>
      <arg name='handler' type='virErrorFunc' info='the function to get called in case of error or NULL'/>
    </function>
    <function name='virStoragePoolBuild' file='libvirt' module='libvirt'>
      <info><![CDATA[Currently only filesystem pool accepts flags VIR_STORAGE_POOL_BUILD_OVERWRITE
and VIR_STORAGE_POOL_BUILD_NO_OVERWRITE.

Build the underlying storage pool]]></info>
      <return type='int' info='0 on success, or -1 upon failure'/>
      <arg name='pool' type='virStoragePoolPtr' info='pointer to storage pool'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virStoragePoolBuildFlags'/>
    </function>
    <function name='virStoragePoolCreate' file='libvirt' module='libvirt'>
      <info><![CDATA[Starts an inactive storage pool]]></info>
      <return type='int' info='0 on success, or -1 if it could not be started'/>
      <arg name='pool' type='virStoragePoolPtr' info='pointer to storage pool'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virStoragePoolCreateXML' file='libvirt' module='libvirt'>
      <info><![CDATA[Create a new storage based on its XML description. The
pool is not persistent, so its definition will disappear
when it is destroyed, or if the host is restarted]]></info>
      <return type='virStoragePoolPtr' info='a virStoragePoolPtr object, or NULL if creation failed'/>
      <arg name='conn' type='virConnectPtr' info='pointer to hypervisor connection'/>
      <arg name='xmlDesc' type='const char *' info='XML description for new pool'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virStoragePoolDefineXML' file='libvirt' module='libvirt'>
      <info><![CDATA[Define a new inactive storage pool based on its XML description. The
pool is persistent, until explicitly undefined.]]></info>
      <return type='virStoragePoolPtr' info='a virStoragePoolPtr object, or NULL if creation failed'/>
      <arg name='conn' type='virConnectPtr' info='pointer to hypervisor connection'/>
      <arg name='xml' type='const char *' info='XML description for new pool'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virStoragePoolDelete' file='libvirt' module='libvirt'>
      <info><![CDATA[Delete the underlying pool resources. This is
a non-recoverable operation. The virStoragePoolPtr object
itself is not free'd.]]></info>
      <return type='int' info='0 on success, or -1 if it could not be obliterate'/>
      <arg name='pool' type='virStoragePoolPtr' info='pointer to storage pool'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virStoragePoolDeleteFlags'/>
    </function>
    <function name='virStoragePoolDestroy' file='libvirt' module='libvirt'>
      <info><![CDATA[Destroy an active storage pool. This will deactivate the
pool on the host, but keep any persistent config associated
with it. If it has a persistent config it can later be
restarted with virStoragePoolCreate(). This does not free
the associated virStoragePoolPtr object.]]></info>
      <return type='int' info='0 on success, or -1 if it could not be destroyed'/>
      <arg name='pool' type='virStoragePoolPtr' info='pointer to storage pool'/>
    </function>
    <function name='virStoragePoolFree' file='libvirt' module='libvirt'>
      <info><![CDATA[Free a storage pool object, releasing all memory associated with
it. Does not change the state of the pool on the host.]]></info>
      <return type='int' info='0 on success, or -1 if it could not be free&apos;d.'/>
      <arg name='pool' type='virStoragePoolPtr' info='pointer to storage pool'/>
    </function>
    <function name='virStoragePoolGetAutostart' file='libvirt' module='libvirt'>
      <info><![CDATA[Fetches the value of the autostart flag, which determines
whether the pool is automatically started at boot time]]></info>
      <return type='int' info='0 on success, -1 on failure'/>
      <arg name='pool' type='virStoragePoolPtr' info='pointer to storage pool'/>
      <arg name='autostart' type='int *' info='location in which to store autostart flag'/>
    </function>
    <function name='virStoragePoolGetConnect' file='libvirt' module='libvirt'>
      <info><![CDATA[Provides the connection pointer associated with a storage pool.  The
reference counter on the connection is not increased by this
call.

WARNING: When writing libvirt bindings in other languages, do
not use this function.  Instead, store the connection and
the pool object together.]]></info>
      <return type='virConnectPtr' info='the virConnectPtr or NULL in case of failure.'/>
      <arg name='pool' type='virStoragePoolPtr' info='pointer to a pool'/>
    </function>
    <function name='virStoragePoolGetInfo' file='libvirt' module='libvirt'>
      <info><![CDATA[Get volatile information about the storage pool
such as free space / usage summary]]></info>
      <return type='int' info='0 on success, or -1 on failure.'/>
      <arg name='pool' type='virStoragePoolPtr' info='pointer to storage pool'/>
      <arg name='info' type='virStoragePoolInfoPtr' info='pointer at which to store info'/>
    </function>
    <function name='virStoragePoolGetName' file='libvirt' module='libvirt'>
      <info><![CDATA[Fetch the locally unique name of the storage pool]]></info>
      <return type='const char *' info='the name of the pool, or NULL on error'/>
      <arg name='pool' type='virStoragePoolPtr' info='pointer to storage pool'/>
    </function>
    <function name='virStoragePoolGetUUID' file='libvirt' module='libvirt'>
      <info><![CDATA[Fetch the globally unique ID of the storage pool]]></info>
      <return type='int' info='0 on success, or -1 on error;'/>
      <arg name='pool' type='virStoragePoolPtr' info='pointer to storage pool'/>
      <arg name='uuid' type='unsigned char *' info='buffer of VIR_UUID_BUFLEN bytes in size'/>
    </function>
    <function name='virStoragePoolGetUUIDString' file='libvirt' module='libvirt'>
      <info><![CDATA[Fetch the globally unique ID of the storage pool as a string]]></info>
      <return type='int' info='0 on success, or -1 on error;'/>
      <arg name='pool' type='virStoragePoolPtr' info='pointer to storage pool'/>
      <arg name='buf' type='char *' info='buffer of VIR_UUID_STRING_BUFLEN bytes in size'/>
    </function>
    <function name='virStoragePoolGetXMLDesc' file='libvirt' module='libvirt'>
      <info><![CDATA[Fetch an XML document describing all aspects of the
storage pool. This is suitable for later feeding back
into the virStoragePoolCreateXML method.]]></info>
      <return type='char *' info='a XML document, or NULL on error'/>
      <arg name='pool' type='virStoragePoolPtr' info='pointer to storage pool'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virStorageXMLFlags'/>
    </function>
    <function name='virStoragePoolIsActive' file='libvirt' module='libvirt'>
      <info><![CDATA[Determine if the storage pool is currently running]]></info>
      <return type='int' info='1 if running, 0 if inactive, -1 on error'/>
      <arg name='pool' type='virStoragePoolPtr' info='pointer to the storage pool object'/>
    </function>
    <function name='virStoragePoolIsPersistent' file='libvirt' module='libvirt'>
      <info><![CDATA[Determine if the storage pool has a persistent configuration
which means it will still exist after shutting down]]></info>
      <return type='int' info='1 if persistent, 0 if transient, -1 on error'/>
      <arg name='pool' type='virStoragePoolPtr' info='pointer to the storage pool object'/>
    </function>
    <function name='virStoragePoolListAllVolumes' file='libvirt' module='libvirt'>
      <info><![CDATA[Collect the list of storage volumes, and allocate an array to store those
objects.]]></info>
      <return type='int' info='the number of storage volumes found or -1 and sets @vols to NULL in case of error.  On success, the array stored into @vols is guaranteed to have an extra allocated element set to NULL but not included in the return count, to make iteration easier.  The caller is responsible for calling virStorageVolFree() on each array element, then calling free() on @vols.'/>
      <arg name='pool' type='virStoragePoolPtr' info='Pointer to storage pool'/>
      <arg name='vols' type='virStorageVolPtr **' info='Pointer to a variable to store the array containing storage volume objects or NULL if the list is not required (just returns number of volumes).'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virStoragePoolListVolumes' file='libvirt' module='libvirt'>
      <info><![CDATA[Fetch list of storage volume names, limiting to
at most maxnames.

To list the volume objects directly, see virStoragePoolListAllVolumes().]]></info>
      <return type='int' info='the number of names fetched, or -1 on error'/>
      <arg name='pool' type='virStoragePoolPtr' info='pointer to storage pool'/>
      <arg name='names' type='char ** const' info='array in which to storage volume names'/>
      <arg name='maxnames' type='int' info='size of names array'/>
    </function>
    <function name='virStoragePoolLookupByName' file='libvirt' module='libvirt'>
      <info><![CDATA[Fetch a storage pool based on its unique name]]></info>
      <return type='virStoragePoolPtr' info='a virStoragePoolPtr object, or NULL if no matching pool is found'/>
      <arg name='conn' type='virConnectPtr' info='pointer to hypervisor connection'/>
      <arg name='name' type='const char *' info='name of pool to fetch'/>
    </function>
    <function name='virStoragePoolLookupByUUID' file='libvirt' module='libvirt'>
      <info><![CDATA[Fetch a storage pool based on its globally unique id]]></info>
      <return type='virStoragePoolPtr' info='a virStoragePoolPtr object, or NULL if no matching pool is found'/>
      <arg name='conn' type='virConnectPtr' info='pointer to hypervisor connection'/>
      <arg name='uuid' type='const unsigned char *' info='globally unique id of pool to fetch'/>
    </function>
    <function name='virStoragePoolLookupByUUIDString' file='libvirt' module='libvirt'>
      <info><![CDATA[Fetch a storage pool based on its globally unique id]]></info>
      <return type='virStoragePoolPtr' info='a virStoragePoolPtr object, or NULL if no matching pool is found'/>
      <arg name='conn' type='virConnectPtr' info='pointer to hypervisor connection'/>
      <arg name='uuidstr' type='const char *' info='globally unique id of pool to fetch'/>
    </function>
    <function name='virStoragePoolLookupByVolume' file='libvirt' module='libvirt'>
      <info><![CDATA[Fetch a storage pool which contains a particular volume]]></info>
      <return type='virStoragePoolPtr' info='a virStoragePoolPtr object, or NULL if no matching pool is found'/>
      <arg name='vol' type='virStorageVolPtr' info='pointer to storage volume'/>
    </function>
    <function name='virStoragePoolNumOfVolumes' file='libvirt' module='libvirt'>
      <info><![CDATA[Fetch the number of storage volumes within a pool]]></info>
      <return type='int' info='the number of storage pools, or -1 on failure'/>
      <arg name='pool' type='virStoragePoolPtr' info='pointer to storage pool'/>
    </function>
    <function name='virStoragePoolRef' file='libvirt' module='libvirt'>
      <info><![CDATA[Increment the reference count on the pool. For each
additional call to this method, there shall be a corresponding
call to virStoragePoolFree to release the reference count, once
the caller no longer needs the reference to this object.

This method is typically useful for applications where multiple
threads are using a connection, and it is required that the
connection remain open until all threads have finished using
it. ie, each new thread using a pool would increment
the reference count.]]></info>
      <return type='int' info='0 in case of success, -1 in case of failure.'/>
      <arg name='pool' type='virStoragePoolPtr' info='the pool to hold a reference on'/>
    </function>
    <function name='virStoragePoolRefresh' file='libvirt' module='libvirt'>
      <info><![CDATA[Request that the pool refresh its list of volumes. This may
involve communicating with a remote server, and/or initializing
new devices at the OS layer]]></info>
      <return type='int' info='0 if the volume list was refreshed, -1 on failure'/>
      <arg name='pool' type='virStoragePoolPtr' info='pointer to storage pool'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virStoragePoolSetAutostart' file='libvirt' module='libvirt'>
      <info><![CDATA[Sets the autostart flag]]></info>
      <return type='int' info='0 on success, -1 on failure'/>
      <arg name='pool' type='virStoragePoolPtr' info='pointer to storage pool'/>
      <arg name='autostart' type='int' info='new flag setting'/>
    </function>
    <function name='virStoragePoolUndefine' file='libvirt' module='libvirt'>
      <info><![CDATA[Undefine an inactive storage pool]]></info>
      <return type='int' info='0 on success, -1 on failure'/>
      <arg name='pool' type='virStoragePoolPtr' info='pointer to storage pool'/>
    </function>
    <function name='virStorageVolCreateXML' file='libvirt' module='libvirt'>
      <info><![CDATA[Create a storage volume within a pool based
on an XML description. Not all pools support
creation of volumes.

Since 1.0.1 VIR_STORAGE_VOL_CREATE_PREALLOC_METADATA
in flags can be used to get higher performance with
qcow2 image files which don't support full preallocation,
by creating a sparse image file with metadata.]]></info>
      <return type='virStorageVolPtr' info='the storage volume, or NULL on error'/>
      <arg name='pool' type='virStoragePoolPtr' info='pointer to storage pool'/>
      <arg name='xmlDesc' type='const char *' info='description of volume to create'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virStorageVolCreateFlags'/>
    </function>
    <function name='virStorageVolCreateXMLFrom' file='libvirt' module='libvirt'>
      <info><![CDATA[Create a storage volume in the parent pool, using the
'clonevol' volume as input. Information for the new
volume (name, perms)  are passed via a typical volume
XML description.

Since 1.0.1 VIR_STORAGE_VOL_CREATE_PREALLOC_METADATA
in flags can be used to get higher performance with
qcow2 image files which don't support full preallocation,
by creating a sparse image file with metadata.]]></info>
      <return type='virStorageVolPtr' info='the storage volume, or NULL on error'/>
      <arg name='pool' type='virStoragePoolPtr' info='pointer to parent pool for the new volume'/>
      <arg name='xmlDesc' type='const char *' info='description of volume to create'/>
      <arg name='clonevol' type='virStorageVolPtr' info='storage volume to use as input'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virStorageVolCreateFlags'/>
    </function>
    <function name='virStorageVolDelete' file='libvirt' module='libvirt'>
      <info><![CDATA[Delete the storage volume from the pool]]></info>
      <return type='int' info='0 on success, or -1 on error'/>
      <arg name='vol' type='virStorageVolPtr' info='pointer to storage volume'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virStorageVolDownload' file='libvirt' module='libvirt'>
      <info><![CDATA[Download the content of the volume as a stream. If @length
is zero, then the remaining contents of the volume after
@offset will be downloaded.

This call sets up an asynchronous stream; subsequent use of
stream APIs is necessary to transfer the actual data,
determine how much data is successfully transferred, and
detect any errors. The results will be unpredictable if
another active stream is writing to the storage volume.]]></info>
      <return type='int' info='0, or -1 upon error.'/>
      <arg name='vol' type='virStorageVolPtr' info='pointer to volume to download from'/>
      <arg name='stream' type='virStreamPtr' info='stream to use as output'/>
      <arg name='offset' type='unsigned long long' info='position in @vol to start reading from'/>
      <arg name='length' type='unsigned long long' info='limit on amount of data to download'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virStorageVolFree' file='libvirt' module='libvirt'>
      <info><![CDATA[Release the storage volume handle. The underlying
storage volume continues to exist.]]></info>
      <return type='int' info='0 on success, or -1 on error'/>
      <arg name='vol' type='virStorageVolPtr' info='pointer to storage volume'/>
    </function>
    <function name='virStorageVolGetConnect' file='libvirt' module='libvirt'>
      <info><![CDATA[Provides the connection pointer associated with a storage volume.  The
reference counter on the connection is not increased by this
call.

WARNING: When writing libvirt bindings in other languages, do
not use this function.  Instead, store the connection and
the volume object together.]]></info>
      <return type='virConnectPtr' info='the virConnectPtr or NULL in case of failure.'/>
      <arg name='vol' type='virStorageVolPtr' info='pointer to a pool'/>
    </function>
    <function name='virStorageVolGetInfo' file='libvirt' module='libvirt'>
      <info><![CDATA[Fetches volatile information about the storage
volume such as its current allocation]]></info>
      <return type='int' info='0 on success, or -1 on failure'/>
      <arg name='vol' type='virStorageVolPtr' info='pointer to storage volume'/>
      <arg name='info' type='virStorageVolInfoPtr' info='pointer at which to store info'/>
    </function>
    <function name='virStorageVolGetKey' file='libvirt' module='libvirt'>
      <info><![CDATA[Fetch the storage volume key. This is globally
unique, so the same volume will have the same
key no matter what host it is accessed from]]></info>
      <return type='const char *' info='the volume key, or NULL on error'/>
      <arg name='vol' type='virStorageVolPtr' info='pointer to storage volume'/>
    </function>
    <function name='virStorageVolGetName' file='libvirt' module='libvirt'>
      <info><![CDATA[Fetch the storage volume name. This is unique
within the scope of a pool]]></info>
      <return type='const char *' info='the volume name, or NULL on error'/>
      <arg name='vol' type='virStorageVolPtr' info='pointer to storage volume'/>
    </function>
    <function name='virStorageVolGetPath' file='libvirt' module='libvirt'>
      <info><![CDATA[Fetch the storage volume path. Depending on the pool
configuration this is either persistent across hosts,
or dynamically assigned at pool startup. Consult
pool documentation for information on getting the
persistent naming]]></info>
      <return type='char *' info='the storage volume path, or NULL on error. The caller must free() the returned path after use.'/>
      <arg name='vol' type='virStorageVolPtr' info='pointer to storage volume'/>
    </function>
    <function name='virStorageVolGetXMLDesc' file='libvirt' module='libvirt'>
      <info><![CDATA[Fetch an XML document describing all aspects of
the storage volume]]></info>
      <return type='char *' info='the XML document, or NULL on error'/>
      <arg name='vol' type='virStorageVolPtr' info='pointer to storage volume'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virStorageVolLookupByKey' file='libvirt' module='libvirt'>
      <info><![CDATA[Fetch a pointer to a storage volume based on its
globally unique key]]></info>
      <return type='virStorageVolPtr' info='a storage volume, or NULL if not found / error'/>
      <arg name='conn' type='virConnectPtr' info='pointer to hypervisor connection'/>
      <arg name='key' type='const char *' info='globally unique key'/>
    </function>
    <function name='virStorageVolLookupByName' file='libvirt' module='libvirt'>
      <info><![CDATA[Fetch a pointer to a storage volume based on its name
within a pool]]></info>
      <return type='virStorageVolPtr' info='a storage volume, or NULL if not found / error'/>
      <arg name='pool' type='virStoragePoolPtr' info='pointer to storage pool'/>
      <arg name='name' type='const char *' info='name of storage volume'/>
    </function>
    <function name='virStorageVolLookupByPath' file='libvirt' module='libvirt'>
      <info><![CDATA[Fetch a pointer to a storage volume based on its
locally (host) unique path]]></info>
      <return type='virStorageVolPtr' info='a storage volume, or NULL if not found / error'/>
      <arg name='conn' type='virConnectPtr' info='pointer to hypervisor connection'/>
      <arg name='path' type='const char *' info='locally unique path'/>
    </function>
    <function name='virStorageVolRef' file='libvirt' module='libvirt'>
      <info><![CDATA[Increment the reference count on the vol. For each
additional call to this method, there shall be a corresponding
call to virStorageVolFree to release the reference count, once
the caller no longer needs the reference to this object.

This method is typically useful for applications where multiple
threads are using a connection, and it is required that the
connection remain open until all threads have finished using
it. ie, each new thread using a vol would increment
the reference count.]]></info>
      <return type='int' info='0 in case of success, -1 in case of failure.'/>
      <arg name='vol' type='virStorageVolPtr' info='the vol to hold a reference on'/>
    </function>
    <function name='virStorageVolResize' file='libvirt' module='libvirt'>
      <info><![CDATA[Changes the capacity of the storage volume @vol to @capacity. The
operation will fail if the new capacity requires allocation that would
exceed the remaining free space in the parent pool.  The contents of
the new capacity will appear as all zero bytes. The capacity value will
be rounded to the granularity supported by the hypervisor.

Normally, the operation will attempt to affect capacity with a minimum
impact on allocation (that is, the default operation favors a sparse
resize).  If @flags contains VIR_STORAGE_VOL_RESIZE_ALLOCATE, then the
operation will ensure that allocation is sufficient for the new
capacity; this may make the operation take noticeably longer.

Normally, the operation treats @capacity as the new size in bytes;
but if @flags contains VIR_STORAGE_VOL_RESIZE_DELTA, then @capacity
represents the size difference to add to the current size.  It is
up to the storage pool implementation whether unaligned requests are
rounded up to the next valid boundary, or rejected.

Normally, this operation should only be used to enlarge capacity;
but if @flags contains VIR_STORAGE_VOL_RESIZE_SHRINK, it is possible to
attempt a reduction in capacity even though it might cause data loss.
If VIR_STORAGE_VOL_RESIZE_DELTA is also present, then @capacity is
subtracted from the current size; without it, @capacity represents
the absolute new size regardless of whether it is larger or smaller
than the current size.]]></info>
      <return type='int' info='0 on success, or -1 on error.'/>
      <arg name='vol' type='virStorageVolPtr' info='pointer to storage volume'/>
      <arg name='capacity' type='unsigned long long' info='new capacity, in bytes'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virStorageVolResizeFlags'/>
    </function>
    <function name='virStorageVolUpload' file='libvirt' module='libvirt'>
      <info><![CDATA[Upload new content to the volume from a stream. This call
will fail if @offset + @length exceeds the size of the
volume. Otherwise, if @length is non-zero, an error
will be raised if an attempt is made to upload greater
than @length bytes of data.

This call sets up an asynchronous stream; subsequent use of
stream APIs is necessary to transfer the actual data,
determine how much data is successfully transferred, and
detect any errors. The results will be unpredictable if
another active stream is writing to the storage volume.]]></info>
      <return type='int' info='0, or -1 upon error.'/>
      <arg name='vol' type='virStorageVolPtr' info='pointer to volume to upload'/>
      <arg name='stream' type='virStreamPtr' info='stream to use as input'/>
      <arg name='offset' type='unsigned long long' info='position to start writing to'/>
      <arg name='length' type='unsigned long long' info='limit on amount of data to upload'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virStorageVolWipe' file='libvirt' module='libvirt'>
      <info><![CDATA[Ensure data previously on a volume is not accessible to future reads]]></info>
      <return type='int' info='0 on success, or -1 on error'/>
      <arg name='vol' type='virStorageVolPtr' info='pointer to storage volume'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
    </function>
    <function name='virStorageVolWipePattern' file='libvirt' module='libvirt'>
      <info><![CDATA[Similar to virStorageVolWipe, but one can choose
between different wiping algorithms.]]></info>
      <return type='int' info='0 on success, or -1 on error.'/>
      <arg name='vol' type='virStorageVolPtr' info='pointer to storage volume'/>
      <arg name='algorithm' type='unsigned int' info='one of virStorageVolWipeAlgorithm'/>
      <arg name='flags' type='unsigned int' info='future flags, use 0 for now'/>
    </function>
    <function name='virStreamAbort' file='libvirt' module='libvirt'>
      <info><![CDATA[Request that the in progress data transfer be cancelled
abnormally before the end of the stream has been reached.
For output streams this can be used to inform the driver
that the stream is being terminated early. For input
streams this can be used to inform the driver that it
should stop sending data.]]></info>
      <return type='int' info='0 on success, -1 upon error'/>
      <arg name='stream' type='virStreamPtr' info='pointer to the stream object'/>
    </function>
    <function name='virStreamEventAddCallback' file='libvirt' module='libvirt'>
      <info><![CDATA[Register a callback to be notified when a stream
becomes writable, or readable. This is most commonly
used in conjunction with non-blocking data streams
to integrate into an event loop]]></info>
      <return type='int' info='0 on success, -1 upon error'/>
      <arg name='stream' type='virStreamPtr' info='pointer to the stream object'/>
      <arg name='events' type='int' info='set of events to monitor'/>
      <arg name='cb' type='virStreamEventCallback' info='callback to invoke when an event occurs'/>
      <arg name='opaque' type='void *' info='application defined data'/>
      <arg name='ff' type='virFreeCallback' info='callback to free @opaque data'/>
    </function>
    <functype name='virStreamEventCallback' file='libvirt' module='libvirt'>
      <info><![CDATA[Callback for receiving stream events. The callback will
be invoked once for each event which is pending.]]></info>
      <return type='void'/>
      <arg name='stream' type='virStreamPtr' info='stream on which the event occurred'/>
      <arg name='events' type='int' info='bitset of events from virEventHandleType constants'/>
      <arg name='opaque' type='void *' info='user data registered with handle'/>
    </functype>
    <function name='virStreamEventRemoveCallback' file='libvirt' module='libvirt'>
      <info><![CDATA[Remove an event callback from the stream]]></info>
      <return type='int' info='0 on success, -1 on error'/>
      <arg name='stream' type='virStreamPtr' info='pointer to the stream object'/>
    </function>
    <function name='virStreamEventUpdateCallback' file='libvirt' module='libvirt'>
      <info><![CDATA[Changes the set of events to monitor for a stream. This allows
for event notification to be changed without having to
unregister & register the callback completely. This method
is guaranteed to succeed if a callback is already registered]]></info>
      <return type='int' info='0 on success, -1 if no callback is registered'/>
      <arg name='stream' type='virStreamPtr' info='pointer to the stream object'/>
      <arg name='events' type='int' info='set of events to monitor'/>
    </function>
    <function name='virStreamFinish' file='libvirt' module='libvirt'>
      <info><![CDATA[Indicate that there is no further data to be transmitted
on the stream. For output streams this should be called once
all data has been written. For input streams this should be
called once virStreamRecv returns end-of-file.

This method is a synchronization point for all asynchronous
errors, so if this returns a success code the application can
be sure that all data has been successfully processed.]]></info>
      <return type='int' info='0 on success, -1 upon error'/>
      <arg name='stream' type='virStreamPtr' info='pointer to the stream object'/>
    </function>
    <function name='virStreamFree' file='libvirt' module='libvirt'>
      <info><![CDATA[Decrement the reference count on a stream, releasing
the stream object if the reference count has hit zero.

There must not be an active data transfer in progress
when releasing the stream. If a stream needs to be
disposed of prior to end of stream being reached, then
the virStreamAbort function should be called first.]]></info>
      <return type='int' info='0 upon success, or -1 on error'/>
      <arg name='stream' type='virStreamPtr' info='pointer to the stream object'/>
    </function>
    <function name='virStreamNew' file='libvirt' module='libvirt'>
      <info><![CDATA[Creates a new stream object which can be used to perform
streamed I/O with other public API function.

When no longer needed, a stream object must be released
with virStreamFree. If a data stream has been used,
then the application must call virStreamFinish or
virStreamAbort before free'ing to, in order to notify
the driver of termination.

If a non-blocking data stream is required passed
VIR_STREAM_NONBLOCK for flags, otherwise pass 0.]]></info>
      <return type='virStreamPtr' info='the new stream, or NULL upon error'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the connection'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virStreamFlags'/>
    </function>
    <function name='virStreamRecv' file='libvirt' module='libvirt'>
      <info><![CDATA[Reads a series of bytes from the stream. This method may
block the calling application for an arbitrary amount
of time.

Errors are not guaranteed to be reported synchronously
with the call, but may instead be delayed until a
subsequent call.

An example using this with a hypothetical file download
API looks like

    virStreamPtr st = virStreamNew(conn, 0);
    int fd = open("demo.iso", O_WRONLY, 0600);

    virConnectDownloadFile(conn, "demo.iso", st);

    while (1) {
        char buf[1024];
        int got = virStreamRecv(st, buf, 1024);
        if (got < 0)
           break;
        if (got == 0) {
           virStreamFinish(st);
           break;
        }
        int offset = 0;
        while (offset < got) {
           int sent = write(fd, buf + offset, got - offset);
           if (sent < 0) {
              virStreamAbort(st);
              goto done;
           }
           offset += sent;
        }
    }
    if (virStreamFinish(st) < 0)
       ... report an error ....
  done:
    virStreamFree(st);
    close(fd);]]></info>
      <return type='int' info='the number of bytes read, which may be less than requested.  Returns 0 when the end of the stream is reached, at which time the caller should invoke virStreamFinish() to get confirmation of stream completion.  Returns -1 upon error, at which time the stream will be marked as aborted, and the caller should now release the stream with virStreamFree.  Returns -2 if there is no data pending to be read &amp; the stream is marked as non-blocking.'/>
      <arg name='stream' type='virStreamPtr' info='pointer to the stream object'/>
      <arg name='data' type='char *' info='buffer to read into from stream'/>
      <arg name='nbytes' type='size_t' info='size of @data buffer'/>
    </function>
    <function name='virStreamRecvAll' file='libvirt' module='libvirt'>
      <info><![CDATA[Receive the entire data stream, sending the data to the
requested data sink. This is simply a convenient alternative
to virStreamRecv, for apps that do blocking-I/O.

An example using this with a hypothetical file download
API looks like

  int mysink(virStreamPtr st, const char *buf, int nbytes, void *opaque) {
      int *fd = opaque;

      return write(*fd, buf, nbytes);
  }

  virStreamPtr st = virStreamNew(conn, 0);
  int fd = open("demo.iso", O_WRONLY);

  virConnectUploadFile(conn, st);
  if (virStreamRecvAll(st, mysink, &fd) < 0) {
     ...report an error ...
     goto done;
  }
  if (virStreamFinish(st) < 0)
     ...report an error...
  virStreamFree(st);
  close(fd);]]></info>
      <return type='int' info='0 if all the data was successfully received. The caller should invoke virStreamFinish(st) to flush the stream upon success and then virStreamFree  Returns -1 upon any error, with virStreamAbort() already having been called,  so the caller need only call virStreamFree()'/>
      <arg name='stream' type='virStreamPtr' info='pointer to the stream object'/>
      <arg name='handler' type='virStreamSinkFunc' info='sink callback for writing data to application'/>
      <arg name='opaque' type='void *' info='application defined data'/>
    </function>
    <function name='virStreamRef' file='libvirt' module='libvirt'>
      <info><![CDATA[Increment the reference count on the stream. For each
additional call to this method, there shall be a corresponding
call to virStreamFree to release the reference count, once
the caller no longer needs the reference to this object.]]></info>
      <return type='int' info='0 in case of success, -1 in case of failure'/>
      <arg name='stream' type='virStreamPtr' info='pointer to the stream'/>
    </function>
    <function name='virStreamSend' file='libvirt' module='libvirt'>
      <info><![CDATA[Write a series of bytes to the stream. This method may
block the calling application for an arbitrary amount
of time. Once an application has finished sending data
it should call virStreamFinish to wait for successful
confirmation from the driver, or detect any error.

This method may not be used if a stream source has been
registered.

Errors are not guaranteed to be reported synchronously
with the call, but may instead be delayed until a
subsequent call.

An example using this with a hypothetical file upload
API looks like

    virStreamPtr st = virStreamNew(conn, 0);
    int fd = open("demo.iso", O_RDONLY);

    virConnectUploadFile(conn, "demo.iso", st);

    while (1) {
         char buf[1024];
         int got = read(fd, buf, 1024);
         if (got < 0) {
            virStreamAbort(st);
            break;
         }
         if (got == 0) {
            virStreamFinish(st);
            break;
         }
         int offset = 0;
         while (offset < got) {
            int sent = virStreamSend(st, buf+offset, got-offset);
            if (sent < 0) {
               virStreamAbort(st);
               goto done;
            }
            offset += sent;
         }
     }
     if (virStreamFinish(st) < 0)
        ... report an error ....
   done:
     virStreamFree(st);
     close(fd);]]></info>
      <return type='int' info='the number of bytes written, which may be less than requested.  Returns -1 upon error, at which time the stream will be marked as aborted, and the caller should now release the stream with virStreamFree.  Returns -2 if the outgoing transmit buffers are full &amp; the stream is marked as non-blocking.'/>
      <arg name='stream' type='virStreamPtr' info='pointer to the stream object'/>
      <arg name='data' type='const char *' info='buffer to write to stream'/>
      <arg name='nbytes' type='size_t' info='size of @data buffer'/>
    </function>
    <function name='virStreamSendAll' file='libvirt' module='libvirt'>
      <info><![CDATA[Send the entire data stream, reading the data from the
requested data source. This is simply a convenient alternative
to virStreamSend, for apps that do blocking-I/O.

An example using this with a hypothetical file upload
API looks like

  int mysource(virStreamPtr st, char *buf, int nbytes, void *opaque) {
      int *fd = opaque;

      return read(*fd, buf, nbytes);
  }

  virStreamPtr st = virStreamNew(conn, 0);
  int fd = open("demo.iso", O_RDONLY);

  virConnectUploadFile(conn, st);
  if (virStreamSendAll(st, mysource, &fd) < 0) {
     ...report an error ...
     goto done;
  }
  if (virStreamFinish(st) < 0)
     ...report an error...
  virStreamFree(st);
  close(fd);]]></info>
      <return type='int' info='0 if all the data was successfully sent. The caller should invoke virStreamFinish(st) to flush the stream upon success and then virStreamFree  Returns -1 upon any error, with virStreamAbort() already having been called,  so the caller need only call virStreamFree()'/>
      <arg name='stream' type='virStreamPtr' info='pointer to the stream object'/>
      <arg name='handler' type='virStreamSourceFunc' info='source callback for reading data from application'/>
      <arg name='opaque' type='void *' info='application defined data'/>
    </function>
    <functype name='virStreamSinkFunc' file='libvirt' module='libvirt'>
      <info><![CDATA[The virStreamSinkFunc callback is used together
with the virStreamRecvAll function for libvirt to
provide the data that has been received.

The callback will be invoked multiple times,
providing data in small chunks. The application
should consume up 'nbytes' from the 'data' array
of data and then return the number actual number
of bytes consumed. The callback will continue to be
invoked until it indicates the end of the stream
has been reached. A return value of -1 at any time
will abort the receive operation]]></info>
      <return type='int' info='the number of bytes consumed or -1 upon error'/>
      <arg name='st' type='virStreamPtr' info='the stream object'/>
      <arg name='data' type='const char *' info='preallocated array to be filled with data'/>
      <arg name='nbytes' type='size_t' info='size of the data array'/>
      <arg name='opaque' type='void *' info='optional application provided data'/>
    </functype>
    <functype name='virStreamSourceFunc' file='libvirt' module='libvirt'>
      <info><![CDATA[The virStreamSourceFunc callback is used together
with the virStreamSendAll function for libvirt to
obtain the data that is to be sent.

The callback will be invoked multiple times,
fetching data in small chunks. The application
should fill the 'data' array with up to 'nbytes'
of data and then return the number actual number
of bytes. The callback will continue to be
invoked until it indicates the end of the source
has been reached by returning 0. A return value
of -1 at any time will abort the send operation]]></info>
      <return type='int' info='the number of bytes filled, 0 upon end of file, or -1 upon error'/>
      <arg name='st' type='virStreamPtr' info='the stream object'/>
      <arg name='data' type='char *' info='preallocated array to be filled with data'/>
      <arg name='nbytes' type='size_t' info='size of the data array'/>
      <arg name='opaque' type='void *' info='optional application provided data'/>
    </functype>
    <function name='virTypedParamsAddBoolean' file='libvirt' module='virtypedparam'>
      <info><![CDATA[Adds new parameter called @name with boolean type and sets its value to
@value. If @params array points to NULL or to a space that is not large
enough to accommodate the new parameter (@maxparams < @nparams + 1), the
function allocates more space for it and updates @maxparams. On success,
@nparams is incremented by one. The function fails with VIR_ERR_INVALID_ARG
error if the parameter already exists in @params.]]></info>
      <return type='int' info='0 on success, -1 on error.'/>
      <arg name='params' type='virTypedParameterPtr *' info='pointer to the array of typed parameters'/>
      <arg name='nparams' type='int *' info='number of parameters in the @params array'/>
      <arg name='maxparams' type='int *' info='maximum number of parameters that can be stored in @params array without allocating more memory'/>
      <arg name='name' type='const char *' info='name of the parameter to find'/>
      <arg name='value' type='int' info='the value to store into the new parameter'/>
    </function>
    <function name='virTypedParamsAddDouble' file='libvirt' module='virtypedparam'>
      <info><![CDATA[Adds new parameter called @name with double type and sets its value to
@value. If @params array points to NULL or to a space that is not large
enough to accommodate the new parameter (@maxparams < @nparams + 1), the
function allocates more space for it and updates @maxparams. On success,
@nparams is incremented by one. The function fails with VIR_ERR_INVALID_ARG
error if the parameter already exists in @params.]]></info>
      <return type='int' info='0 on success, -1 on error.'/>
      <arg name='params' type='virTypedParameterPtr *' info='pointer to the array of typed parameters'/>
      <arg name='nparams' type='int *' info='number of parameters in the @params array'/>
      <arg name='maxparams' type='int *' info='maximum number of parameters that can be stored in @params array without allocating more memory'/>
      <arg name='name' type='const char *' info='name of the parameter to find'/>
      <arg name='value' type='double' info='the value to store into the new parameter'/>
    </function>
    <function name='virTypedParamsAddFromString' file='libvirt' module='virtypedparam'>
      <info><![CDATA[Adds new parameter called @name with the requested @type and parses its
value from the @value string. If the requested type is string, the function
creates its own copy of the @value string, which needs to be freed using
virTypedParamsFree or virTypedParamsClear. If @params array points to NULL
or to a space that is not large enough to accommodate the new parameter
(@maxparams < @nparams + 1), the function allocates more space for it and
updates @maxparams. On success, @nparams is incremented by one. The
function fails with VIR_ERR_INVALID_ARG error if the parameter already
exists in @params.]]></info>
      <return type='int' info='0 on success, -1 on error.'/>
      <arg name='params' type='virTypedParameterPtr *' info='pointer to the array of typed parameters'/>
      <arg name='nparams' type='int *' info='number of parameters in the @params array'/>
      <arg name='maxparams' type='int *' info='maximum number of parameters that can be stored in @params array without allocating more memory'/>
      <arg name='name' type='const char *' info='name of the parameter to find'/>
      <arg name='type' type='int' info='type of the parameter'/>
      <arg name='value' type='const char *' info='the value to store into the new parameter encoded as a string'/>
    </function>
    <function name='virTypedParamsAddInt' file='libvirt' module='virtypedparam'>
      <info><![CDATA[Adds new parameter called @name with int type and sets its value to @value.
If @params array points to NULL or to a space that is not large enough to
accommodate the new parameter (@maxparams < @nparams + 1), the function
allocates more space for it and updates @maxparams. On success, @nparams
is incremented by one. The function fails with VIR_ERR_INVALID_ARG error
if the parameter already exists in @params.]]></info>
      <return type='int' info='0 on success, -1 on error.'/>
      <arg name='params' type='virTypedParameterPtr *' info='pointer to the array of typed parameters'/>
      <arg name='nparams' type='int *' info='number of parameters in the @params array'/>
      <arg name='maxparams' type='int *' info='maximum number of parameters that can be stored in @params array without allocating more memory'/>
      <arg name='name' type='const char *' info='name of the parameter to find'/>
      <arg name='value' type='int' info='the value to store into the new parameter'/>
    </function>
    <function name='virTypedParamsAddLLong' file='libvirt' module='virtypedparam'>
      <info><![CDATA[Adds new parameter called @name with long long int type and sets its value
to @value. If @params array points to NULL or to a space that is not large
enough to accommodate the new parameter (@maxparams < @nparams + 1), the
function allocates more space for it and updates @maxparams. On success,
@nparams is incremented by one. The function fails with VIR_ERR_INVALID_ARG
error if the parameter already exists in @params.]]></info>
      <return type='int' info='0 on success, -1 on error.'/>
      <arg name='params' type='virTypedParameterPtr *' info='pointer to the array of typed parameters'/>
      <arg name='nparams' type='int *' info='number of parameters in the @params array'/>
      <arg name='maxparams' type='int *' info='maximum number of parameters that can be stored in @params array without allocating more memory'/>
      <arg name='name' type='const char *' info='name of the parameter to find'/>
      <arg name='value' type='long long' info='the value to store into the new parameter'/>
    </function>
    <function name='virTypedParamsAddString' file='libvirt' module='virtypedparam'>
      <info><![CDATA[Adds new parameter called @name with char * type and sets its value to
@value. The function creates its own copy of @value string, which needs to
be freed using virTypedParamsFree or virTypedParamsClear. If @params array
points to NULL or to a space that is not large enough to accommodate the
new parameter (@maxparams < @nparams + 1), the function allocates more
space for it and updates @maxparams. On success, @nparams is incremented
by one. The function fails with VIR_ERR_INVALID_ARG error if the parameter
already exists in @params.]]></info>
      <return type='int' info='0 on success, -1 on error.'/>
      <arg name='params' type='virTypedParameterPtr *' info='pointer to the array of typed parameters'/>
      <arg name='nparams' type='int *' info='number of parameters in the @params array'/>
      <arg name='maxparams' type='int *' info='maximum number of parameters that can be stored in @params array without allocating more memory'/>
      <arg name='name' type='const char *' info='name of the parameter to find'/>
      <arg name='value' type='const char *' info='the value to store into the new parameter'/>
    </function>
    <function name='virTypedParamsAddUInt' file='libvirt' module='virtypedparam'>
      <info><![CDATA[Adds new parameter called @name with unsigned int type and sets its value
to @value. If @params array points to NULL or to a space that is not large
enough to accommodate the new parameter (@maxparams < @nparams + 1), the
function allocates more space for it and updates @maxparams. On success,
@nparams is incremented by one. The function fails with VIR_ERR_INVALID_ARG
error if the parameter already exists in @params.]]></info>
      <return type='int' info='0 on success, -1 on error.'/>
      <arg name='params' type='virTypedParameterPtr *' info='pointer to the array of typed parameters'/>
      <arg name='nparams' type='int *' info='number of parameters in the @params array'/>
      <arg name='maxparams' type='int *' info='maximum number of parameters that can be stored in @params array without allocating more memory'/>
      <arg name='name' type='const char *' info='name of the parameter to find'/>
      <arg name='value' type='unsigned int' info='the value to store into the new parameter'/>
    </function>
    <function name='virTypedParamsAddULLong' file='libvirt' module='virtypedparam'>
      <info><![CDATA[Adds new parameter called @name with unsigned long long type and sets its
value to @value. If @params array points to NULL or to a space that is not
large enough to accommodate the new parameter (@maxparams < @nparams + 1),
the function allocates more space for it and updates @maxparams. On success,
@nparams is incremented by one. The function fails with VIR_ERR_INVALID_ARG
error if the parameter already exists in @params.]]></info>
      <return type='int' info='0 on success, -1 on error.'/>
      <arg name='params' type='virTypedParameterPtr *' info='pointer to the array of typed parameters'/>
      <arg name='nparams' type='int *' info='number of parameters in the @params array'/>
      <arg name='maxparams' type='int *' info='maximum number of parameters that can be stored in @params array without allocating more memory'/>
      <arg name='name' type='const char *' info='name of the parameter to find'/>
      <arg name='value' type='unsigned long long' info='the value to store into the new parameter'/>
    </function>
    <function name='virTypedParamsClear' file='libvirt' module='virtypedparam'>
      <info><![CDATA[Frees all memory used by string parameters. The memory occupied by @params
is not freed; use virTypedParamsFree if you want it to be freed too.]]></info>
      <return type='void'/>
      <arg name='params' type='virTypedParameterPtr' info='the array of typed parameters'/>
      <arg name='nparams' type='int' info='number of parameters in the @params array'/>
    </function>
    <function name='virTypedParamsFree' file='libvirt' module='virtypedparam'>
      <info><![CDATA[Frees all memory used by string parameters and the memory occupied by
@params.]]></info>
      <return type='void'/>
      <arg name='params' type='virTypedParameterPtr' info='the array of typed parameters'/>
      <arg name='nparams' type='int' info='number of parameters in the @params array'/>
    </function>
    <function name='virTypedParamsGet' file='libvirt' module='virtypedparam'>
      <info><![CDATA[Finds typed parameter called @name.]]></info>
      <return type='virTypedParameterPtr' info='pointer to the parameter or NULL if it does not exist in @params. This function does not raise an error, even when returning NULL.'/>
      <arg name='params' type='virTypedParameterPtr' info='array of typed parameters'/>
      <arg name='nparams' type='int' info='number of parameters in the @params array'/>
      <arg name='name' type='const char *' info='name of the parameter to find'/>
    </function>
    <function name='virTypedParamsGetBoolean' file='libvirt' module='virtypedparam'>
      <info><![CDATA[Finds typed parameter called @name and store its boolean value in @value.
The function fails with VIR_ERR_INVALID_ARG error if the parameter does not
have the expected type. By passing NULL as @value, the function may be used
to check presence and type of the parameter.]]></info>
      <return type='int' info='1 on success, 0 when the parameter does not exist in @params, or -1 on error.'/>
      <arg name='params' type='virTypedParameterPtr' info='array of typed parameters'/>
      <arg name='nparams' type='int' info='number of parameters in the @params array'/>
      <arg name='name' type='const char *' info='name of the parameter to find'/>
      <arg name='value' type='int *' info='where to store the parameter&apos;s value'/>
    </function>
    <function name='virTypedParamsGetDouble' file='libvirt' module='virtypedparam'>
      <info><![CDATA[Finds typed parameter called @name and store its double value in @value.
The function fails with VIR_ERR_INVALID_ARG error if the parameter does not
have the expected type. By passing NULL as @value, the function may be used
to check presence and type of the parameter.]]></info>
      <return type='int' info='1 on success, 0 when the parameter does not exist in @params, or -1 on error.'/>
      <arg name='params' type='virTypedParameterPtr' info='array of typed parameters'/>
      <arg name='nparams' type='int' info='number of parameters in the @params array'/>
      <arg name='name' type='const char *' info='name of the parameter to find'/>
      <arg name='value' type='double *' info='where to store the parameter&apos;s value'/>
    </function>
    <function name='virTypedParamsGetInt' file='libvirt' module='virtypedparam'>
      <info><![CDATA[Finds typed parameter called @name and store its int value in @value. The
function fails with VIR_ERR_INVALID_ARG error if the parameter does not
have the expected type. By passing NULL as @value, the function may be
used to check presence and type of the parameter.]]></info>
      <return type='int' info='1 on success, 0 when the parameter does not exist in @params, or -1 on error.'/>
      <arg name='params' type='virTypedParameterPtr' info='array of typed parameters'/>
      <arg name='nparams' type='int' info='number of parameters in the @params array'/>
      <arg name='name' type='const char *' info='name of the parameter to find'/>
      <arg name='value' type='int *' info='where to store the parameter&apos;s value'/>
    </function>
    <function name='virTypedParamsGetLLong' file='libvirt' module='virtypedparam'>
      <info><![CDATA[Finds typed parameter called @name and store its long long int value in
@value. The function fails with VIR_ERR_INVALID_ARG error if the parameter
does not have the expected type. By passing NULL as @value, the function
may be used to check presence and type of the parameter.]]></info>
      <return type='int' info='1 on success, 0 when the parameter does not exist in @params, or -1 on error.'/>
      <arg name='params' type='virTypedParameterPtr' info='array of typed parameters'/>
      <arg name='nparams' type='int' info='number of parameters in the @params array'/>
      <arg name='name' type='const char *' info='name of the parameter to find'/>
      <arg name='value' type='long long *' info='where to store the parameter&apos;s value'/>
    </function>
    <function name='virTypedParamsGetString' file='libvirt' module='virtypedparam'>
      <info><![CDATA[Finds typed parameter called @name and store its char * value in @value.
The function does not create a copy of the string and the caller must not
free the string @value points to. The function fails with
VIR_ERR_INVALID_ARG error if the parameter does not have the expected type.
By passing NULL as @value, the function may be used to check presence and
type of the parameter.]]></info>
      <return type='int' info='1 on success, 0 when the parameter does not exist in @params, or -1 on error.'/>
      <arg name='params' type='virTypedParameterPtr' info='array of typed parameters'/>
      <arg name='nparams' type='int' info='number of parameters in the @params array'/>
      <arg name='name' type='const char *' info='name of the parameter to find'/>
      <arg name='value' type='const char **' info='where to store the parameter&apos;s value'/>
    </function>
    <function name='virTypedParamsGetUInt' file='libvirt' module='virtypedparam'>
      <info><![CDATA[Finds typed parameter called @name and store its unsigned int value in
@value. The function fails with VIR_ERR_INVALID_ARG error if the parameter
does not have the expected type. By passing NULL as @value, the function
may be used to check presence and type of the parameter.]]></info>
      <return type='int' info='1 on success, 0 when the parameter does not exist in @params, or -1 on error.'/>
      <arg name='params' type='virTypedParameterPtr' info='array of typed parameters'/>
      <arg name='nparams' type='int' info='number of parameters in the @params array'/>
      <arg name='name' type='const char *' info='name of the parameter to find'/>
      <arg name='value' type='unsigned int *' info='where to store the parameter&apos;s value'/>
    </function>
    <function name='virTypedParamsGetULLong' file='libvirt' module='virtypedparam'>
      <info><![CDATA[Finds typed parameter called @name and store its unsigned long long int
value in @value. The function fails with VIR_ERR_INVALID_ARG error if the
parameter does not have the expected type. By passing NULL as @value, the
function may be used to check presence and type of the parameter.]]></info>
      <return type='int' info='1 on success, 0 when the parameter does not exist in @params, or -1 on error.'/>
      <arg name='params' type='virTypedParameterPtr' info='array of typed parameters'/>
      <arg name='nparams' type='int' info='number of parameters in the @params array'/>
      <arg name='name' type='const char *' info='name of the parameter to find'/>
      <arg name='value' type='unsigned long long *' info='where to store the parameter&apos;s value'/>
    </function>
  </symbols>
</api>
